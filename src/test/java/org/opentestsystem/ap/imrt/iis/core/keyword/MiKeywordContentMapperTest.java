package org.opentestsystem.ap.imrt.iis.core.keyword;

import org.junit.Test;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;

import java.util.Collection;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.MiSection.PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.MiSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.MiSection.SPANISH_TABLE_COLUMN_HEADERS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.MiSection.SPANISH_TABLE_ROW_LABELS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.MiSection.TABLE_COLUMN_HEADERS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.MiSection.TABLE_ROW_LABELS;
import static org.opentestsystem.ap.common.model.Table.CELL_TYPE_ANSWER;
import static org.opentestsystem.ap.common.model.Table.CELL_TYPE_LABEL;

public class MiKeywordContentMapperTest {
    private MiKeywordContentMapper mapper = new MiKeywordContentMapper();

    @Test
    public void shouldHandleMiItems() {
        assertThat(mapper.isSupportedItem(new MiItem("123"))).isTrue();
    }

    @Test
    public void shouldConvertItemContent() {
        String englishContent = "    <p>English</p> text";
        String spanishContent = "Spanish     text ";

        MiItem miItem = new MiItem("123");
        miItem.getCore().getEn().setPrompt(englishContent);
        miItem.getCore().getEn().setTable(getTable("English Column", "English Row Label"));
        miItem.getTranslations().getEsp().setPrompt(spanishContent);
        miItem.getTranslations().getEsp().setTable(getTable("Spanish Column", "Spanish Row Label"));
        BaseItem baseItem = mock(BaseItem.class);

        Collection<KeywordContent> keywordContents = mapper.findKeywordForItem(baseItem, miItem);

        assertThat(keywordContents).hasSize(6);

        for (KeywordContent content : keywordContents) {
            assertThat(content.getItem()).isEqualTo(baseItem);
            switch (content.getSection()) {
                case PROMPT:
                    assertThat(content.getContent()).isEqualTo("English text");
                    break;
                case SPANISH_PROMPT:
                    assertThat(content.getContent()).isEqualTo("Spanish text");
                    break;
                case TABLE_ROW_LABELS:
                    assertThat(content.getContent()).isEqualTo("English Row Label");
                    break;
                case TABLE_COLUMN_HEADERS:
                    assertThat(content.getContent()).isEqualTo("English Column");
                    break;
                case SPANISH_TABLE_ROW_LABELS:
                    assertThat(content.getContent()).isEqualTo("Spanish Row Label");
                    break;
                case SPANISH_TABLE_COLUMN_HEADERS:
                    assertThat(content.getContent()).isEqualTo("Spanish Column");
                    break;
                default:
                    fail("Found invalid section " + content.getSection());
            }
        }
    }

    private Table getTable(String columnLabel, String rowLabel) {
        Table.Column column = new Table.Column(columnLabel);
        Table.Cell<String> cellLabel = new Table.Cell<>(CELL_TYPE_LABEL, rowLabel);
        Table.Cell<String> cellAnswer = new Table.Cell<>(CELL_TYPE_ANSWER, "Answer");

        Table table = new Table();
        table.setColumns(Collections.singletonList(column));
        Table.Row row = new Table.Row(cellLabel, cellAnswer);
        table.setRows(Collections.singletonList(row));

        return table;
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldHandleIfWrongTypeIsPassedIn() {
        mapper.findKeywordForItem(mock(BaseItem.class), new TiItem("123"));
    }
}