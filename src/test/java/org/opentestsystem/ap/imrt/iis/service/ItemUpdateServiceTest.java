package org.opentestsystem.ap.imrt.iis.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.gitlab4j.api.models.RepositoryFile;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.model.ItemRevisionImpl;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.util.ItemParser;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemUpdateServiceTest {

    private static final int itemId = 432;
    private static final long lockId = 98765;

    @Mock
    private ItemBankClient itemBankClient;

    @Mock
    private ProjectLockService projectLockService;

    @Mock
    private DomainManager domainManager;

    @Mock
    private ItemGitInformationRepository itemGitInformationRepository;

    @Mock
    private OperationalEventService operationalEventService;

    // class under test
    private ItemUpdateService itemUpdateService;

    @Before
    public void setup() {
        ItemParser itemParser = new ItemParser(new ObjectMapper());
        itemUpdateService = new ItemUpdateService(projectLockService, itemBankClient, itemParser,
            domainManager, itemGitInformationRepository, operationalEventService);
    }

    @Test(expected = RuntimeException.class)
    public void noLockProcessMessage() {
        when(projectLockService.lockProject(itemId)).thenReturn(Optional.empty());
        itemUpdateService.updateItem(itemId);
        verifyZeroInteractions(itemBankClient);
        verify(projectLockService, times(1)).lockProject(itemId);
        verify(projectLockService, times(0)).unlockProject(eq(itemId), any());
    }

    @Test
    public void noFileProcessMessage() {
        when(projectLockService.lockProject(itemId)).thenReturn(Optional.of(lockId));
        when(itemBankClient.getFile("item.json", itemId, "master")).thenReturn(Optional.empty());
        itemUpdateService.updateItem(itemId);
        verify(projectLockService, times(1)).lockProject(itemId);
        verify(projectLockService, times(1)).unlockProject(itemId, lockId);
        verify(itemBankClient, times(1)).getFile("item.json", itemId, "master");
        // verify no DB call
        verifyZeroInteractions(domainManager);
    }

    @Test
    public void shouldProcessMessage() throws IOException {
        ArgumentCaptor<ItemRevisionImpl> itemRevisionCaptor = ArgumentCaptor.forClass(ItemRevisionImpl.class);
        when(projectLockService.lockProject(itemId)).thenReturn(Optional.of(lockId));
        RepositoryFile file = new RepositoryFile();
        file.setContent(getJsonContent("json/good-item.json"));
        when(itemBankClient.getFile("item.json", itemId, "master")).thenReturn(Optional.of(file));
        itemUpdateService.updateItem(itemId);
        verify(projectLockService, times(1)).lockProject(itemId);
        verify(projectLockService, times(1)).unlockProject(itemId, lockId);
        verify(itemBankClient, times(1)).getFile("item.json", itemId, "master");
        verify(domainManager, times(1)).saveItemRevision(itemRevisionCaptor.capture());
        ItemRevisionImpl revision = itemRevisionCaptor.getValue();
        assertThat(revision).isNotNull();
        ItemGitInformation itemGit = revision.getItemGitInformation();
        assertThat(itemGit).isNotNull();
        ImrtItem imrtItem = revision.getImrtItem();
        assertThat(imrtItem).isNotNull();
        Item item = imrtItem.getItemJson();
        assertThat(item).isNotNull();
        assertThat(imrtItem.getKey()).isNull();
    }

    @Test
    public void exceptionCausesError() throws IOException {
        when(projectLockService.lockProject(itemId)).thenReturn(Optional.of(lockId));
        RuntimeException testEx = new RuntimeException("test");
        doThrow(testEx).when(domainManager).saveItemRevision(any());
        RepositoryFile file = new RepositoryFile();
        file.setContent(getJsonContent("json/good-item.json"));
        when(itemBankClient.getFile("item.json", itemId, "master")).thenReturn(Optional.of(file));
        itemUpdateService.updateItem(itemId);
        verify(projectLockService, times(1)).lockProject(itemId);
        verify(projectLockService, times(1)).unlockProject(itemId, lockId);
        verify(itemBankClient, times(1)).getFile("item.json", itemId, "master");
        verify(operationalEventService, times(1)).serviceError(any(), eq(testEx), any(), eq(itemId));
    }

    /**
     * Retrieve the json from a file and return it as a base64 encoded string
     *
     * @param filePath The path of the file, relative to src/test/resources
     * @return The base64 encoded version of the file's contents
     * @throws IOException If something goes wrong
     */
    private String getJsonContent(String filePath) throws IOException {
        URL url = getClass().getClassLoader().getResource(filePath);
        return (new String(Base64.getEncoder().encode(Files.readAllBytes(Paths.get(url.getPath()))), "UTF-8"));
    }

}
