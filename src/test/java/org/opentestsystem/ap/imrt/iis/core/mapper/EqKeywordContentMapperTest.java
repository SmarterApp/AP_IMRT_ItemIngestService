package org.opentestsystem.ap.imrt.iis.core.mapper;

import org.junit.Test;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.EqPart;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.KeywordContent;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EqSection.LEFT_LABEL;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EqSection.PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EqSection.RIGHT_LABEL;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EqSection.SPANISH_LEFT_LABEL;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EqSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EqSection.SPANISH_RIGHT_LABEL;

public class EqKeywordContentMapperTest {
    private EqKeywordContentMapper mapper = new EqKeywordContentMapper();

    @Test
    public void shouldHandleEqItems() {
        assertThat(mapper.isSupportedItem(new EqItem("123"))).isTrue();
    }

    @Test
    public void shouldConvertItemContent() {
        String englishContent = "    <p>English</p> text";
        String spanishContent = "Spanish     text ";

        EqPart englishPart = new EqPart();
        englishPart.setLeftLabel(" English Part Left        ");
        englishPart.setRightLabel(" English Right");

        EqPart spanishPart = new EqPart();
        spanishPart.setLeftLabel("<p> Spanish</p> left");
        spanishPart.setRightLabel("Spanish Right");

        EqItem eqItem = new EqItem("123");
        eqItem.getCore().getEn().setPrompt(englishContent);
        eqItem.getTranslations().getEsp().setPrompt(spanishContent);

        BaseItem baseItem = mock(BaseItem.class);

        Collection<KeywordContent> keywordContents = mapper.findKeywordForItem(baseItem, eqItem);

        assertThat(keywordContents).hasSize(2);

        for (KeywordContent content : keywordContents) {
            assertThat(content.getItem()).isEqualTo(baseItem);
            switch (content.getSection()) {
                case PROMPT:
                    assertThat(content.getContent()).isEqualTo("English text");
                    break;
                case SPANISH_PROMPT:
                    assertThat(content.getContent()).isEqualTo("Spanish text");
                    break;
                case RIGHT_LABEL:
                    assertThat(englishPart.getRightLabel()).isEqualTo("English Right");
                    break;
                case LEFT_LABEL:
                    assertThat(englishPart.getLeftLabel()).isEqualTo("English Part Left");
                    break;
                case SPANISH_RIGHT_LABEL:
                    assertThat(spanishPart.getRightLabel()).isEqualTo("Spanish Right");
                    break;
                case SPANISH_LEFT_LABEL:
                    assertThat(spanishPart.getLeftLabel()).isEqualTo("Spanish left");
                    break;
                default:
                    fail("Found invalid section " + content.getSection());
            }
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldHandleIfWrongTypeIsPassedIn() {
        mapper.findKeywordForItem(mock(BaseItem.class), new TiItem("123"));
    }
}