package org.opentestsystem.ap.imrt.iis.core.mapper;

import org.junit.Test;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.content.EbsrItemContent;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.KeywordContent;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.PART_A_OPTIONS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.PART_A_STEM;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.PART_B_OPTIONS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.PART_B_STEM;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.SPANISH_PART_A_OPTIONS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.SPANISH_PART_A_STEM;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.SPANISH_PART_B_OPTIONS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.SPANISH_PART_B_STEM;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.EbsrSection.SPANISH_PROMPT;

public class EbsrKeywordContentMapperTest {
    private EbsrKeywordContentMapper mapper = new EbsrKeywordContentMapper();

    @Test
    public void shouldHandleTutItems() {
        assertThat(mapper.isSupportedItem(new EbsrItem("123"))).isTrue();
    }

    @Test
    public void shouldConvertItemContent() {
        String englishContent = "  content  <p>English</p> text";
        String spanishContent = "Spanish  content   text ";

        EbsrItem ebsrItem = new EbsrItem("123");

        EbsrItemContent en = ebsrItem.getCore().getEn();
        EbsrItemContent esp = ebsrItem.getTranslations().getEsp();
        en.setPrompt(englishContent);
        esp.setPrompt(spanishContent);
        BaseItem baseItem = mock(BaseItem.class);

        en.setPartAPrompt("English A prompt");
        esp.setPartAPrompt(" Spanish A prompt  ");
        en.setPartBPrompt("English B prompt");
        esp.setPartBPrompt(" Spanish B prompt  ");

        ItemOption enOptionA = new ItemOption();
        enOptionA.setText(" Option A");

        ItemOption enOptionB = new ItemOption();
        enOptionB.setText(" Option B ");

        ItemOption espOptionA = new ItemOption();
        espOptionA.setText(" Spanish Option A");

        ItemOption espOptionB = new ItemOption();
        espOptionB.setText(" Spanish Option B ");

        en.getPartAOptions().add(enOptionA);
        en.getPartBOptions().add(enOptionB);
        esp.getPartAOptions().add(espOptionA);
        esp.getPartBOptions().add(espOptionB);

        Collection<KeywordContent> keywordContents = mapper.findKeywordForItem(baseItem, ebsrItem);

        assertThat(keywordContents).hasSize(10);

        for (KeywordContent content : keywordContents) {
            assertThat(content.getItem()).isEqualTo(baseItem);
            switch (content.getSection()) {
                case PROMPT:
                    assertThat(content.getContent()).isEqualTo("content English text");
                    break;
                case SPANISH_PROMPT:
                    assertThat(content.getContent()).isEqualTo("Spanish content text");
                    break;
                case PART_A_STEM:
                    assertThat(content.getContent()).isEqualTo("English A prompt");
                    break;
                case SPANISH_PART_A_STEM:
                    assertThat(content.getContent()).isEqualTo("Spanish A prompt");
                    break;
                case PART_B_STEM:
                    assertThat(content.getContent()).isEqualTo("English B prompt");
                    break;
                case SPANISH_PART_B_STEM:
                    assertThat(content.getContent()).isEqualTo("Spanish B prompt");
                    break;
                case PART_A_OPTIONS:
                    assertThat(content.getContent()).isEqualTo("Option A");
                    break;
                case PART_B_OPTIONS:
                    assertThat(content.getContent()).isEqualTo("Option B");
                    break;
                case SPANISH_PART_A_OPTIONS:
                    assertThat(content.getContent()).isEqualTo("Spanish Option A");
                    break;
                case SPANISH_PART_B_OPTIONS:
                    assertThat(content.getContent()).isEqualTo("Spanish Option B");
                    break;
                default:
                    fail("Found invalid section " + content.getSection());
            }
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldHandleIfWrongTypeIsPassedIn() {
        mapper.findKeywordForItem(mock(BaseItem.class), new TiItem("123"));
    }
}