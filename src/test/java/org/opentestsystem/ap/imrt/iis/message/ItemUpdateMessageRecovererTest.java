package org.opentestsystem.ap.imrt.iis.message;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.slf4j.Logger;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageBuilder;

import java.nio.charset.StandardCharsets;

import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class ItemUpdateMessageRecovererTest {
    private ItemUpdateMessageRecoverer itemUpdateMessageRecoverer;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Before
    public void setUp() {
        itemUpdateMessageRecoverer = new ItemUpdateMessageRecoverer(mockOperationalEventService);
    }

    @Test
    public void shouldLogError() {
        final byte[] mockPayload = "{ 'id' : 42 }".getBytes(StandardCharsets.UTF_8);
        final Message mockMessage = MessageBuilder
                .withBody(mockPayload)
                .build();
        final RuntimeException mockException = new RuntimeException("something");
        itemUpdateMessageRecoverer.recover(mockMessage, mockException);

        verify(mockOperationalEventService).serviceError(isA(Logger.class),
                isA(RuntimeException.class),
                eq("Unable to process update message: {}"),
                isA(Message.class));
    }
}