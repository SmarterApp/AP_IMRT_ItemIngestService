package org.opentestsystem.ap.imrt.iis.event;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.management.events.CommitItemEvent;
import org.opentestsystem.ap.common.management.events.CreateItemEvent;
import org.opentestsystem.ap.common.management.events.DeleteItemEvent;
import org.opentestsystem.ap.common.management.events.ItemEvent;
import org.opentestsystem.ap.common.management.events.PatchItemEvent;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.service.ItemWorkQueueService;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class TimsItemEventHandlerTest {

    @Mock
    private ItemWorkQueueService itemWorkQueueService;

    @Mock
    private OperationalEventService logger;

    @Mock
    private ItemBankUser user;

    @Captor
    private ArgumentCaptor<ItemUpdateEvent> itemUpdateCaptor;

    private TimsItemEventHandler handler;

    @Before
    public void setUp() {
        handler = new TimsItemEventHandler(itemWorkQueueService, logger);
    }

    @Test
    public void shouldHandleCommitEvent() {
        UUID commitId = UUID.randomUUID();
        ItemEvent itemEvent = new CommitItemEvent(user, commitId.toString(), null, "something else", "123");
        handler.onItemEvent(itemEvent);

        verify(itemWorkQueueService).sendItemUpdateMessage(itemUpdateCaptor.capture());

        ItemUpdateEvent event = itemUpdateCaptor.getValue();

        assertThat(event.getCommitId()).isEqualTo(commitId);
        assertThat(event.getItemId()).isEqualTo(123);
    }

    @Test
    public void shouldHandlePatchEvent() {
        UUID commitId = UUID.randomUUID();
        ItemEvent itemEvent = new PatchItemEvent(user, commitId.toString(), null, "something else", "123");
        handler.onItemEvent(itemEvent);

        verify(itemWorkQueueService).sendItemUpdateMessage(itemUpdateCaptor.capture());

        ItemUpdateEvent event = itemUpdateCaptor.getValue();

        assertThat(event.getCommitId()).isEqualTo(commitId);
        assertThat(event.getItemId()).isEqualTo(123);
    }

    @Test
    public void shouldCreateCommitEvent() {
        UUID commitId = UUID.randomUUID();
        ItemEvent itemEvent = new CreateItemEvent(user, commitId.toString(), "something else", "123");
        handler.onItemEvent(itemEvent);

        verify(itemWorkQueueService).sendItemUpdateMessage(itemUpdateCaptor.capture());

        ItemUpdateEvent event = itemUpdateCaptor.getValue();

        assertThat(event.getCommitId()).isEqualTo(commitId);
        assertThat(event.getItemId()).isEqualTo(123);
    }

    @Test
    public void shouldHandleDeleteEvent() {
        ItemEvent deleteEvent = new DeleteItemEvent(user, UUID.randomUUID().toString(), null, "delete", "123");
        handler.onItemEvent(deleteEvent);

        verify(itemWorkQueueService).sendItemDeleteMessage(123);
    }
}