package org.opentestsystem.ap.imrt.iis.repository;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.imrt.iis.BaseIntegrationTest;
import org.opentestsystem.ap.imrt.iis.model.ImrtItem;
import org.opentestsystem.ap.imrt.iis.model.ItemLog;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class ItemLogRepositoryTest extends BaseIntegrationTest {

    @Autowired
    private ItemLogRepository itemLogRepository;

    @Autowired
    ImrtItemRepository imrtItemRepository;

    private ImrtItem imrtItem = null;

    @Before
    public void createItem() {
        // create an item in the DB, for our foreign key constraint
        imrtItem = new TestImrtItemBuilder().build();
        imrtItem = imrtItemRepository.save(imrtItem);
    }

    @Test
    public void shouldCreateItemLog() {
        ItemLog log = new ItemLogBuilder()
                .withImrtItem(imrtItem)
                .withCommitHash("commit hash")
                .build();
        log = itemLogRepository.save(log);
        assertThat(log).isEqualToComparingFieldByFieldRecursively(itemLogRepository.findOne(log.getItemLogKey()));
    }

    @Test
    public void shouldUpdateItemGit() {
        ItemLog log = new ItemLogBuilder()
                .withImrtItem(imrtItem)
                .withCommitHash("commit hash")
                .build();
        log = itemLogRepository.save(log);
        Instant originalUpdatedAt = log.getUpdatedAt();

        ItemLog updated = itemLogRepository.findOne(log.getItemLogKey());
        updated.setCommitDate(Instant.now());
        itemLogRepository.save(updated);
        // There should still be only one row in the DB after the update
        assertThat(itemLogRepository.findAll().size()).isEqualTo(1);
        // If we do a read, we should get back a new object with the updated fields
        // Updated at will be later
        ItemLog readLog = itemLogRepository.findOne(log.getItemLogKey());
        assertThat(originalUpdatedAt).isBefore(readLog.getUpdatedAt());
        assertThat(updated.getCommitDate()).isEqualTo(readLog.getCommitDate());
    }


    @Test
    public void shouldDeleteStandardId() {
        ItemLog log = new ItemLogBuilder()
                .withImrtItem(imrtItem)
                .withCommitHash("commit hash")
                .build();
        log = itemLogRepository.save(log);
        // There should be one itemLog in the DB after the save
        assertThat(itemLogRepository.findAll().size()).isEqualTo(1);
        itemLogRepository.delete(log.getItemLogKey());
        // There should be no itemLogs in the DB after the delete
        assertThat(itemLogRepository.findAll().size()).isEqualTo(0);

    }
}
