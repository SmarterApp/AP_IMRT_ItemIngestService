package org.opentestsystem.ap.imrt.iis.repository;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.imrt.iis.BaseIntegrationTest;
import org.opentestsystem.ap.imrt.iis.model.ImrtItem;
import org.opentestsystem.ap.imrt.iis.model.StandardId;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class StandardIdRespositoryTest extends BaseIntegrationTest {

    @Autowired
    private StandardIdRepository standardIdRepository;

    @Autowired
    ImrtItemRepository imrtItemRepository;

    private ImrtItem imrtItem = null;

    @Before
    public void createItem() {
        // create an item in the DB, for our foreign key constraint
        imrtItem = new TestImrtItemBuilder().build();
        imrtItem = imrtItemRepository.save(imrtItem);
    }

    @Test
    public void shouldCreateStandardId() {
        StandardId id = new TestStandardIdBuilder()
                .withImrtItem(imrtItem)
                .withType(3)
                .build();
        id = standardIdRepository.save(id);
        assertThat(id).isEqualToComparingFieldByFieldRecursively(standardIdRepository.findOne(id.getStandardIdKey()));
    }

    @Test
    public void shouldUpdateItemGit() {
        StandardId id = new TestStandardIdBuilder()
                .withImrtItem(imrtItem)
                .withType(3)
                .build();
        id = standardIdRepository.save(id);
        Instant originalUpdatedAt = id.getUpdatedAt();

        StandardId updated = standardIdRepository.findOne(id.getStandardIdKey());
        updated.setEmphasis("new emphasis");
        standardIdRepository.save(updated);
        // There should still be only one row in the DB after the update
        assertThat(standardIdRepository.findAll().size()).isEqualTo(1);
        // If we do a read, we should get back a new object with the updated fields
        // Updated at will be later
        StandardId readId = standardIdRepository.findOne(id.getStandardIdKey());
        assertThat(originalUpdatedAt).isBefore(readId.getUpdatedAt());
        assertThat(updated.getEmphasis()).isEqualTo(readId.getEmphasis());
        assertThat(id.getCommonCoreStandard()).isEqualTo(readId.getCommonCoreStandard());
    }


    @Test
    public void shouldDeleteStandardId() {
        StandardId id = new TestStandardIdBuilder()
                .withImrtItem(imrtItem)
                .withType(3)
                .build();
        id = standardIdRepository.save(id);
        // There should be one standardId in the DB after the save
        assertThat(standardIdRepository.findAll().size()).isEqualTo(1);
        standardIdRepository.delete(id.getStandardIdKey());
        // There should be no standardId in the DB after the delete
        assertThat(standardIdRepository.findAll().size()).isEqualTo(0);

    }
}
