package org.opentestsystem.ap.imrt.iis.controller;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iis.model.JobExecutionResponse;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemMigrationService;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.opentestsystem.ap.imrt.iis.service.SpringBatchJobManagementService;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobInstance;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemIngestJobControllerTest {
    @Mock
    private JobLauncher mockJobLauncher;

    @Mock
    private Job mockItemSynchronizationJob;

    @Mock
    private Job mockItemMigrationJob;

    @Mock
    private JobInstance mockJobInstance;

    @Mock
    private JobExecution mockJobExecution;

    @Mock
    private ItemSynchronizationService mockItemSynchronizationService;

    @Mock
    private ItemMigrationService mockItemMigrationService;

    @Mock
    private SpringBatchJobManagementService mockSpringBatchJobManagementService;
    
    @Mock
    private ItemDeleteNotificationHandler itemDeleteNotificationHandler;

    private ItemIngestJobController itemIngestJobController;

    @Before
    public void setup() {
        itemIngestJobController = new ItemIngestJobController(mockJobLauncher,
                mockItemSynchronizationJob,
                mockItemMigrationJob,
                mockItemSynchronizationService,
                mockSpringBatchJobManagementService,
                mockItemMigrationService, itemDeleteNotificationHandler);
    }

    @Test
    public void shouldReturnAJobExecutionResponse() throws Exception {
        when(mockJobInstance.getJobName()).thenReturn("unit-test-job-name");
        when(mockJobExecution.getStatus()).thenReturn(BatchStatus.STARTING);
        when(mockJobExecution.getId()).thenReturn(42L);
        when(mockJobExecution.getJobInstance()).thenReturn(mockJobInstance);
        when(mockJobLauncher.run(eq(mockItemMigrationJob), any(JobParameters.class))).thenReturn(mockJobExecution);

        final ResponseEntity<JobExecutionResponse> result = itemIngestJobController.migrate();

        verify(mockJobLauncher).run(eq(mockItemMigrationJob), any(JobParameters.class));

        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

        final JobExecutionResponse response = result.getBody();
        assertThat(response.getJobExecutionId()).isEqualTo(mockJobExecution.getId());
        assertThat(response.getName()).isEqualTo(mockJobInstance.getJobName());
        assertThat(response.getStatus()).isEqualTo(mockJobExecution.getStatus().toString());
    }

    @Test
    public void shouldSyncSingleItem() {
        ResponseEntity<String> response = itemIngestJobController.synchronizeItem(1, false);

        verify(mockItemSynchronizationService).synchronizeItem(1, false);

        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(response.getBody()).contains("1");
    }

    @Test
    public void shouldAbandonARunningJob() {
        when(mockJobInstance.getId()).thenReturn(13L);
        when(mockJobInstance.getJobName()).thenReturn("unit-test-job-name");
        when(mockJobExecution.getId()).thenReturn(42L);
        final JobExecutionResponse successfulResponse = new JobExecutionResponse(mockJobExecution.getId(),
                mockJobInstance.getId(),
                "controller-test-job-instance",
                "ABANDONED",
                String.format("Job Execution %d for Job %s abandoned successfully",
                        mockJobExecution.getId(),
                        mockJobInstance.getJobName()));

        when(mockSpringBatchJobManagementService.abandon(mockJobInstance.getId()))
                .thenReturn(successfulResponse);

        final ResponseEntity<JobExecutionResponse> result = itemIngestJobController.abandon(mockJobInstance.getId());

        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
    }
}
