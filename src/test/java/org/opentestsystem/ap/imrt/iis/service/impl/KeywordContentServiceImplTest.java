package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.common.imrt.repository.KeywordContentRepository;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.service.KeywordContentService;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class KeywordContentServiceImplTest {

    @Mock
    private KeywordContentRepository mockKeywordContentRepository;

    @Mock
    private ItemKeywordContentMapper mockItemKeywordContentMapper;

    @Captor
    private ArgumentCaptor<Iterable<KeywordContent>> keywordCaptor;

    private KeywordContentService keywordContentService;

    @Before
    public void setUp() {
        keywordContentService = new KeywordContentServiceImpl(mockKeywordContentRepository, Collections.singleton(mockItemKeywordContentMapper));
    }

    @Test
    public void shouldDeleteEvenIfNoNewKeywords() {
        SaItem saItem = new SaItem("1");
        BaseItem baseItem = new ImrtItem();
        baseItem.setItemJson(saItem);
        ItemRevision revision = ItemRevision.builder().withBaseItem(baseItem).build();

        keywordContentService.saveKeywords(revision);

        verify(mockKeywordContentRepository).deleteAllByItem(baseItem);
        verifyNoMoreInteractions(mockKeywordContentRepository);
    }

    @Test
    public void shouldSaveKeywords() {
        SaItem saItem = new SaItem("1");
        BaseItem baseItem = new ImrtItem();
        baseItem.setItemJson(saItem);
        ItemRevision revision = ItemRevision.builder().withBaseItem(baseItem).build();

        KeywordContent content = new KeywordContent(baseItem, "section", "content");

        when(mockItemKeywordContentMapper.isSupportedItem(saItem)).thenReturn(true);
        when(mockItemKeywordContentMapper.findKeywordForItem(baseItem, saItem)).thenReturn(Collections.singleton(content));

        keywordContentService.saveKeywords(revision);

        verify(mockKeywordContentRepository).deleteAllByItem(baseItem);
        verify(mockKeywordContentRepository).save(keywordCaptor.capture());

        assertThat(keywordCaptor.getValue()).hasSize(1);
        assertThat(keywordCaptor.getValue().iterator().next()).isEqualTo(content);
    }
}