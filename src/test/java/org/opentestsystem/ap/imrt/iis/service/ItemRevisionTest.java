package org.opentestsystem.ap.imrt.iis.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.AssessmentItemCore;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.StimItemCore;
import org.opentestsystem.ap.imrt.iis.model.ImrtItem;
import org.opentestsystem.ap.imrt.iis.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.iis.model.ItemRevisionImpl;
import org.opentestsystem.ap.imrt.iis.model.StandardId;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class ItemRevisionTest {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private static final int gitId = 345;
    private static final Instant testTime = Instant.now();
    private static final String gitPath = "gitPath/test";
    private static final String commitHash = "123456";
    private static final String author = "author";

    @Test
    public void itemRevisionFromAssessmentItemNoPrevious() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore)item.getCore()).getMetadata();

        ItemRevisionImpl revision = new ItemRevisionImpl(item, gitId, gitPath, commitHash, testTime, author, null);
        validateRevisionObjects(revision);
        ItemGitInformation itemGit = revision.getItemGitInformation();
        validateItemGitInfo(itemGit);
        ImrtItem imrtItem = revision.getImrtItem();

        // Since no previous entry, key will be null
        assertThat(imrtItem.getKey()).isNull();
        assertThat(imrtItem.getItemCreatedAt()).isEqualTo(testTime);
        assertThat(imrtItem.getItemCreatedBy()).isEqualTo(author);

        validateImrtItem(item, metadata, imrtItem);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void itemRevisionFromAssessmentItemWithPrevious() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore)item.getCore()).getMetadata();
        ItemGitInformation existing = new ItemGitInformation();
        ImrtItem existingItem = new ImrtItem();
        existingItem.setKey(777);
        existingItem.setItemCreatedBy("old author");
        existingItem.setItemCreatedAt(Instant.ofEpochSecond(33));
        existing.setItem(existingItem);

        ItemRevisionImpl revision = new ItemRevisionImpl(item, gitId, gitPath, commitHash, testTime, author, existing);
        validateRevisionObjects(revision);
        ItemGitInformation itemGit = revision.getItemGitInformation();
        validateItemGitInfo(itemGit);
        ImrtItem imrtItem = revision.getImrtItem();

        // Since previous entry, some values from the existing imrt item
        assertThat(imrtItem.getKey()).isEqualTo(existingItem.getKey());
        assertThat(imrtItem.getItemCreatedAt()).isEqualTo(existingItem.getItemCreatedAt());
        assertThat(imrtItem.getItemCreatedBy()).isEqualTo(existingItem.getItemCreatedBy());

        validateImrtItem(item, metadata, imrtItem);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void itemRevisionFromStim() throws IOException {
        Item item = getItemFromJsonFile("json/stim.json");
        ItemMetadata metadata = ((StimItemCore)item.getCore()).getMetadata();

        ItemRevisionImpl revision = new ItemRevisionImpl(item, gitId, gitPath, commitHash, testTime, author, null);
        validateRevisionObjects(revision);
        ItemGitInformation itemGit = revision.getItemGitInformation();
        validateItemGitInfo(itemGit);
        ImrtItem imrtItem = revision.getImrtItem();

        assertThat(imrtItem.getKey()).isNull();
        assertThat(imrtItem.getItemCreatedAt()).isEqualTo(testTime);
        assertThat(imrtItem.getItemCreatedBy()).isEqualTo(author);

        validateImrtItem(item, metadata, imrtItem);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void itemRevisionFromTutorial() throws IOException {
        Item item = getItemFromJsonFile("json/tutorial.json");

        ItemRevisionImpl revision = new ItemRevisionImpl(item, gitId, gitPath, commitHash, testTime, author, null);
        validateRevisionObjects(revision);
        ItemGitInformation itemGit = revision.getItemGitInformation();
        validateItemGitInfo(itemGit);
        ImrtItem imrtItem = revision.getImrtItem();

        assertThat(imrtItem.getKey()).isNull();
        assertThat(imrtItem.getItemCreatedAt()).isEqualTo(testTime);
        assertThat(imrtItem.getItemCreatedBy()).isEqualTo(author);

        validateImrtItem(item, null, imrtItem);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void itemRevisionFromAssessmentItemWithLinkedStim() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-all-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();

        ItemRevisionImpl revision = new ItemRevisionImpl(item, gitId, gitPath, commitHash, testTime, author, null);
        validateRevisionObjects(revision);
        ItemGitInformation itemGit = revision.getItemGitInformation();
        validateItemGitInfo(itemGit);
        ImrtItem imrtItem = revision.getImrtItem();

        // Since no previous entry, key will be null
        assertThat(imrtItem.getKey()).isNull();
        assertThat(imrtItem.getItemCreatedAt()).isEqualTo(testTime);
        assertThat(imrtItem.getItemCreatedBy()).isEqualTo(author);

        validateImrtItem(item, metadata, imrtItem);
        assertThat(revision.getLinkedStimulusId()).isPresent();
        assertThat(revision.getLinkedStimulusId().get()).isEqualTo("99");
    }

    @Test
    public void itemRevisionFromElaNoStandardId() {

    }

    @Test
    public void itemRevisionFromElaClaimOnlyStandardId() {

    }

    @Test
    public void itemRevisionFromElaTargetOnlyStandardId() {

    }

    @Test
    public void itemRevisionFromElaDomainOnlyStandardId() {

    }

    @Test
    public void itemRevisionFromElaCoreOnlyStandardId() {

    }

    private void validateStandardId(StandardId id, int expectedType, String expectedClaim, String expectedDomain,
                                    String expectedTarget, String expectedEmphasis, String expectedCommonCore) {
        assertThat(id.getStandardIdKey().getType()).isEqualTo(expectedType);
        assertThat(id.getClaim()).isEqualTo(expectedClaim);
        assertThat(id.getContentDomain()).isEqualTo(expectedDomain);
        assertThat(id.getTarget()).isEqualTo(expectedTarget);
        assertThat(id.getEmphasis()).isEqualTo(expectedEmphasis);
        assertThat(id.getCommonCoreStandard()).isEqualTo(expectedCommonCore);
        assertThat(id.getUpdatedBy()).isEqualTo(author);
    }

    private void validateRevisionObjects(ItemRevisionImpl revision) {
        assertThat(revision).isNotNull();
        ImrtItem imrtItem = revision.getImrtItem();
        assertThat(imrtItem).isNotNull();
        ItemGitInformation itemGit = revision.getItemGitInformation();
        assertThat(itemGit).isNotNull();
        assertThat(itemGit.getItem()).isEqualTo(imrtItem);
    }

    private void validateItemGitInfo(ItemGitInformation itemGit) {
        assertThat(itemGit.getProjectId()).isEqualTo(gitId);
        assertThat(itemGit.getProjectPath()).isEqualTo(gitPath);
        assertThat(itemGit.getCurrentCommitHash()).isEqualTo(commitHash);
        assertThat(itemGit.getUpdatedBy()).isEqualTo(author);
    }

    private void validateImrtItem(Item item, ItemMetadata metadata, ImrtItem imrtItem) {
        assertThat(imrtItem.getId()).isEqualTo(item.getId());
        assertThat(imrtItem.getWorkflowStatus()).isEqualTo(item.getWorkflow().getWorkflowStatusCode());
        assertThat(imrtItem.getItemType()).isEqualTo(item.getType());
        assertThat(imrtItem.getUpdatedBy()).isEqualTo(author);

        if (metadata != null) {
            assertThat(imrtItem.getSubject()).isEqualTo(metadata.getSubject());
            assertThat(imrtItem.getGrade()).isEqualTo(metadata.getGrade());
            assertThat(imrtItem.getDepthOfKnowledge()).isEqualTo(metadata.getDepthOfKnowledge());
        } else {
            assertThat(imrtItem.getSubject()).isBlank();
            assertThat(imrtItem.getGrade()).isBlank();
            assertThat(imrtItem.getDepthOfKnowledge()).isBlank();
        }
    }

    /**
     * Parse and Item from a json file
     * @param filePath  The path of the file, relative to src/test/resources
     * @return  The parsed item
     * @throws IOException  If something goes wrong
     */
    private Item getItemFromJsonFile(String filePath) throws IOException {
        URL url = getClass().getClassLoader().getResource(filePath);
        return objectMapper.readValue(Files.readAllBytes(Paths.get(url.getPath())), AbstractItem.class);
    }

}
