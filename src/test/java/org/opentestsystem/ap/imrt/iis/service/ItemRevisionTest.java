package org.opentestsystem.ap.imrt.iis.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.AbstractAssessmentItemCore;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.AssessmentItemCore;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.StimItemCore;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.ItemLog;
import org.opentestsystem.ap.imrt.common.model.StandardId;
import org.opentestsystem.ap.imrt.iis.builder.TestItemBankItemRevisionBuilder;
import org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.model.ItemRevisionImpl;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class ItemRevisionTest {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private static final int itemBankId = 345;
    private static final Instant testTime = Instant.now();
    private static final String gitPath = "gitPath/test";
    private static final String commitHash = "123456";
    private static final Instant commitDate = Instant.now();
    private static final String author = "author";

    @Test
    public void fromAssessmentItemNoPrevious() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore)item.getCore()).getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromAssessmentItemWithPrevious() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore)item.getCore()).getMetadata();
        ItemGitInformation existing = new ItemGitInformation();
        ImrtItem existingItem = new ImrtItem();
        existingItem.setKey(777);
        existingItem.setItemCreatedBy("old author");
        existingItem.setItemCreatedAt(Instant.ofEpochSecond(33));
        existing.setCurrentCommitDate(Instant.ofEpochSecond(55));
        existing.setItem(existingItem);

        ItemRevision revision = runTestCore(item, metadata, existing);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromStim() throws IOException {
        Item item = getItemFromJsonFile("json/stim.json");
        ItemMetadata metadata = ((StimItemCore)item.getCore()).getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromTutorial() throws IOException {
        Item item = getItemFromJsonFile("json/tutorial.json");

        ItemRevision revision = runTestCore(item, null, null);

        assertThat(revision.getStandardIdList()).isEmpty();
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromAssessmentItemWithLinkedStim() throws IOException {
        Item item = getItemFromJsonFile("json/math-all-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        assertThat(revision.getLinkedStimulusId()).isPresent();
        if (revision.getLinkedStimulusId().isPresent()) {
            assertThat(revision.getLinkedStimulusId().get()).isEqualTo("99");
        }
    }

    @Test
    public void fromElaNoStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        // No standardIds should be present
        assertThat(revision.getStandardIdList()).isEmpty();

    }

    @Test
    public void fromElaClaimOnlyStandardId() throws IOException {
            Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
            ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
            metadata.setPrimaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        // standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 1, "Claim", "", "", "", "" );
    }

    @Test
    public void fromElaTargetOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setPrimaryAssessmentTarget("Target");

        ItemRevision revision = runTestCore(item, metadata, null);

        // standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 1, "", "", "Target", "", "" );
    }

    @Test
    public void fromElaDomainOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setContentDomain("Domain");

        ItemRevision revision = runTestCore(item, metadata, null);

        // standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 1, "", "Domain", "", "", "" );
    }

    @Test
    public void fromElaCoreOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setPrimaryCommonCoreStandard("Standard");

        ItemRevision revision = runTestCore(item, metadata, null);

        // standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 1, "", "", "", "", "Standard" );
    }

    @Test
    public void elaFullStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-with-standard-id.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        // standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 1, metadata.getPrimaryClaim(), metadata.getContentDomain(),
                metadata.getPrimaryAssessmentTarget(), "", metadata.getPrimaryCommonCoreStandard());
    }

    @Test
    public void mathFullStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-all-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        // All 4 standardIds should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(4);
        validateStandardId(revision.getStandardIdList().get(0), 1, metadata.getPrimaryClaim(), metadata.getPrimaryContentDomain(),
                metadata.getPrimaryAssessmentTarget(), "", metadata.getPrimaryCommonCoreStandard());
        validateStandardId(revision.getStandardIdList().get(1), 2, metadata.getSecondaryClaim(), metadata.getSecondaryContentDomain(),
                metadata.getSecondaryAssessmentTarget(), "", metadata.getSecondaryCommonCoreStandard());
        validateStandardId(revision.getStandardIdList().get(2), 3, metadata.getTertiaryClaim(), metadata.getTertiaryContentDomain(),
                metadata.getTertiaryAssessmentTarget(), "", metadata.getTertiaryCommonCoreStandard());
        validateStandardId(revision.getStandardIdList().get(3), 4, metadata.getQuaternaryClaim(), metadata.getQuaternaryContentDomain(),
                metadata.getQuaternaryAssessmentTarget(), "", metadata.getQuaternaryCommonCoreStandard());
    }

    @Test
    public void mathPrimaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setPrimaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        // Only primary standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 1, "Claim", "",
                "", "", "");
    }

    @Test
    public void mathSecondaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setSecondaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        // Only primary standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 2, "Claim", "",
                "", "", "");
    }

    @Test
    public void mathTertiaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setTertiaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        // Only primary standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 3, "Claim", "",
                "", "", "");
    }

    @Test
    public void mathQuaternaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setQuaternaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        // Only primary standardId should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(1);
        validateStandardId(revision.getStandardIdList().get(0), 4, "Claim", "",
                "", "", "");
    }

    @Test
    public void mathAllDomainOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setPrimaryContentDomain("Domain");
        metadata.setSecondaryContentDomain("Domain");
        metadata.setTertiaryContentDomain("Domain");
        metadata.setQuaternaryContentDomain("Domain");

        ItemRevision revision = runTestCore(item, metadata, null);

        // All 4 standardIds should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(4);
        for (int index = 0; index < 4; index++) {
            validateStandardId(revision.getStandardIdList().get(index), index+1, "", "Domain",
                    "", "", "");
        }
    }

    @Test
    public void mathAllTargetOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setPrimaryAssessmentTarget("Target");
        metadata.setSecondaryAssessmentTarget("Target");
        metadata.setTertiaryAssessmentTarget("Target");
        metadata.setQuaternaryAssessmentTarget("Target");

        ItemRevision revision = runTestCore(item, metadata, null);

        // All 4 standardIds should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(4);
        for (int index = 0; index < 4; index++) {
            validateStandardId(revision.getStandardIdList().get(index), index+1, "", "",
                    "Target", "", "");
        }
    }

    @Test
    public void mathAllCoreOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = ((AssessmentItemCore) item.getCore()).getMetadata();
        metadata.setPrimaryCommonCoreStandard("ccs");
        metadata.setSecondaryCommonCoreStandard("ccs");
        metadata.setTertiaryCommonCoreStandard("ccs");
        metadata.setQuaternaryCommonCoreStandard("ccs");

        ItemRevision revision = runTestCore(item, metadata, null);

        // All 4 standardIds should be present
        assertThat(revision.getStandardIdList()).size().isEqualTo(4);
        for (int index = 0; index < 4; index++) {
            validateStandardId(revision.getStandardIdList().get(index), index+1, "", "",
                    "", "", "ccs");
        }
    }

    /**
     * Core test method containing common steps for ItemRevision tests. Creates the ItemRevision
     * test object using the supplied parameters, and does basic validation of the result.
     * @param item  item to use in testing
     * @param metadata  metadata to use in testing
     * @param existing  existing ItemGitInformation to use in testing. May be null
     * @return  ItemRevision object generated by the class under test
     */
    private ItemRevision runTestCore(Item item, ItemMetadata metadata, ItemGitInformation existing) {
        ItemBankItemRevision itemBankItemRevision = new TestItemBankItemRevisionBuilder()
                .withItemBankId(itemBankId)
                .withRevisionId(commitHash)
                .withRevisionDate(commitDate)
                .withAuthor(author)
                .withItem(item)
                .withItemBankPath(gitPath)
                .build();
        ItemRevisionImpl revision = new ItemRevisionImpl(itemBankItemRevision, existing);
        validateRevisionObjects(revision);
        validateItemGitInfo(revision.getItemGitInformation());
        BaseItem imrtItem = revision.getItem();

        // If no previous entry, key will be null
        if (null == existing) {
            assertThat(imrtItem.getKey()).isNull();
            assertThat(imrtItem.getItemCreatedAt()).isEqualTo(testTime);
            assertThat(imrtItem.getItemCreatedBy()).isEqualTo(author);
            assertThat((imrtItem.getWorkflowStatusSetAt())).isEqualTo(commitDate);
        } else {
            // Since previous entry, some values from the existing imrt item
            assertThat(imrtItem.getKey()).isEqualTo(existing.getItem().getKey());
            assertThat(imrtItem.getItemCreatedAt()).isEqualTo(existing.getItem().getItemCreatedAt());
            assertThat(imrtItem.getItemCreatedBy()).isEqualTo(existing.getItem().getItemCreatedBy());
            assertThat((imrtItem.getWorkflowStatusSetAt())).isEqualTo(existing.getItem().getWorkflowStatusSetAt());
        }
        validateImrtItem(item, metadata, imrtItem);
        validateItemLog(revision.getItemLog(), imrtItem);

        return revision;

    }

    /**
     * Validate a standardId object
     * @param id the object to validate
     * @param expectedType the expectedType
     * @param expectedClaim the expectedClaim
     * @param expectedDomain the expectedDomain
     * @param expectedTarget the expectedTarget
     * @param expectedEmphasis the expectedEmphasis
     * @param expectedCommonCore the expectedCommonCore
     */
    private void validateStandardId(StandardId id, int expectedType, String expectedClaim, String expectedDomain,
                                    String expectedTarget, String expectedEmphasis, String expectedCommonCore) {
        assertThat(id.getStandardIdKey().getType()).isEqualTo(expectedType);
        assertThat(id.getClaim()).isEqualTo(expectedClaim);
        assertThat(id.getContentDomain()).isEqualTo(expectedDomain);
        assertThat(id.getTarget()).isEqualTo(expectedTarget);
        assertThat(id.getEmphasis()).isEqualTo(expectedEmphasis);
        assertThat(id.getCommonCoreStandard()).isEqualTo(expectedCommonCore);
        assertThat(id.getUpdatedBy()).isEqualTo(author);
    }

    /**
     * Validate an ItemRevision object
     * @param revision the object to validate
     */
    private void validateRevisionObjects(ItemRevision revision) {
        assertThat(revision).isNotNull();
        BaseItem imrtItem = revision.getItem();
        assertThat(imrtItem).isNotNull();
        ItemGitInformation itemGit = revision.getItemGitInformation();
        assertThat(itemGit).isNotNull();
        assertThat(itemGit.getItem()).isEqualTo(imrtItem);
    }

    /**
     * Validate an ItemGitInfo object
     * @param itemGit the object to validate
     */
    private void validateItemGitInfo(ItemGitInformation itemGit) {
        assertThat(itemGit.getProjectId()).isEqualTo(itemBankId);
        assertThat(itemGit.getProjectPath()).isEqualTo(gitPath);
        assertThat(itemGit.getCurrentCommitHash()).isEqualTo(commitHash);
        assertThat(itemGit.getCurrentCommitDate()).isEqualTo(commitDate);
        assertThat(itemGit.getUpdatedBy()).isEqualTo(author);
    }

    /**
     * Validate an ImrtItem object
     * @param item the expected item
     * @param metadata the expected metadata
     * @param imrtItem the object to validate
     */
    private void validateImrtItem(Item item, ItemMetadata metadata, BaseItem imrtItem) {
        assertThat(imrtItem.getId()).isEqualTo(item.getId());
        assertThat(imrtItem.getWorkflowStatus()).isEqualTo(item.getWorkflow().getWorkflowStatusCode());
        assertThat(imrtItem.getItemType()).isEqualTo(item.getType());
        assertThat(imrtItem.getUpdatedBy()).isEqualTo(author);

        if(item.getCore() instanceof AbstractAssessmentItemCore) {
            assertThat(imrtItem.getAssociatedStimulusId()).isEqualTo(((AbstractAssessmentItemCore)item.getCore()).getStimulusId());
        }

        if (metadata != null) {
            assertThat(imrtItem.getSubject()).isEqualTo(metadata.getSubject());
            assertThat(imrtItem.getGrade()).isEqualTo(metadata.getGrade());
            assertThat(imrtItem.getDepthOfKnowledge()).isEqualTo(metadata.getDepthOfKnowledge());
        } else {
            assertThat(imrtItem.getSubject()).isBlank();
            assertThat(imrtItem.getGrade()).isBlank();
            assertThat(imrtItem.getDepthOfKnowledge()).isBlank();
        }
    }

    /**
     * Validate an itemLog object
     * @param itemLog the object to validate
     * @param item the expected ImrtItem
     */
    private void validateItemLog(ItemLog itemLog, BaseItem item) {
        assertThat(itemLog.getItemLogKey().getItem()).isEqualTo(item);
        assertThat(itemLog.getItemLogKey().getCommitHash()).isEqualTo(commitHash);
        assertThat(itemLog.getCommitDate()).isEqualTo(commitDate);
        assertThat(itemLog.getUpdatedBy()).isEqualTo(author);
    }

    /**
     * Parse and Item from a json file
     * @param filePath  The path of the file, relative to src/test/resources
     * @return  The parsed item
     * @throws IOException  If something goes wrong
     */
    private Item getItemFromJsonFile(String filePath) throws IOException {
        URL url = getClass().getClassLoader().getResource(filePath);
        return objectMapper.readValue(Files.readAllBytes(Paths.get(url.getPath())), AbstractItem.class);
    }
}
