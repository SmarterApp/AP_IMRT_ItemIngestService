package org.opentestsystem.ap.imrt.iis.service.impl;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.model.Stimulus;
import org.opentestsystem.ap.common.imrt.repository.AttachmentRepository;
import org.opentestsystem.ap.common.imrt.repository.ContentUpdateNeedRepository;
import org.opentestsystem.ap.common.imrt.repository.ImrtItemRepository;
import org.opentestsystem.ap.common.imrt.repository.ItemAssignmentRepository;
import org.opentestsystem.ap.common.imrt.repository.StimulusRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.service.KeywordContentService;
import org.opentestsystem.ap.imrt.iis.service.TestAdministrationService;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SuppressFBWarnings("RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT")
// Required because findbugs is throwing errors on some of the verify statements
public class ItemRevisionServiceImplTest {
    private static final Integer stimulusId = 123;

    @Mock
    private ImrtItemRepository mockImrtItemRepository;

    @Mock
    private OperationalEventService operationalEventService;

    @Mock
    private ImrtItem imrtItem;

    @Mock
    private ItemRevision revision;

    @Mock
    private StimulusRepository mockStimulusRepository;

    @Mock
    private KeywordContentService mockKeywordContentService;

    @Mock
    private TestAdministrationService mockTestAdministrationService;

    @Mock
    private AttachmentRepository attachmentRepository;

    @Mock
    private ContentUpdateNeedRepository contentUpdateNeedRepository;

    @Mock
    private ItemAssignmentRepository itemAssignmentRepository;

    // Class under test
    private ItemRevisionServiceImpl itemRevisionWriter;

    @Before
    public void setupMocks() {
        itemRevisionWriter = new ItemRevisionServiceImpl(
                mockImrtItemRepository,
                operationalEventService,
                mockStimulusRepository,
                mockKeywordContentService,
                mockTestAdministrationService,
                attachmentRepository,
                contentUpdateNeedRepository,
                itemAssignmentRepository);
    }

    @Test
    public void noStim() {
        setupMocksForImrtItem();
        when(revision.getLinkedStimulusId()).thenReturn(Optional.empty());
        when(revision.isExistingItem()).thenReturn(true);

        itemRevisionWriter.save(revision);

        verify(mockImrtItemRepository).save(imrtItem);
        verify(revision).getLinkedStimulusId();
        verify(mockImrtItemRepository, never()).findById(any());
    }

    @Test
    public void stimNotFound() {
        setupMocksForImrtItem();
        when(revision.getLinkedStimulusId()).thenReturn(Optional.of(stimulusId));
        when(mockStimulusRepository.findById(stimulusId)).thenReturn(null);

        itemRevisionWriter.save(revision);

        verify(mockImrtItemRepository).save(imrtItem);
        verify(revision).getLinkedStimulusId();
        verify(mockStimulusRepository).findById(stimulusId);
    }

    @Test
    public void stimFound() {
        setupMocksForImrtItem();
        Stimulus stimItem = new Stimulus();

        when(revision.getLinkedStimulusId()).thenReturn(Optional.of(stimulusId));
        when(mockStimulusRepository.findById(stimulusId)).thenReturn(stimItem);
        when(revision.isExistingItem()).thenReturn(true);

        itemRevisionWriter.save(revision);

        verify(mockImrtItemRepository).save(imrtItem);
        verify(revision).getLinkedStimulusId();
        verify(mockStimulusRepository).findById(stimulusId);
    }

    @Test
    public void shouldSaveStimulusNoAssociatedImrtItems() {
        Stimulus stimulus = new Stimulus();
        stimulus.setId(stimulusId);
        stimulus.setKey(1);

        when(revision.getItem()).thenReturn(stimulus);
        when(revision.getLinkedStimulusId()).thenReturn(Optional.of(stimulusId));

        when(revision.getLinkedStimulusId()).thenReturn(Optional.empty());

        itemRevisionWriter.save(revision);

        verify(mockStimulusRepository).save(stimulus);
        verifyZeroInteractions(mockImrtItemRepository);
    }

    @Test
    public void shouldSaveStimulusWithAssociatedImrtItems() {
        Stimulus stimulus = new Stimulus();
        stimulus.setId(stimulusId);
        ImrtItem item1 = new ImrtItem();
        item1.setUpdatedBy("me");
        ImrtItem item2 = new ImrtItem();
        item2.setUpdatedBy("you");

        when(revision.getItem()).thenReturn(stimulus);

        when(revision.getLinkedStimulusId()).thenReturn(Optional.empty());

        when(mockImrtItemRepository.findAllByAssociatedStimulusId(stimulusId)).thenReturn(Lists.newArrayList(item1, item2));

        itemRevisionWriter.save(revision);

        ArgumentCaptor<Stimulus> stimulusArgumentCaptor = ArgumentCaptor.forClass(Stimulus.class);

        verify(mockStimulusRepository).save(stimulusArgumentCaptor.capture());
        verify(mockImrtItemRepository).findAllByAssociatedStimulusId(stimulusId);

        Stimulus savedStimulus = stimulusArgumentCaptor.getValue();
        assertThat(savedStimulus.getAssociatedItems()).contains(item1, item2);
    }

    private void setupMocksForImrtItem() {
        when(revision.getItem()).thenReturn(imrtItem);
    }
}
