package org.opentestsystem.ap.imrt.iis.business;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;

import java.time.Instant;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class TimeInWorkflowRuleTest {

    @Mock
    private ItemRevision revision;

    @Mock
    private BaseItem baseItem;

    @Mock
    private ItemGitInformation itemGitInformation;

    @Mock
    private ItemGitInformation existing;

    @Mock
    private BaseItem existingBaseItem;

    private TimeInWorkflowRule rule = new TimeInWorkflowRule();

    @Before
    public void setup() {
        when(revision.getItem()).thenReturn(baseItem);
        when(revision.getItemGitInformation()).thenReturn(itemGitInformation);
        when(itemGitInformation.getCurrentCommitDate()).thenReturn(Instant.ofEpochSecond(55));

        when(existing.getItem()).thenReturn(existingBaseItem);
    }

    @Test
    public void shouldUpdateNullExisting() {
        rule.applyBusinessRule(null, revision);
        verify(baseItem).setWorkflowStatusSetAt(itemGitInformation.getCurrentCommitDate());
    }

    @Test
    public void shouldUpdateStatusChange() {
        when(existingBaseItem.getWorkflowStatus()).thenReturn("status");
        when(baseItem.getWorkflowStatus()).thenReturn("status1");
        rule.applyBusinessRule(existing, revision);
        verify(baseItem).setWorkflowStatusSetAt(itemGitInformation.getCurrentCommitDate());
    }

    @Test
    public void shouldNotUpdate() {
        when(existingBaseItem.getWorkflowStatus()).thenReturn("status");
        when(baseItem.getWorkflowStatus()).thenReturn("status");
        rule.applyBusinessRule(existing, revision);
        verify(baseItem, never()).setWorkflowStatusSetAt(any());

    }
}