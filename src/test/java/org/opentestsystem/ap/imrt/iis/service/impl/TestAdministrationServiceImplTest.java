package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.Administration;
import org.opentestsystem.ap.common.model.Form;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.TestAdministration;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.repository.FormRepository;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.service.TestAdministrationService;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.verifyZeroInteractions;

@RunWith(MockitoJUnitRunner.class)
public class TestAdministrationServiceImplTest {

    @Mock
    private FormRepository mockFormRepository;

    @Captor
    private ArgumentCaptor<Iterable<org.opentestsystem.ap.common.imrt.model.Form>> formsCaptor;

    private TestAdministrationService testAdministrationService;

    @Before
    public void setUp() {
        testAdministrationService = new TestAdministrationServiceImpl(mockFormRepository);
    }

    @Test
    public void shouldIgnoreNonAssessmentItems() {
        TutItem tutItem = new TutItem("1");
        BaseItem baseItem = new ImrtItem();
        baseItem.setItemJson(tutItem);
        ItemRevision revision = ItemRevision.builder().withBaseItem(baseItem).build();

        testAdministrationService.saveForms(revision);

        verifyZeroInteractions(mockFormRepository);
    }

    @Test
    public void shouldIgnoreIfTestAdministrationEmpty() {
        SaItem saItem = new SaItem("1");
        BaseItem baseItem = new ImrtItem();
        baseItem.setItemJson(saItem);
        ItemRevision revision = ItemRevision.builder().withBaseItem(baseItem).build();

        testAdministrationService.saveForms(revision);

        verify(mockFormRepository).deleteAllByItem(baseItem);
        verifyNoMoreInteractions(mockFormRepository);
    }

    @Test
    public void shouldSaveForms() {
        SaItem saItem = new SaItem("1");

        TestAdministration ta = new TestAdministration();
        Administration admin = new Administration();

        admin.setAdministrationId("adminId");

        Form form = new Form();
        form.setFormId("formId");
        form.setExposures(1);
        form.setFormType("formType");

        admin.setForms(Collections.singletonList(form));
        ta.setAdministrations(Collections.singletonList(admin));
        saItem.getCore().setTestAdministration(ta);

        BaseItem baseItem = new ImrtItem();
        baseItem.setItemJson(saItem);
        ItemRevision revision = ItemRevision.builder().withBaseItem(baseItem).build();

        testAdministrationService.saveForms(revision);

        verify(mockFormRepository).deleteAllByItem(baseItem);
        verify(mockFormRepository).save(formsCaptor.capture());

        assertThat(formsCaptor.getValue()).hasSize(1);
    }
}