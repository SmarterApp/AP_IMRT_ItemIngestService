package org.opentestsystem.ap.imrt.iis.core.impl;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemAssignment;
import org.opentestsystem.ap.common.model.SaItem;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;

import static org.assertj.core.api.Assertions.assertThat;

public class AssigneeMapperTest {
    private AssigneeMapper assigneeMapper;

    @Before
    public void setUp() {
        assigneeMapper = new AssigneeMapper();
    }

    @Test
    public void shouldMapAssignees() throws JsonProcessingException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yy").withZone(ZoneOffset.UTC);
        Item item = new SaItem("123");

        Instant now = Instant.now();
        Instant then = Instant.now().minus(2, ChronoUnit.DAYS);
        ItemAssignment iatAssignment1 = new ItemAssignment("test@test.com", "test2@test.com", new Date(now.toEpochMilli()));
        ItemAssignment iatAssignment2 = new ItemAssignment("example@test.com", "test1@test.com", new Date(then.toEpochMilli()));

        item.setAssignments(new HashSet<>(Arrays.asList(iatAssignment1, iatAssignment2)));

        BaseItem baseItem = new ImrtItem();

        assigneeMapper.updateBaseItemProperties(baseItem, item, "someUser");

        assertThat(baseItem.getAssignments()).hasSize(2);

        org.opentestsystem.ap.common.imrt.model.ItemAssignment imrtItemAssignment = baseItem.getAssignments().iterator().next();
        assertThat(imrtItemAssignment.getItem()).isEqualTo(baseItem);

        String thenString = LocalDateTime.ofInstant(then, ZoneOffset.UTC).format(formatter);
        String nowString = LocalDateTime.ofInstant(now, ZoneOffset.UTC).format(formatter);

        assertThat(baseItem.getAssignedBy()).isEqualTo("test1@test.com, test2@test.com");
        assertThat(baseItem.getAssignedTo()).isEqualTo("example@test.com, test@test.com");
        assertThat(baseItem.getAssignedDates()).isEqualTo(thenString + ", " + nowString);
    }
}