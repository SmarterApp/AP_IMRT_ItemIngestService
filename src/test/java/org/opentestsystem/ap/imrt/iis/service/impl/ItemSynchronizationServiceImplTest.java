package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.rest.item.ItemEntityResponse;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.model.ItemSynchronizationResponse;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemService;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import java.util.Arrays;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemSynchronizationServiceImplTest {
    @Mock
    private ItemEventListener mockItemEventListener;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemDeleteNotificationHandler mockItemDeleteNotificationHandler;

    @Mock
    private BaseItemRepository baseItemRepository;

    @Mock
    private ItemService itemService;

    private ItemBankProperties itemBankProperties = new ItemBankProperties();

    private ItemSynchronizationService itemSynchronizationService;

    @Before
    public void setup() {
        itemSynchronizationService = new ItemSynchronizationServiceImpl(
                mockItemEventListener,
                mockItemDeleteNotificationHandler,
                mockOperationalEventService,
                itemBankProperties,
                baseItemRepository,
                itemService);
    }

    @Test
    public void shouldSyncNewSingleItem() {
        itemSynchronizationService.synchronizeItem(123);
        verify(mockItemEventListener).onSyncJobItem(123);
    }

    @Test
    public void shouldSyncExistingSingleItem() {
        BaseItem baseItem = ImrtItemBuilder.builder().withId(123).build();
        itemService.findLatestItemEntityByItemId(baseItem.getId());

        when(baseItemRepository.findById(123)).thenReturn(baseItem);
        ItemEntityResponse itemEntityResponse = new ItemEntityResponse();
        when(itemService.findLatestItemEntityByItemId(baseItem.getId())).thenReturn(Optional.of(itemEntityResponse));

        itemSynchronizationService.synchronizeItem(123);
        verifyZeroInteractions(mockItemDeleteNotificationHandler);
        verify(mockItemEventListener).onSyncJobItem(123);
    }

    @Test
    public void shouldDeleteExistingSingleItemIfNoLongerExistInTims() {
        BaseItem baseItem = ImrtItemBuilder.builder().withId(123).build();
        itemService.findLatestItemEntityByItemId(baseItem.getId());

        when(baseItemRepository.findById(123)).thenReturn(baseItem);
        when(itemService.findLatestItemEntityByItemId(baseItem.getId())).thenReturn(Optional.empty());

        itemSynchronizationService.synchronizeItem(123);
        verify(mockItemEventListener, times(0)).onSyncJobItem(123);
        verify(mockItemDeleteNotificationHandler).processItemMessage(123);
    }

    @Test
    public void shouldSyncItemsWithoutDeleting() {
        itemBankProperties.setDeleteSyncDisabled(true);
        when(itemService.getItemIdsInItemBank()).thenReturn(Arrays.asList("123", "bogus", "345"));

        ItemSynchronizationResponse response = itemSynchronizationService.synchronize();

        verify(mockItemEventListener).onSyncJobItem(123);
        assertThat(response.getNumberOfItemsDeletedFromImrt()).isEqualTo(0);
        assertThat(response.getNumberOfItembankIds()).isEqualTo(2);
        verifyZeroInteractions(mockItemDeleteNotificationHandler);
        verify(mockItemEventListener).onSyncJobItem(123);
    }

    @Test
    public void shouldSyncActiveItemsAndDeleteNonActiveItems() {
        when(itemService.getItemIdsInItemBank()).thenReturn(Arrays.asList("123", "bogus", "345"));

        BaseItem baseItem123 = ImrtItemBuilder.builder().withId(123).build();
        BaseItem baseItem345 = ImrtItemBuilder.builder().withId(345).build();
        Page<BaseItem> baseItemPage = new PageImpl<>(Arrays.asList(baseItem123, baseItem345));

        when(baseItemRepository.findAll(isA(PageRequest.class))).thenReturn(baseItemPage);
        when(itemService.findLatestItemEntityByItemId(baseItem123.getId())).thenReturn(Optional.of(mock(ItemEntityResponse.class)));
        when(itemService.findLatestItemEntityByItemId(baseItem345.getId())).thenReturn(Optional.empty());

        itemSynchronizationService.synchronize();

        verify(mockItemEventListener).onSyncJobItem(123);
        verify(mockItemDeleteNotificationHandler).processItemMessage(345);
    }
}
