package org.opentestsystem.ap.imrt.iis.service.impl;

import org.gitlab4j.api.Pager;
import org.gitlab4j.api.models.Project;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.ItemGitInformation;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ItemGitInformationBuilder;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.model.ItemSynchronizationResponse;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Collections;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemSynchronizationServiceImplTest {
    @Mock
    private ItemBankClient mockItemBankClient;

    @Mock
    private ItemEventListener mockItemEventListener;

    @Mock
    private ItemGitInformationRepository mockItemGitInformationRepository;

    @Mock
    private OperationalEventService operationalEventService;

    @Mock
    private ItemDeleteNotificationHandler mockItemDeleteNotificationHandler;

    @Mock
    private Pager<Project> mockProjectPager;

    private ItemSynchronizationService itemSynchronizationService;

    @Before
    public void setup() {
        itemSynchronizationService = new ItemSynchronizationServiceImpl(mockItemBankClient,
                mockItemEventListener,
                mockItemGitInformationRepository,
                mockItemDeleteNotificationHandler,
                operationalEventService);
    }

    @Test
    public void shouldOnlyUpdateItemBecauseProjectMonitorWebhookIsPresent() {
        when(mockItemBankClient.getAllItemBankIds())
                .thenReturn(newArrayList(1));
        when(mockItemBankClient.isProjectMonitored(1))
                .thenReturn(true);

        Pageable pageable = new PageRequest(0, 1);
        PageImpl<ItemGitInformation> page = new PageImpl<>(Collections.singletonList(new ItemGitInformationBuilder().withProjectId(1).build()), pageable, 1);

        when(mockItemGitInformationRepository.findAll(isA(PageRequest.class)))
                .thenReturn(page)
                .thenReturn(new PageImpl<>(Collections.emptyList()));

        Project mockProject = mock(Project.class);
        when(mockProject.getId()).thenReturn(1);
        when(mockItemBankClient.getProjectPage()).thenReturn(Optional.of(mockProjectPager));
        when(mockProjectPager.hasNext()).thenReturn(true).thenReturn(false);
        when(mockProjectPager.next()).thenReturn(Collections.singletonList(mockProject));

        when(mockItemBankClient.findProject(1)).thenReturn(Optional.of(mock(Project.class)));
        when(mockItemBankClient.isProjectMonitored(1)).thenReturn(true);

        doNothing().when(mockItemEventListener).onUpdateItem(1);

        final ItemSynchronizationResponse response = itemSynchronizationService.synchronize();

        verify(mockItemBankClient).isProjectMonitored(1);
        verify(mockItemEventListener, never()).onCreateItem(1); // webhooks match, so no need to create one
        verify(mockItemEventListener).onUpdateItem(1); // always call update
        verify(mockItemEventListener, never()).onDeleteItem(1); // since number of items in IMRT match number of items in source control, no delete should happen

        assertThat(response.getNumberOfItemsWithoutWebhook()).isEqualTo(0);
        assertThat(response.getNumberOfItemsDeletedFromImrt()).isEqualTo(0);
    }

    @Test
    @Ignore
    public void shouldCreateProjectWebhoookAndUpdateItem() {
        when(mockItemBankClient.getAllItemBankIds())
                .thenReturn(newArrayList(1));
        when(mockItemBankClient.isProjectMonitored(1))
                .thenReturn(false);
        when(mockItemGitInformationRepository.findAll())
                .thenReturn(Collections.singletonList(new ItemGitInformationBuilder().withProjectId(1).build()));

        doNothing().when(mockItemEventListener).onCreateItem(1);
        doNothing().when(mockItemEventListener).onUpdateItem(1);

        final ItemSynchronizationResponse response = itemSynchronizationService.synchronize();

        verify(mockItemBankClient).getAllItemBankIds();
        verify(mockItemBankClient).isProjectMonitored(1);
        verify(mockItemEventListener).onCreateItem(1); // no monitoring webhook, so create one
        verify(mockItemEventListener).onUpdateItem(1); // always call update
        verify(mockItemGitInformationRepository).findAll(); // should find one ItemGitInformation record
        verify(mockItemEventListener, never()).onDeleteItem(1); // since number of items in IMRT match number of items in source control, no delete should happen

        assertThat(response.getNumberOfItembankIds()).isEqualTo(1);
        assertThat(response.getNumberOfItemsWithoutWebhook()).isEqualTo(1);
        assertThat(response.getNumberOfItemsDeletedFromImrt()).isEqualTo(0);
    }

    @Test
    @Ignore
    public void shouldDeleteAnItemThatExistsInImrtButNotSourceControl() {
        when(mockItemBankClient.getAllItemBankIds())
                .thenReturn(newArrayList(1));
        when(mockItemBankClient.isProjectMonitored(1))
                .thenReturn(false);
        when(mockItemGitInformationRepository.findAll())
                .thenReturn(Collections.singletonList(new ItemGitInformationBuilder().build()));

        doNothing().when(mockItemEventListener).onCreateItem(1);
        doNothing().when(mockItemEventListener).onUpdateItem(1);

        final ItemSynchronizationResponse response = itemSynchronizationService.synchronize();

        verify(mockItemBankClient).getAllItemBankIds();
        verify(mockItemBankClient).isProjectMonitored(1);
        verify(mockItemEventListener).onCreateItem(1); // no monitoring webhook, so create one
        verify(mockItemEventListener).onUpdateItem(1); // always call update
        verify(mockItemGitInformationRepository).findAll(); // should find one ItemGitInformation record

        // since IMRT item 42 exists in IMRT but not in source control, item 42 should be deleted.
        verify(mockItemEventListener).onDeleteItem(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);

        assertThat(response.getNumberOfItembankIds()).isEqualTo(1);
        assertThat(response.getNumberOfItemsWithoutWebhook()).isEqualTo(1);
        assertThat(response.getNumberOfItemsDeletedFromImrt()).isEqualTo(1);
    }

    @Test
    public void shouldSyncSingleItemWithoutWebhook() {
        when(mockItemBankClient.isProjectMonitored(1)).thenReturn(true);

        itemSynchronizationService.synchronizeItem(1, false);

        verify(mockItemEventListener, times(0)).onCreateItem(1);
        verify(mockItemEventListener).onUpdateItem(1);
    }

    @Test
    public void shouldSyncSingleItemAddingWebhook() {
        when(mockItemBankClient.isProjectMonitored(1)).thenReturn(false);

        itemSynchronizationService.synchronizeItem(1, true);

        verify(mockItemEventListener).onCreateItem(1);
        verify(mockItemEventListener).onUpdateItem(1);
    }

    @Test
    public void shouldSyncSingleItemNotAddingWebhookIfPresent() {
        when(mockItemBankClient.isProjectMonitored(1)).thenReturn(true);

        itemSynchronizationService.synchronizeItem(1, true);

        verify(mockItemEventListener, times(0)).onCreateItem(1);
        verify(mockItemEventListener).onUpdateItem(1);
    }
}
