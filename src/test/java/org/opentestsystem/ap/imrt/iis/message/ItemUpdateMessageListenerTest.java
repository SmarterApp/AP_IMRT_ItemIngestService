package org.opentestsystem.ap.imrt.iis.message;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.service.ItemIngestService;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemUpdateMessageListenerTest {
    private ItemUpdateMessageListener itemUpdateMessageListener;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemIngestService mockItemIngestService;

    @Before
    public void setUp() {
        itemUpdateMessageListener = new ItemUpdateMessageListener(mockItemIngestService, mockOperationalEventService);
    }

    @Test
    public void shouldProcessItemUpdate() {
        ItemGitInformation mockGitInfo = new ItemGitInformation();
        BaseItem item = new ImrtItemBuilder().build();
        mockGitInfo.setItem(item);

        when(mockItemIngestService.syncItem(123)).thenReturn(Optional.of(mockGitInfo));

        itemUpdateMessageListener.handleMessage(123);

        verify(mockItemIngestService).syncItem(123);
    }

    @Test
    public void shouldLogAndRethrowWhenErrorThrown() {
        doThrow(new RuntimeException("Something happened")).when(mockItemIngestService).syncItem(123);

        try {
            itemUpdateMessageListener.handleMessage(123);
            fail();
        } catch (RuntimeException e) {
            assertThat(e.getMessage()).isEqualTo("Something happened");
        }
    }
}