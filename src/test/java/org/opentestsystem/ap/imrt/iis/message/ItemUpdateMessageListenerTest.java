package org.opentestsystem.ap.imrt.iis.message;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.service.ItemIngestService;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class ItemUpdateMessageListenerTest {
    private ItemUpdateMessageListener itemUpdateMessageListener;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemIngestService mockItemIngestService;

    @Before
    public void setUp() {
        itemUpdateMessageListener = new ItemUpdateMessageListener(mockItemIngestService, mockOperationalEventService);
    }

    @Test
    public void shouldProcessItemUpdate() {
        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(123, UUID.randomUUID());

        itemUpdateMessageListener.handleUpdate(itemUpdateEvent);

        verify(mockItemIngestService).syncItem(itemUpdateEvent);
    }

    @Test
    public void shouldLogAndRethrowWhenErrorThrown() {
        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(123, UUID.randomUUID());
        doThrow(new RuntimeException("Something happened")).when(mockItemIngestService).syncItem(itemUpdateEvent);

        try {
            itemUpdateMessageListener.handleUpdate(itemUpdateEvent);
            fail();
        } catch (RuntimeException e) {
            assertThat(e.getMessage()).isEqualTo("Something happened");
        }
    }
}