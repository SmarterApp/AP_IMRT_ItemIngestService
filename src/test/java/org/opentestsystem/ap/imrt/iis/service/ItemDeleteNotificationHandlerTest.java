package org.opentestsystem.ap.imrt.iis.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.Stimulus;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.common.repository.StimulusLinkRepository;
import org.opentestsystem.ap.imrt.common.repository.StimulusRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ItemGitInformationBuilder;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemLogRepository;
import org.slf4j.Logger;

import java.util.Optional;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemDeleteNotificationHandlerTest {
    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ProjectLockService mockProjectLockService;

    @Mock
    private ImrtItemRepository mockImrtItemRepository;

    @Mock
    private ItemGitInformationRepository mockItemGitInformationRepository;

    @Mock
    private ItemLogRepository mockItemLogRepository;

    @Mock
    private StimulusLinkRepository mockStimulusLinkRepository;

    @Mock
    private StimulusRepository mockStimulusRepository;

    private ItemDeleteNotificationHandler itemDeleteNotificationHandler;

    @Before
    public void setUp() {
        itemDeleteNotificationHandler = new ItemDeleteNotificationHandler(mockOperationalEventService,
                mockProjectLockService,
                mockImrtItemRepository,
                mockItemGitInformationRepository,
                mockItemLogRepository,
                mockStimulusLinkRepository,
                mockStimulusRepository);
    }

    @Test
    public void shouldDeleteAnItem() {
        final ItemGitInformation itemGitInformation = new ItemGitInformationBuilder().build();

        when(mockItemGitInformationRepository.findOneByProjectId(ItemGitInformationBuilder.DEFAULT_PROJECT_ID))
                .thenReturn(Optional.of(itemGitInformation));
        doNothing()
                .when(mockItemLogRepository)
                .deleteAllByItemLogKeyItem(itemGitInformation.getItem());
        doNothing()
                .when(mockStimulusLinkRepository)
                .deleteByItemKey(itemGitInformation.getItem().getKey());
        doNothing()
                .when(mockImrtItemRepository)
                .delete((ImrtItem) itemGitInformation.getItem());

        itemDeleteNotificationHandler.processItemMessage(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);

        verify(mockProjectLockService).lockProject(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);
        verify(mockItemGitInformationRepository).findOneByProjectId(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);
        verify(mockItemLogRepository).deleteAllByItemLogKeyItem(itemGitInformation.getItem());

        // We're deleting an item, so the Stimulus-specific delete methods should not be hit.
        verify(mockStimulusLinkRepository, never()).deleteAllByStimulusKey(itemGitInformation.getItem().getKey());
        verifyZeroInteractions(mockStimulusRepository);

        verify(mockStimulusLinkRepository).deleteByItemKey(itemGitInformation.getItem().getKey());
        verify(mockImrtItemRepository).delete(itemGitInformation.getItem().getKey());
        verify(mockOperationalEventService).itemDeletedEvent(any(Logger.class),
                eq(itemGitInformation.getItem().getKey()),
                eq(itemGitInformation.getItem().getId()),
                eq(itemGitInformation.getProjectId()));
        verify(mockProjectLockService).unlockProject(isA(Integer.class), isA(Long.class));
    }

    @Test
    public void shouldDeleteAStimulus() {
        final Stimulus stimulus = new Stimulus();
        stimulus.setKey(13);
        stimulus.setId("123");

        final ItemGitInformation stimulusGitInformation = new ItemGitInformationBuilder()
                .withItem(stimulus)
                .build();

        when(mockItemGitInformationRepository.findOneByProjectId(ItemGitInformationBuilder.DEFAULT_PROJECT_ID))
                .thenReturn(Optional.of(stimulusGitInformation));
        doNothing()
                .when(mockItemLogRepository)
                .deleteAllByItemLogKeyItem(stimulusGitInformation.getItem());
        doNothing()
                .when(mockStimulusLinkRepository)
                .deleteByItemKey(stimulusGitInformation.getItem().getKey());
        doNothing()
                .when(mockStimulusRepository)
                .delete((Stimulus) stimulusGitInformation.getItem());

        itemDeleteNotificationHandler.processItemMessage(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);

        verify(mockProjectLockService).lockProject(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);
        verify(mockItemGitInformationRepository).findOneByProjectId(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);
        verify(mockItemLogRepository).deleteAllByItemLogKeyItem(stimulusGitInformation.getItem());

        verify(mockStimulusLinkRepository).deleteAllByStimulusKey(stimulusGitInformation.getItem().getKey());
        verify(mockStimulusRepository).delete(stimulusGitInformation.getItem().getKey());

        // We're deleting an stimulus, so the Item-specific delete methods should not be hit.
        verify(mockStimulusLinkRepository, never()).deleteByItemKey(stimulusGitInformation.getItem().getKey());
        verifyZeroInteractions(mockImrtItemRepository);
        verify(mockOperationalEventService).itemDeletedEvent(any(Logger.class),
                eq(stimulusGitInformation.getItem().getKey()),
                eq(stimulusGitInformation.getItem().getId()),
                eq(stimulusGitInformation.getProjectId()));
        verify(mockProjectLockService).unlockProject(isA(Integer.class), isA(Long.class));
    }

    @Test
    public void shouldNotTryToDeleteWhenItemGitInformationCannotBeFound() {
        when(mockItemGitInformationRepository.findOneByProjectId(ItemGitInformationBuilder.DEFAULT_PROJECT_ID))
                .thenReturn(Optional.empty());

        itemDeleteNotificationHandler.processItemMessage(ItemGitInformationBuilder.DEFAULT_PROJECT_ID);

        verify(mockItemGitInformationRepository, never()).delete(anyInt());
        verifyZeroInteractions(mockItemLogRepository);
        verifyZeroInteractions(mockStimulusLinkRepository);
        verifyZeroInteractions(mockStimulusRepository);
        verifyZeroInteractions(mockImrtItemRepository);
        verifyZeroInteractions(mockOperationalEventService);
    }
}
