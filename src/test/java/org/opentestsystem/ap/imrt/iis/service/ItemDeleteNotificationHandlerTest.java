package org.opentestsystem.ap.imrt.iis.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.model.Stimulus;
import org.opentestsystem.ap.common.imrt.repository.ImrtItemRepository;
import org.opentestsystem.ap.common.imrt.repository.KeywordContentRepository;
import org.opentestsystem.ap.common.imrt.repository.StimulusRepository;
import org.opentestsystem.ap.common.imrt.repository.ValidationResultsRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.slf4j.Logger;

import java.util.Optional;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemDeleteNotificationHandlerTest {
    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ProjectLockService mockProjectLockService;

    @Mock
    private ImrtItemRepository mockImrtItemRepository;

    @Mock
    private StimulusRepository mockStimulusRepository;

    @Mock
    private ValidationResultsRepository mockValidationResultsRepository;

    @Mock
    private KeywordContentRepository mockKeywordContentRepository;

    @Mock
    private BaseItemService baseItemService;

    private ItemDeleteNotificationHandler itemDeleteNotificationHandler;

    private BaseItem baseItem;

    @Before
    public void setUp() {
        itemDeleteNotificationHandler = new ItemDeleteNotificationHandler(mockOperationalEventService,
                mockProjectLockService,
                mockImrtItemRepository,
                mockStimulusRepository,
                mockValidationResultsRepository,
                mockKeywordContentRepository,
                baseItemService);

        baseItem = new ImrtItemBuilder()
                .withKey(1)
                .build();
    }

    @Test
    public void shouldDeleteAnItem() {
        when(baseItemService.findBaseItemByItemId(baseItem.getId()))
                .thenReturn(Optional.of(baseItem));

        doNothing()
                .when(mockImrtItemRepository)
                .delete((ImrtItem) baseItem);

        itemDeleteNotificationHandler.processItemMessage(baseItem.getId());

        verify(mockProjectLockService).lockProject(baseItem.getId());
        verify(mockValidationResultsRepository).deleteAllByItem(baseItem);
        verify(mockKeywordContentRepository).deleteAllByItem(baseItem);

        // We're deleting an item, so the Stimulus-specific delete methods should not be hit.
        verifyZeroInteractions(mockStimulusRepository);

        verify(mockImrtItemRepository).delete(baseItem.getKey());
        verify(mockOperationalEventService).itemDeletedEvent(any(Logger.class),
                eq(baseItem.getKey()),
                eq(baseItem.getId()));
        verify(mockProjectLockService).unlockProject(isA(Integer.class), isA(Long.class));
    }

    @Test
    public void shouldDeleteAStimulus() {
        final Stimulus stimulus = new Stimulus();
        stimulus.setKey(13);
        stimulus.setId(123);

        when(baseItemService.findBaseItemByItemId(stimulus.getId())).thenReturn(Optional.of(stimulus));

        doNothing()
                .when(mockStimulusRepository)
                .delete(stimulus);

        itemDeleteNotificationHandler.processItemMessage(stimulus.getId());

        verify(mockProjectLockService).lockProject(stimulus.getId());
        verify(mockKeywordContentRepository).deleteAllByItem(stimulus);
        verify(mockStimulusRepository).delete(stimulus.getKey());

        // We're deleting an stimulus, so the Item-specific delete methods should not be hit.
        verifyZeroInteractions(mockImrtItemRepository);
        verify(mockOperationalEventService).itemDeletedEvent(any(Logger.class),
                eq(stimulus.getKey()),
                eq(stimulus.getId()));
        verify(mockProjectLockService).unlockProject(isA(Integer.class), isA(Long.class));
    }

    @Test
    public void shouldNotTryToDeleteWhenItemGitInformationCannotBeFound() {
        when(baseItemService.findBaseItemByItemId(1))
                .thenReturn(Optional.empty());

        itemDeleteNotificationHandler.processItemMessage(1);

        verifyZeroInteractions(mockStimulusRepository);
        verifyZeroInteractions(mockImrtItemRepository);
        verifyZeroInteractions(mockKeywordContentRepository);
    }
}
