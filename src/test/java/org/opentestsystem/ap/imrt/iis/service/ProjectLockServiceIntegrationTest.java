package org.opentestsystem.ap.imrt.iis.service;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.opentestsystem.ap.imrt.iis.BaseIntegrationTest;
import org.opentestsystem.ap.imrt.iis.exception.ProjectLockException;
import org.opentestsystem.ap.imrt.iis.exception.ProjectUnlockException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Date;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectLockServiceIntegrationTest extends BaseIntegrationTest {
    private static int projectId = 99;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Autowired
    JdbcTemplate jdbcTemplate;

    @Autowired
    ProjectLockService projectLockService;

    @Test
    public void shouldLockNotExists() {
        // Lock a project
        long lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);
    }

    @Test
    public void shouldNotLockIfExistsNotExpired() {
        // Lock a project
        long lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);

        // Try to lock again, this should fail
        thrown.expect(ProjectLockException.class);
        thrown.expectMessage(String.format("Project %d is already locked", projectId));
        projectLockService.lockProject(projectId);
    }

    @Test
    public void shouldNotUnlockIfWrongLockId() {
        // Lock a project
        long lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);

        // Unlock with the wrong lock ID
        thrown.expect(ProjectUnlockException.class);
        thrown.expectMessage(String.format("Unable to unlock project for projectId %d lock %d", projectId, lock+1));
        projectLockService.unlockProject(projectId, lock + 1);
    }

    @Test
    public void shouldLockAfterUnlock() {
        // Lock a project
        long lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);

        // Unlock with the correct lock ID
        projectLockService.unlockProject(projectId, lock);

        // Now we should be able to relock
        lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);
    }

    @Test
    public void shouldLockIfExpired() {
        // Lock a project
        long lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);

        // Now manually set the lock time back just over 60 seconds
        Date now = new Date();
        jdbcTemplate.update("update project_lock set locked_at = ? where project_id = ?", new Object[]{new Date(now.getTime() - 61 * 1000), projectId});

        // Now we should be able to relock
        lock = projectLockService.lockProject(projectId);
        assertThat(lock).isNotEqualTo(0);
    }
}
