package org.opentestsystem.ap.imrt.iis.service;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Date;
import java.util.Optional;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class ProjectLockServiceIntegrationTest {
    private static final Logger logger = LoggerFactory.getLogger(ProjectLockServiceIntegrationTest.class);
    private static int projectId = 99;

    @Value("${spring.datasource.url}")
    private String dbUrl;

    @Autowired
    JdbcTemplate jdbcTemplate;

    @Autowired
    ProjectLockServiceJdbcImpl projectLockService;

    @Before
    public void setup() {
        logger.info("Datasource URL {}", dbUrl);
        // Before each test, empty out the project_lock table in the test db.
        jdbcTemplate.execute("TRUNCATE TABLE project_lock");
    }

    @Test
    public void shouldLockNotExists() {
        // Lock a project
        Optional<Long> lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());
    }

    @Test
    public void shouldNotLockIfExistsNotExpired() {
        // Lock a project
        Optional<Long> lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());

        // Try to lock again, this should fail
        Optional<Long> nullLock = projectLockService.lockProject(projectId);
        assertFalse(nullLock.isPresent());
    }

    @Test
    public void shouldNotUnlockIfWrongLockId() {
        // Lock a project
        Optional<Long> lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());

        // Unlock with the wrong lock ID
        projectLockService.unlockProject(projectId, lock.get() + 1);

        // Try to lock again, this should fail
        Optional<Long> nullLock = projectLockService.lockProject(projectId);
        assertFalse(nullLock.isPresent());
    }

    @Test
    public void shouldLockAfterUnlock() {
        // Lock a project
        Optional<Long> lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());

        // Unlock with the correct lock ID
        projectLockService.unlockProject(projectId, lock.get());

        // Now we should be able to relock
        lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());
    }

    @Test
    public void shouldLockIfExpired() {
        // Lock a project
        Optional<Long> lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());

        // Now manually set the lock time back just over 60 seconds
        Date now = new Date();
        jdbcTemplate.update("update project_lock set locked_at = ? where project_id = ?", new Object[]{new Date(now.getTime() - 61 * 1000), projectId});

        // Now we should be able to relock
        lock = projectLockService.lockProject(projectId);
        assertTrue(lock.isPresent());
    }
}
