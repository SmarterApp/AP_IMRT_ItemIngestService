package org.opentestsystem.ap.imrt.iis.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Date;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

@RunWith(SpringRunner.class)
@JdbcTest
@Import({ProjectLockServiceJdbcImpl.class, OperationalEventServiceLoggerImpl.class})
public class ProjectLockServiceIntegrationTest {
    private static final Logger logger = LoggerFactory.getLogger(ProjectLockServiceIntegrationTest.class);

    @Autowired
    JdbcTemplate jdbcTemplate;

    @Autowired
    ProjectLockServiceJdbcImpl projectLockService;

    @Before
    public void setup() {
        // This does not match perfectly with the POSTGRESQL definition in the
        // schema project due to the embedded SQL DB used for testing not
        // being fully POSTGRES compatible, but it is close enough for testing.
        jdbcTemplate.execute("CREATE TABLE project_lock (\n" +
                "  project_id INT         NOT NULL,\n" +
                "  lock_time  TIMESTAMP NOT NULL,\n" +
                "  created_at TIMESTAMP NOT NULL DEFAULT current_timestamp,\n" +
                "  updated_at TIMESTAMP NOT NULL DEFAULT current_timestamp,\n" +
                "  updated_by VARCHAR     NOT NULL,\n" +
                "  PRIMARY KEY (project_id)\n" +
                ")");
    }

    @Test
    public void testProjectLock() {
        int projectId = 99;
        // Lock a project
        Long lock = projectLockService.lockProject(projectId);
        assertNotNull(lock);
        logger.info("First returned lock is {}", lock);
        // Try to relock the same project - this should fail
        Long nullLock = projectLockService.lockProject(projectId);
        assertNull(nullLock);
        // Now unlock it, but with the wrong lock value
        projectLockService.unlockProject(projectId, lock + 1);
        // Try to relock, this should fail
        nullLock = projectLockService.lockProject(projectId);
        assertNull(nullLock);
        // Now unlock correctly
        projectLockService.unlockProject(projectId, lock);
        // And relock - this should be OK
        lock = projectLockService.lockProject(projectId);
        assertNotNull(lock);
        // Now manually set the lock time back just over 60 seconds
        Date now = new Date();
        jdbcTemplate.update("update project_lock set lock_time = ? where project_id = ?", new Object[]{new Date(now.getTime()-61*1000), projectId});
        // Now we should be able to relock
        lock = projectLockService.lockProject(projectId);
        assertNotNull(lock);
    }
}
