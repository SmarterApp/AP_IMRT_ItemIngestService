package org.opentestsystem.ap.imrt.iis.repository;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.gitlab4j.api.CommitsApi;
import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.NamespaceApi;
import org.gitlab4j.api.Pager;
import org.gitlab4j.api.ProjectApi;
import org.gitlab4j.api.RepositoryApi;
import org.gitlab4j.api.RepositoryFileApi;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Commit;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.Project;
import org.gitlab4j.api.models.ProjectHook;
import org.gitlab4j.api.models.RepositoryFile;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.StatusType;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SuppressFBWarnings("RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT")
// Required because findbugs is throwing errors on some of the verify statements
public class GitLabRepositoryImplTest {

    @Mock
    private GitLabApi mockGitLabApi;

    @Mock
    private CommitsApi mockCommitsApi;

    @Mock
    private NamespaceApi mockNamespaceApi;

    @Mock
    private ProjectApi mockProjectApi;

    @Mock
    private RepositoryApi mockRepositoryApi;

    @Mock
    private RepositoryFileApi mockRepositoryFileApi;

    @Mock
    private ItemBankProperties mockItemBankProperties;

    @Mock
    private Pager<Commit> mockCommitPager;

    @Mock
    private Pager<Project> mockProjectPager;

    @Mock
    private OperationalEventService operationalEventService;

    private GitLabRepository gitLabRepository;

    @Before
    public void setup() {
        gitLabRepository = new GitLabRepositoryImpl(mockGitLabApi, mockItemBankProperties, operationalEventService);
    }

    @Test
    public void shouldAddAProjectHookToAnItem() throws GitLabApiException {
        final int itemBankId = 42;

        when(mockGitLabApi.getProjectApi())
                .thenReturn(mockProjectApi);
        when(mockGitLabApi.getProjectApi().addHook(itemBankId,
                mockItemBankProperties.getWebhookUrl(),
                true,
                false,
                false))
                .thenReturn(new ProjectHook());

        final Optional<ProjectHook> result = gitLabRepository.addProjectHook(itemBankId);

        verify(mockGitLabApi.getProjectApi()).addHook(itemBankId,
                mockItemBankProperties.getWebhookUrl(),
                true,
                false,
                false);
        assertThat(result).isPresent();
    }

    @Test
    public void shouldFindAllNamespacesForAProjectGroup() throws GitLabApiException {
        final String projectGroupName = "unit-test-project-group";

        when(mockItemBankProperties.getGroup())
                .thenReturn(projectGroupName);
        when(mockGitLabApi.getNamespaceApi())
                .thenReturn(mockNamespaceApi);
        when(mockGitLabApi.getNamespaceApi().findNamespaces(projectGroupName))
                .thenReturn(Collections.singletonList(new Namespace()));

        List<Namespace> result = gitLabRepository.findAllNamespaces(projectGroupName);

        verify(mockGitLabApi.getNamespaceApi()).findNamespaces(projectGroupName);
        assertThat(result).hasSize(1);
    }

    @Test
    public void shouldFindAFileForAnItemInABranch() throws GitLabApiException {
        final String fileName = "item.json";
        final int itemBankId = 42;
        final String branchName = "master";

        when(mockGitLabApi.getRepositoryFileApi())
                .thenReturn(mockRepositoryFileApi);
        when(mockGitLabApi.getRepositoryFileApi().getFile(fileName, itemBankId, branchName))
                .thenReturn(new RepositoryFile());

        Optional<RepositoryFile> result = gitLabRepository.findFile(itemBankId, fileName, branchName);

        verify(mockGitLabApi.getRepositoryFileApi()).getFile(fileName, itemBankId, branchName);
        assertThat(result).isPresent();
    }

    @Test
    public void shouldFindAllBranchesForAnItem() throws GitLabApiException {
        final int itemBankId = 42;

        when(mockGitLabApi.getRepositoryApi())
                .thenReturn(mockRepositoryApi);
        when(mockGitLabApi.getRepositoryApi().getBranches(itemBankId))
                .thenReturn(Collections.singletonList(new Branch()));

        List<Branch> result = gitLabRepository.getAllBranches(itemBankId);

        verify(mockGitLabApi.getRepositoryApi()).getBranches(itemBankId);
        assertThat(result).hasSize(1);
    }

    @Test
    public void shouldFindAllProjectHooksForAnItem() throws GitLabApiException {
        final int itemBankId = 42;

        when(mockGitLabApi.getProjectApi())
                .thenReturn(mockProjectApi);
        when(mockGitLabApi.getProjectApi().getHooks(itemBankId))
                .thenReturn(Collections.singletonList(new ProjectHook()));

        List<ProjectHook> result = gitLabRepository.getAllProjectHooks(itemBankId);

        verify(mockGitLabApi.getProjectApi()).getHooks(itemBankId);
        assertThat(result).hasSize(1);
    }

    @Test
    public void shouldFindAPageOfCommitsForAnItem() throws GitLabApiException {
        final int itemBankId = 42;
        final String branchName = "master";
        final Date from = Date.from(Instant.now().minus(100L, ChronoUnit.DAYS));
        final Date to = Date.from(Instant.now());
        final String fileName = "item.json";
        final int pageSize = 100;

        when(mockGitLabApi.getCommitsApi())
                .thenReturn(mockCommitsApi);
        when(mockGitLabApi.getCommitsApi().getCommits(itemBankId, branchName, from, to, fileName, pageSize))
                .thenReturn(mockCommitPager);

        final Optional<Pager<Commit>> result = gitLabRepository.findAllCommitsForFile(itemBankId,
                fileName,
                branchName,
                from,
                to,
                pageSize);

        verify(mockGitLabApi.getCommitsApi()).getCommits(itemBankId, branchName, from, to, fileName, pageSize);
        assertThat(result).isPresent();
    }

    @Test
    public void shouldFindAPageOfProjects() throws GitLabApiException {
        final int pageSize = 100;

        when(mockGitLabApi.getProjectApi())
                .thenReturn(mockProjectApi);
        when(mockGitLabApi.getProjectApi().getProjects(pageSize))
                .thenReturn(mockProjectPager);

        final Optional<Pager<Project>> result = gitLabRepository.findAllProjects(pageSize);

        verify(mockGitLabApi.getProjectApi()).getProjects(pageSize);
        assertThat(result).isPresent();
    }

    @Test(expected = GitLabApiRuntimeException.class)
    public void shouldThrowGitLabRuntimeExceptionInsteadOfGitLabApiException() throws GitLabApiException {
        when(mockGitLabApi.getProjectApi())
                .thenReturn(mockProjectApi);
        when(mockGitLabApi.getProjectApi().getHooks(42))
                .thenThrow(new GitLabApiException("Something bad happened"));

        gitLabRepository.getAllProjectHooks(42);
    }

    @Test
    public void shouldFindACommitForAnItemBankIdAndCommitHash() throws GitLabApiException {
        final int itemBankId = 42;
        final String commitSha = "unit-test-sha";

        when(mockGitLabApi.getCommitsApi())
                .thenReturn(mockCommitsApi);
        when(mockGitLabApi.getCommitsApi().getCommit(itemBankId, commitSha))
                .thenReturn(new Commit());

        final Optional<Commit> result = gitLabRepository.findCommit(itemBankId, commitSha);

        verify(mockGitLabApi.getCommitsApi()).getCommit(itemBankId, commitSha);

        assertThat(result).isPresent();
    }

    @Test
    public void shouldReturnOptionalEmptyWhenCommitCannotBeFound() throws GitLabApiException {
        final int itemBankId = 42;
        final String commitSha = "unit-test-sha";
        final Response mockResponse = mock(Response.class);
        final StatusType statusType = mock(StatusType.class);

        // This setup is required for the GitLabApiException because the getHttpStatus method is final, meaning
        // Mockito can't easily stub it.  To get the desired http status, the Response is mocked and used in the
        // GitLabApiException's constructor.
        when(mockResponse.getStatus()).thenReturn(404);
        when(mockResponse.getStatusInfo()).thenReturn(statusType);
        final GitLabApiException mockGitLabApiException = new GitLabApiException(mockResponse);

        when(mockGitLabApi.getCommitsApi())
                .thenReturn(mockCommitsApi);
        when(mockGitLabApi.getCommitsApi().getCommit(itemBankId, commitSha))
                .thenThrow(mockGitLabApiException);

        final Optional<Commit> result = gitLabRepository.findCommit(itemBankId, commitSha);

        verify(mockGitLabApi.getCommitsApi()).getCommit(itemBankId, commitSha);

        assertThat(result).isNotPresent();
    }
}
