package org.opentestsystem.ap.imrt.iis.repository;

import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.NamespaceApi;
import org.gitlab4j.api.ProjectApi;
import org.gitlab4j.api.RepositoryApi;
import org.gitlab4j.api.RepositoryFileApi;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.ProjectHook;
import org.gitlab4j.api.models.RepositoryFile;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GitLabRepositoryImplTest {

    @Mock
    GitLabApi mockGitLabApi;

    @Mock
    NamespaceApi mockNamespaceApi;

    @Mock
    ProjectApi mockProjectApi;

    @Mock
    RepositoryApi mockRepositoryApi;

    @Mock
    RepositoryFileApi mockRepositoryFileApi;

    @Mock
    ItemBankProperties mockItemBankProperties;

    private GitLabRepository gitLabRepository;

    @Before
    public void setup() {
        gitLabRepository = new GitLabRepositoryImpl(mockGitLabApi, mockItemBankProperties);
    }

    @Test
    public void shouldAddAProjectHookToAnItem() {

    }

    @Test
    public void shouldFindAllNamespacesForAProjectGroup() throws GitLabApiException {
        final String projectGroupName = "unit-test-project-group";

        when(mockItemBankProperties.getGroup())
                .thenReturn(projectGroupName);
        when(mockGitLabApi.getNamespaceApi())
                .thenReturn(mockNamespaceApi);
        when(mockGitLabApi.getNamespaceApi().findNamespaces(projectGroupName))
                .thenReturn(Collections.singletonList(new Namespace()));

        Optional<List<Namespace>> result = gitLabRepository.findAllNamespaces(projectGroupName);

        verify(mockItemBankProperties).getGroup();
        verify(mockGitLabApi.getNamespaceApi()).findNamespaces(projectGroupName);
        assertThat(result).isPresent();
        assertThat(result.get()).hasSize(1);
    }

    @Test
    public void shouldFindAFileForAnItemInABranch() throws GitLabApiException {
        final String fileName = "item.json";
        final int itemBankId = 42;
        final String branchName = "master";

        when(mockGitLabApi.getRepositoryFileApi())
                .thenReturn(mockRepositoryFileApi);
        when(mockGitLabApi.getRepositoryFileApi().getFile(fileName, itemBankId, branchName))
                .thenReturn(new RepositoryFile());

        Optional<RepositoryFile> result = gitLabRepository.findFile(itemBankId, fileName, branchName);

        verify(mockGitLabApi.getRepositoryFileApi()).getFile(fileName, itemBankId, branchName);
        assertThat(result).isPresent();
    }

    @Test
    public void shouldFindAllBranchesForAnItem() throws GitLabApiException {
        final int itemBankId = 42;

        when(mockGitLabApi.getRepositoryApi())
                .thenReturn(mockRepositoryApi);
        when(mockGitLabApi.getRepositoryApi().getBranches(itemBankId))
                .thenReturn(Collections.singletonList(new Branch()));

        Optional<List<Branch>> result = gitLabRepository.findAllBranches(itemBankId);

        verify(mockGitLabApi.getRepositoryApi()).getBranches(itemBankId);
        assertThat(result).isPresent();
        assertThat(result.get()).hasSize(1);
    }

    @Test
    public void shouldFindAllProjectHooksForAnItem() throws GitLabApiException {
        final int itemBankId = 42;

        when(mockGitLabApi.getProjectApi())
                .thenReturn(mockProjectApi);
        when(mockGitLabApi.getProjectApi().getHooks(itemBankId))
                .thenReturn(Collections.singletonList(new ProjectHook()));

        Optional<List<ProjectHook>> result = gitLabRepository.findAllProjectHooks(itemBankId);

        verify(mockGitLabApi.getProjectApi()).getHooks(itemBankId);
        assertThat(result).isPresent();
        assertThat(result.get()).hasSize(1);
    }

    @Test(expected = GitLabApiRuntimeException.class)
    public void shouldThrowGitLabRuntimeExceptionInsteadOfGitLabApiException() {
        when(mockGitLabApi.getProjectApi())
                .thenThrow(new GitLabApiRuntimeException("Something bad happened"));

        gitLabRepository.findAllProjectHooks(42);
    }
}
