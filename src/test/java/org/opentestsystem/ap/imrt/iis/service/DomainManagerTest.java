package org.opentestsystem.ap.imrt.iis.service;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.StimLink;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.StandardIdRepository;
import org.opentestsystem.ap.imrt.iis.repository.StimLinkRepository;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@SuppressFBWarnings("RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT") // Required because findbugs is throwing errors on some of the verify statements
public class DomainManagerTest {

    @Mock
    private ItemGitInformationRepository itemGitInformationRepository;

    @Mock
    private ImrtItemRepository imrtItemRepository;

    @Mock
    private StimLinkRepository stimLinkRepository;

    @Mock
    private StandardIdRepository standardIdRepository;

    @Mock
    private OperationalEventService operationalEventService;

    @Mock
    private ImrtItem imrtItem;

    @Mock
    private ItemGitInformation itemGitInformation;

    @Mock
    private ItemRevision revision;

    // Class under test
    private DomainManager domainManager;

    @Before
    public void setupMocks() {
        domainManager = new DomainManager(itemGitInformationRepository,
                imrtItemRepository, stimLinkRepository, standardIdRepository,
                operationalEventService);

        when(revision.getImrtItem()).thenReturn(imrtItem);
        when(revision.getItemGitInformation()).thenReturn(itemGitInformation);
    }

    @Test
    public void noStim() {
        when(revision.getStandardIdList()).thenReturn(Lists.newArrayList());
        when(revision.getLinkedStimulusId()).thenReturn(Optional.empty());

        domainManager.saveItemRevision(revision);

        verify(imrtItemRepository, times(1)).save(imrtItem);
        verify(itemGitInformationRepository, times(1)).save(itemGitInformation);
        verify(revision, times(1)).getLinkedStimulusId();
        verifyZeroInteractions(operationalEventService);
        verify(imrtItemRepository, times(0)).findById(any());
        verifyZeroInteractions(stimLinkRepository);

        verify(revision, times(1)).getStandardIdList();
        verify(standardIdRepository, times(1)).save(revision.getStandardIdList());

        // TODO item log
    }

    @Test
    public void stimNotFound() {
        when(revision.getStandardIdList()).thenReturn(Lists.newArrayList());
        when(revision.getLinkedStimulusId()).thenReturn(Optional.of("stimId"));
        when(imrtItemRepository.findById("stimId")).thenReturn(null);

        domainManager.saveItemRevision(revision);

        verify(imrtItemRepository, times(1)).save(imrtItem);
        verify(itemGitInformationRepository, times(1)).save(itemGitInformation);
        verify(revision, times(1)).getLinkedStimulusId();
        verify(imrtItemRepository, times(1)).findById("stimId");
        verify(operationalEventService, times(1)).serviceWarning(any(), any(), any(), any(), any());
        verifyZeroInteractions(stimLinkRepository);

        verify(revision, times(1)).getStandardIdList();
        verify(standardIdRepository, times(1)).save(revision.getStandardIdList());

        // TODO item log

    }

    @Test
    public void stimFound() {
        ImrtItem stimItem = new ImrtItem();

        when(revision.getStandardIdList()).thenReturn(Lists.newArrayList());
        when(revision.getLinkedStimulusId()).thenReturn(Optional.of("stimId"));
        when(imrtItemRepository.findById("stimId")).thenReturn(stimItem);

        domainManager.saveItemRevision(revision);

        verify(imrtItemRepository, times(1)).save(imrtItem);
        verify(itemGitInformationRepository, times(1)).save(itemGitInformation);
        verify(revision, times(1)).getLinkedStimulusId();
        verify(imrtItemRepository, times(1)).findById("stimId");
        verifyZeroInteractions(operationalEventService);
        ArgumentCaptor<StimLink> stimLinkCaptor = ArgumentCaptor.forClass(StimLink.class);
        verify(stimLinkRepository, times(1)).save(stimLinkCaptor.capture());
        assertThat(stimLinkCaptor.getValue().getStimLinkKey().getItem()).isEqualTo(imrtItem);
        assertThat(stimLinkCaptor.getValue().getStimLinkKey().getItemStim()).isEqualTo(stimItem);

        verify(revision, times(1)).getStandardIdList();
        verify(standardIdRepository, times(1)).save(revision.getStandardIdList());

        // TODO item log
    }
}
