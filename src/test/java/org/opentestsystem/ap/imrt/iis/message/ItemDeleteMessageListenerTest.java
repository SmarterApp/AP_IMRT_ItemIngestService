package org.opentestsystem.ap.imrt.iis.message;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.slf4j.Logger;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class ItemDeleteMessageListenerTest {
    private ItemDeleteMessageListener itemDeleteMessageListener;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemDeleteNotificationHandler mockItemDeleteNotificationHandler;

    @Before
    public void setUp() {
        itemDeleteMessageListener = new ItemDeleteMessageListener(mockItemDeleteNotificationHandler,
                mockOperationalEventService);
    }

    @Test
    public void shouldProcessItemDelete() {
        itemDeleteMessageListener.handleMessage(42);

        verify(mockItemDeleteNotificationHandler).processItemMessage(42);
    }

    @Test
    public void shouldLogAndRethrowWhenAnErrorIsEncountered() {
        doThrow(new RuntimeException("Something bad happened"))
                .when(mockItemDeleteNotificationHandler).processItemMessage(42);

        try {
            itemDeleteMessageListener.handleMessage(42);
        } catch (RuntimeException e) {
            verify(mockOperationalEventService).warn(isA(Logger.class),
                    isA(Throwable.class),
                    isA(String.class),
                    Matchers.<Object>anyVararg());
            assertThat(e.getMessage()).isEqualTo("Something bad happened");
        }
    }
}
