package org.opentestsystem.ap.imrt.iis.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;

import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemSynchronizationServiceTest {
    @Mock
    private ItemBankClient mockItemBankClient;

    @Mock
    private ItemEventListener mockItemEventListener;

    private ItemSynchronizationService itemSynchronizationService;

    @Before
    public void setup() {
        itemSynchronizationService = new ItemSynchronizationServiceImpl(mockItemBankClient, mockItemEventListener);
    }

    @Test
    public void shouldOnlyUpdateItemBecauseProjectMonitorWebhookIsPresent() {
        when(mockItemBankClient.isProjectMonitored(1))
            .thenReturn(true);

        doNothing().when(mockItemEventListener).onCreateItem(1);
        doNothing().when(mockItemEventListener).onUpdateItem(1);

        itemSynchronizationService.synchronizeItem(1);

        verify(mockItemBankClient).isProjectMonitored(1);
        verify(mockItemEventListener, never()).onCreateItem(1); // webhooks match, so no need to create one
        verify(mockItemEventListener).onUpdateItem(1); // always call update
    }

    @Test
    public void shouldCreateProjectWebhoookAndUpdateItem() {
        when(mockItemBankClient.isProjectMonitored(1))
            .thenReturn(false);

        doNothing().when(mockItemEventListener).onCreateItem(1);
        doNothing().when(mockItemEventListener).onUpdateItem(1);

        itemSynchronizationService.synchronizeItem(1);

        verify(mockItemBankClient).isProjectMonitored(1);
        verify(mockItemEventListener).onCreateItem(1); // no monitoring webhook, so create one
        verify(mockItemEventListener).onUpdateItem(1); // always call update
    }

    @Test
    public void shouldGetAllItemIds() {
        when(mockItemBankClient.getAllItemBankIds())
                .thenReturn(newArrayList(1));

        itemSynchronizationService.getAllItemBankIds();

        verify(mockItemBankClient).getAllItemBankIds();
    }
}
