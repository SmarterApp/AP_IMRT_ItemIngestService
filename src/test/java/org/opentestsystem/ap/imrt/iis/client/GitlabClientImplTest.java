package org.opentestsystem.ap.imrt.iis.client;

import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.ProjectApi;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.systemhooks.ProjectSystemHookEvent;
import org.gitlab4j.api.webhook.EventProject;
import org.gitlab4j.api.webhook.PushEvent;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.service.OperationalEventService;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GitlabClientImplTest {
    @Mock
    private GitLabApi gitLabApi;

    @Mock
    private ItemBankProperties itemBankProperties;

    @Mock
    private ItemEventListener itemEventListener;

    @Mock
    private OperationalEventService operationalEventService;

    // Object under test
    private GitlabClientImpl client;

    @Before
    public void setup() {
        client = new GitlabClientImpl(itemBankProperties, operationalEventService);
        client.setGitLabApi(gitLabApi);
     }

    @Test
    public void testMonitorItem() throws GitLabApiException {
        ProjectApi api = mock(ProjectApi.class);
        when(gitLabApi.getProjectApi()).thenReturn(api);
        int projectId = 55;
        String url = "testUrl";
        when(itemBankProperties.getWebhookUrl()).thenReturn(url);
        client.monitorItem(projectId);
        verify(api, times(1)).addHook(projectId, url, true, false, false);
    }

    @Test
    public void testMonitorItemError() throws GitLabApiException {
        int projectId = 55;
        String url = "testUrl";
        ProjectApi api = mock(ProjectApi.class);
        Exception e = new GitLabApiException("Test");
        when(gitLabApi.getProjectApi()).thenReturn(api);
        when(api.addHook(projectId, url, true, false, false)).thenThrow(e);
        when(itemBankProperties.getWebhookUrl()).thenReturn(url);
        try {
            client.monitorItem(projectId);
        } catch (RuntimeException re) {
            assertEquals(re.getCause(), e);
            verify(api, times(1)).addHook(projectId, url, true, false, false);
            verify(operationalEventService, times(1)).serviceError(any(), eq(e), any(), eq(projectId));
        }
    }

    @Test
    public void testOnProjectCreate() {
        ProjectSystemHookEvent event = new ProjectSystemHookEvent();

        // First case, there is no listener configured. Nothing will happen
        client.onProjectEvent(event);
        verifyZeroInteractions(itemEventListener);

        // Set the listener, but have the wrong type of event, still nothing
        client.setItemEventListener(itemEventListener);
        client.onProjectEvent(event);
        verifyZeroInteractions(itemEventListener);

        // Now the correct type of event, but the wrong group, still nothing
        String group = "testGroup";
        when(itemBankProperties.getGroup()).thenReturn(group);
        Namespace gitGroup = new Namespace();
        gitGroup.setPath("NotTestGroup");
        client.setGroup(gitGroup);
        CreateProjectSystemHookEvent createEvent = new CreateProjectSystemHookEvent();
        createEvent.setPathWithNamespace(group+"rest of path");
        client.onProjectEvent(createEvent);
        verifyZeroInteractions(itemEventListener);

        // Finally, everything should work
        gitGroup.setPath(group);
        int projectId = 77;
        createEvent.setProjectId(projectId);
        client.onProjectEvent(createEvent);
        verify(itemEventListener, times(1)).onCreateItem(projectId);
    }

    @Test
    public void testOnPushEvent() {
        int projectId = 99;
        PushEvent event = new PushEvent();
        EventProject project = new EventProject();
        project.setPathWithNamespace("testGroup/22");
        event.setProject(project);
        event.setProjectId(projectId);

        // First case, there is no listener configured. Nothing will happen
        client.onPushEvent(event);
        verifyZeroInteractions(itemEventListener);

        // Set the listener, but use the wrong branch. Still nothing
        client.setItemEventListener(itemEventListener);
        event.setRef("refs/heads/develop");
        client.onPushEvent(event);
        verifyZeroInteractions(itemEventListener);

        // Finally, use the correct branch
        event.setRef("refs/heads/master");
        client.onPushEvent(event);
        verify(itemEventListener, times(1)).onUpdateItem(projectId);
    }


    /**
     * gitlab4j has a class with this name, but it is private and therefore inaccessible. Create
     * this one so we can pass it into onProjectEvent and have it detect the correct class name
     */
    private static final class CreateProjectSystemHookEvent extends ProjectSystemHookEvent {

    }
}
