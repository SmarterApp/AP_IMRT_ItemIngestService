package org.opentestsystem.ap.imrt.iis.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.AbstractAssessmentItemCore;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.content.StimItemContent;
import org.opentestsystem.ap.imrt.common.model.AttachmentFileTypes;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.ItemLog;
import org.opentestsystem.ap.imrt.iis.builder.TestItemBankItemRevisionBuilder;
import org.opentestsystem.ap.imrt.iis.core.impl.ItemBankMapperImpl;
import org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class ItemBankMapperImplTest {
    private final ObjectMapper objectMapper = new ObjectMapper();
    private static final int itemBankId = 345;
    private static final Instant testTime = Instant.now();
    private static final String gitPath = "gitPath/test";
    private static final String commitHash = "123456";
    private static final Instant commitDate = Instant.now();
    private static final String author = "author";
    private static final boolean isBeingCreated = true;
    private static final String ingestSource = "create_user";

    private ItemBankMapperImpl itemBankMapper;

    @Before
    public void setUp() {
        itemBankMapper = new ItemBankMapperImpl();
    }

    @Test
    public void fromAssessmentItemNoPrevious() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);
        validateEmptyStandardId(revision.getItem());
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromAssessmentItemWithPrevious() throws IOException {
        Item item = getItemFromJsonFile("json/assessment-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        ItemGitInformation existing = new ItemGitInformation();
        ImrtItem existingItem = new ImrtItem();
        existingItem.setKey(777);
        existingItem.setId(Integer.valueOf(item.getId()));
        existingItem.setItemCreatedBy("old author");
        existingItem.setItemCreatedAt(Instant.ofEpochSecond(33));
        existing.setCurrentCommitDate(Instant.ofEpochSecond(55));
        existing.setItem(existingItem);

        ItemRevision revision = runTestCore(item, metadata, existing);

        assertThat(revision.getLinkedStimulusId()).isNotPresent();
        validateEmptyStandardId(revision.getItem());
    }

    @Test
    public void fromStim() throws IOException {
        Item item = getItemFromJsonFile("json/stim.json");
        ItemMetadata metadata = item.getCore().getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        validateEmptyStandardId(revision.getItem());
        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromTutorial() throws IOException {
        Item item = getItemFromJsonFile("json/tutorial.json");

        ItemRevision revision = runTestCore(item, null, null);

        assertThat(revision.getLinkedStimulusId()).isNotPresent();
    }

    @Test
    public void fromAssessmentItemWithLinkedStim() throws IOException {
        Item item = getItemFromJsonFile("json/math-all-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        assertThat(revision.getLinkedStimulusId()).isPresent();
        if (revision.getLinkedStimulusId().isPresent()) {
            assertThat(revision.getLinkedStimulusId().get()).isEqualTo(99);
        }
    }

    @Test
    public void fromElaNoStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = item.getCore().getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void fromElaClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void fromElaTargetOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryTarget("Target");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void fromElaDomainOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryContentDomain("Domain");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void fromElaCoreOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-no-standard-id.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryCommonCoreStandard("Standard");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void elaFullStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/ela-with-standard-id.json");
        ItemMetadata metadata = item.getCore().getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        // standardId should be present
        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathFullStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-all-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();

        ItemRevision revision = runTestCore(item, metadata, null);

        // All 4 standardIds should be present
        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathPrimaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathSecondaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setSecondaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathTertiaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setTertiaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathQuaternaryClaimOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setQuaternaryClaim("Claim");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathAllDomainOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryContentDomain("Domain");
        metadata.setSecondaryContentDomain("Domain");
        metadata.setTertiaryContentDomain("Domain");
        metadata.setQuaternaryContentDomain("Domain");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathAllTargetOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryTarget("Target");
        metadata.setSecondaryTarget("Target");
        metadata.setTertiaryTarget("Target");
        metadata.setQuaternaryTarget("Target");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void mathAllCoreOnlyStandardId() throws IOException {
        Item item = getItemFromJsonFile("json/math-no-standard-ids.json");
        ItemMetadata metadata = item.getCore().getMetadata();
        metadata.setPrimaryCommonCoreStandard("ccs");
        metadata.setSecondaryCommonCoreStandard("ccs");
        metadata.setTertiaryCommonCoreStandard("ccs");
        metadata.setQuaternaryCommonCoreStandard("ccs");

        ItemRevision revision = runTestCore(item, metadata, null);

        validateStandardId(metadata, revision.getItem());
    }

    @Test
    public void shouldHaveTestAdministrationData() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/item_with_admin_data.json");

        ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        BaseItem item = itemRevision.getItem();

        assertThat(item.getFormCount()).isEqualTo(4);
        assertThat(item.getExposuresCount()).isEqualTo(600);
        assertThat(item.getItemDifficultyQuintile()).isEqualTo(5);

        assertThat(item.getForms().size()).isEqualTo(4);
    }

    @Test
    public void shouldHaveContentRequiredData() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/item-with-content-reqd-and-attachments.json");

        ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        BaseItem item = itemRevision.getItem();

        assertThat(item.getAslRequired()).isEqualTo("true");
        assertThat(item.getAslProvided()).isEqualTo("false");
        assertThat(item.getAttachments()).hasSize(3);
        assertThat(item.getAttachments().stream().filter(attachment -> AttachmentFileTypes.ASL.equals(attachment.getAttachmentKey().getFileType())).findAny()).isPresent();
        assertThat(item.getBrailleRequired()).isEqualTo("undetermined");
        assertThat(item.getBrailleProvided()).isEqualTo("false");
        assertThat(item.getAttachments().stream().filter(attachment -> AttachmentFileTypes.BRAILLE.equals(attachment.getAttachmentKey().getFileType())).findAny()).isPresent();
        assertThat(item.getCcRequired()).isEqualTo("true");
        assertThat(item.getCcProvided()).isEqualTo("false");
        assertThat(item.getAttachments().stream().filter(attachment -> AttachmentFileTypes.CC.equals(attachment.getAttachmentKey().getFileType())).findAny()).isPresent();
        assertThat(item.getTranslationRequired()).isEqualTo("true");
        assertThat(item.getTranslationProvided()).isEqualTo("false");
    }

    @Test
    public void shouldHaveOrganizationInfoMappedFromJson() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/good-item-with-org-fields.json");

        ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        assertThat(itemRevision.getItem().getOrganizationName()).isEqualTo("SB");
        assertThat(itemRevision.getItem().getOrganizationTypeId()).isEqualTo("smarterBalanced");
    }

    @Test
    public void shouldIngestTextToSpeechFields() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/good-item.json");

        ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        BaseItem item = itemRevision.getItem();

        assertThat(item.getSightTtsProvided()).isFalse();
        assertThat(item.getVisualTtsProvided()).isFalse();
        assertThat(item.getVisualTtsRequired()).isEqualTo("undetermined");
    }

    @Test
    public void shouldMapContentUpdateNeed() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/content-update-need-item.json");

        ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        BaseItem item = itemRevision.getItem();

        assertThat(item.getContentUpdateNeeds()).hasSize(3);

        assertThat(item.getCurrentUpdateNeedCreateDate()).isNotNull();
        assertThat(item.isUnresolvedUpdateNeed()).isTrue();
        assertThat(item.getCurrentUpdateNeedInternalResolution()).isEqualTo("We're going to ignore this one");
        assertThat(item.getCurrentUpdateNeedInternalResolutionDate()).isNotNull();
        assertThat(item.getCurrentUpdateNeedResolution()).isEqualTo("fixed");
        assertThat(item.getCurrentUpdateNeedResolutionDate()).isNotNull();
    }

    @Test
    public void shouldIngestItemWithDuplicateAslAttachmentFileNames() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/item-with-duplicate-asl-filenames.json");

        assertThat(itemJson.getAsl().getAttachments()).hasSize(2);
        assertThat(itemJson.getAsl().getAttachments().get(0).getFileName())
                .isEqualTo(itemJson.getAsl().getAttachments().get(1).getFileName());

        final ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        BaseItem item = itemRevision.getItem();
        assertThat(item.getAttachments()).hasSize(2);
        assertThat(item.getAttachments().stream().filter(attachment -> AttachmentFileTypes.ASL.equals(attachment.getAttachmentKey().getFileType())).findAny()).isPresent();
    }

    @Test
    public void shouldHaveAslAttachmentsChangedAfterEnglishUpdatedSetToYes() throws IOException {
        // This item.json has an ASL attachment with an uploaded date that occurs after the english last updated date
        final Item itemJson = getItemFromJsonFile("json/item-with-content-reqd-and-attachments.json");

        final ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        final BaseItem item = itemRevision.getItem();

        assertThat(item.getAslUploadedPriorToLastContentUpdate()).isFalse();
        assertThat(item.getBrailleUploadedPriorToLastContentUpdate()).isTrue();
        assertThat(item.getClosedCaptioningUploadedPriorToLastContentUpdate()).isTrue();
    }

    @Test
    public void shouldNotHaveAttachmentsChangedAfterEnglishUpdatedWhenItemHasNoAttachments() throws IOException {
        final Item itemJson = getItemFromJsonFile("json/good-item.json");

        final ItemRevision itemRevision = runTestCore(itemJson, itemJson.getCore().getMetadata(), null);

        final BaseItem item = itemRevision.getItem();

        assertThat(item.getAslUploadedPriorToLastContentUpdate()).isFalse();
        assertThat(item.getBrailleUploadedPriorToLastContentUpdate()).isFalse();
        assertThat(item.getClosedCaptioningUploadedPriorToLastContentUpdate()).isFalse();
    }

    /**
     * Core test method containing common steps for ItemRevision tests. Creates the ItemRevision
     * test object using the supplied parameters, and does basic validation of the result.
     *
     * @param item     item to use in testing
     * @param metadata metadata to use in testing
     * @param existing existing ItemGitInformation to use in testing. May be null
     * @return ItemRevision object generated by the class under test
     */
    private ItemRevision runTestCore(Item item, ItemMetadata metadata, ItemGitInformation existing) {
        ItemBankItemRevision itemBankItemRevision = new TestItemBankItemRevisionBuilder()
                .withItemBankId(itemBankId)
                .withRevisionId(commitHash)
                .withRevisionDate(commitDate)
                .withAuthor(author)
                .withItem(item)
                .withItemBankPath(gitPath)
                .withBeingCreated(isBeingCreated)
                .withIngestSource(ingestSource)
                .build();
        ItemRevision revision = itemBankMapper.map(itemBankItemRevision, existing);
        validateRevisionObjects(revision);
        validateItemGitInfo(revision.getItemGitInformation());
        BaseItem imrtItem = revision.getItem();

        // If no previous entry, key will be null
        if (null == existing) {
            assertThat(imrtItem.getKey()).isNull();
            assertThat(imrtItem.getItemCreatedAt()).isEqualTo(testTime);
            assertThat(imrtItem.getItemCreatedBy()).isEqualTo(author);
            assertThat((imrtItem.getWorkflowStatusSetAt())).isEqualTo(commitDate);
        } else {
            // Since previous entry, some values from the existing imrt item
            assertThat(imrtItem.getKey()).isEqualTo(existing.getItem().getKey());
            assertThat(imrtItem.getItemCreatedAt()).isEqualTo(existing.getItem().getItemCreatedAt());
            assertThat(imrtItem.getItemCreatedBy()).isEqualTo(existing.getItem().getItemCreatedBy());
            assertThat((imrtItem.getWorkflowStatusSetAt())).isEqualTo(existing.getItem().getWorkflowStatusSetAt());
        }
        validateImrtItem(item, metadata, imrtItem);
        validateItemLog(revision.getItemLog(), imrtItem);

        return revision;

    }

    private void validateStandardId(ItemMetadata metadata, BaseItem item) {
        assertThat(item.getPrimaryClaim()).isEqualTo(metadata.getPrimaryClaim());
        assertThat(item.getPrimaryCommonCoreStandard()).isEqualTo(metadata.getPrimaryCommonCoreStandard());
        assertThat(item.getPrimaryTarget()).isEqualTo(metadata.getPrimaryTarget());

        assertThat(item.getPrimaryContentDomain()).isEqualTo(metadata.getPrimaryContentDomain());
        assertThat(item.getSecondaryClaim()).isEqualTo(metadata.getSecondaryClaim());
        assertThat(item.getSecondaryCommonCoreStandard()).isEqualTo(metadata.getSecondaryCommonCoreStandard());
        assertThat(item.getSecondaryTarget()).isEqualTo(metadata.getSecondaryTarget());
        assertThat(item.getSecondaryContentDomain()).isEqualTo(metadata.getSecondaryContentDomain());

        assertThat(item.getTertiaryClaim()).isEqualTo(metadata.getTertiaryClaim());
        assertThat(item.getTertiaryCommonCoreStandard()).isEqualTo(metadata.getTertiaryCommonCoreStandard());
        assertThat(item.getTertiaryTarget()).isEqualTo(metadata.getTertiaryTarget());
        assertThat(item.getTertiaryContentDomain()).isEqualTo(metadata.getTertiaryContentDomain());

        assertThat(item.getQuaternaryClaim()).isEqualTo(metadata.getQuaternaryClaim());
        assertThat(item.getQuaternaryCommonCoreStandard()).isEqualTo(metadata.getQuaternaryCommonCoreStandard());
        assertThat(item.getQuaternaryTarget()).isEqualTo(metadata.getQuaternaryTarget());
        assertThat(item.getQuaternaryContentDomain()).isEqualTo(metadata.getQuaternaryContentDomain());
    }

    private void validateEmptyStandardId(BaseItem item) {
        assertThat(item.getPrimaryClaim()).isEmpty();
        assertThat(item.getPrimaryCommonCoreStandard()).isEmpty();
        assertThat(item.getPrimaryTarget()).isEmpty();
        assertThat(item.getPrimaryContentDomain()).isEmpty();

        assertThat(item.getSecondaryClaim()).isEmpty();
        assertThat(item.getSecondaryCommonCoreStandard()).isEmpty();
        assertThat(item.getSecondaryTarget()).isEmpty();
        assertThat(item.getSecondaryContentDomain()).isEmpty();

        assertThat(item.getTertiaryClaim()).isEmpty();
        assertThat(item.getTertiaryCommonCoreStandard()).isEmpty();
        assertThat(item.getTertiaryTarget()).isEmpty();
        assertThat(item.getTertiaryContentDomain()).isEmpty();

        assertThat(item.getQuaternaryClaim()).isEmpty();
        assertThat(item.getQuaternaryCommonCoreStandard()).isEmpty();
        assertThat(item.getQuaternaryTarget()).isEmpty();
        assertThat(item.getQuaternaryContentDomain()).isEmpty();
    }

    /**
     * Validate an ItemRevision object
     *
     * @param revision the object to validate
     */
    private void validateRevisionObjects(ItemRevision revision) {
        assertThat(revision).isNotNull();
        BaseItem imrtItem = revision.getItem();
        assertThat(imrtItem).isNotNull();
        ItemGitInformation itemGit = revision.getItemGitInformation();
        assertThat(itemGit).isNotNull();
        assertThat(itemGit.getItem()).isEqualTo(imrtItem);
    }

    /**
     * Validate an ItemGitInfo object
     *
     * @param itemGit the object to validate
     */
    private void validateItemGitInfo(ItemGitInformation itemGit) {
        assertThat(itemGit.getProjectId()).isEqualTo(itemBankId);
        assertThat(itemGit.getProjectPath()).isEqualTo(gitPath);
        assertThat(itemGit.getCurrentCommitHash()).isEqualTo(commitHash);
        assertThat(itemGit.getCurrentCommitDate()).isEqualTo(commitDate);
        assertThat(itemGit.getUpdatedBy()).isEqualTo(author);
        assertThat(itemGit.getIngestSource()).isEqualTo(ingestSource);
    }

    /**
     * Validate an ImrtItem object
     *
     * @param item     the expected item
     * @param metadata the expected metadata
     * @param imrtItem the object to validate
     */
    private void validateImrtItem(Item item, ItemMetadata metadata, BaseItem imrtItem) {
        assertThat(imrtItem.getId()).isEqualTo(Integer.valueOf(item.getId()));
        assertThat(imrtItem.getWorkflowStatus()).isEqualTo(item.getWorkflow().getWorkflowStatusCode());
        assertThat(imrtItem.getItemType()).isEqualTo(item.getType());
        assertThat(imrtItem.getUpdatedBy()).isEqualTo(author);
        assertThat(imrtItem.isBeingCreated()).isEqualTo(isBeingCreated);
        assertThat(imrtItem.getEnglishContentLastUpdatedAt()).isEqualTo(item.getCore().getEn().getUpdatedDate().toInstant());
        assertThat(imrtItem.getSpanishContentLastUpdatedAt()).isEqualTo(item.getTranslations().getEsp().getUpdatedDate().toInstant());

        if (item.getCore() instanceof AbstractAssessmentItemCore) {
            String stimulusId = ((AbstractAssessmentItemCore) item.getCore()).getStimulusId();
            if (stimulusId != null) {
                assertThat(imrtItem.getAssociatedStimulusId()).isEqualTo(Integer.valueOf(stimulusId));
            } else {
                assertThat(imrtItem.getAssociatedStimulusId()).isNull();
            }
        }

        if (item instanceof StimItem) {
            StimItemContent englishContent = ((StimItem) item).getCore().getEn();
            StimItemContent spanishContent = ((StimItem) item).getTranslations().getEsp();

            assertThat(imrtItem.getEnglishPassagesCount()).isEqualTo(englishContent.getPassages().size());
            assertThat(imrtItem.getSpanishPassagesCount()).isEqualTo(spanishContent.getPassages().size());
        }

        if (metadata != null) {
            assertThat(imrtItem.getSubject()).isEqualTo(metadata.getSubject());
            assertThat(imrtItem.getGrade()).isEqualTo(metadata.getIntendedGrade());
            assertThat(imrtItem.getDepthOfKnowledge()).isEqualTo(metadata.getDepthOfKnowledge());
            assertThat(imrtItem.getContentTaskModel()).isEqualTo(metadata.getContentTaskModel());
            assertThat(imrtItem.getItemAuthor()).isEqualTo(metadata.getItemAuthor());
            assertThat(imrtItem.getOrganizationTypeId()).isEqualTo(metadata.getOrganizationTypeId());
            assertThat(imrtItem.getOrganizationName()).isEqualTo(metadata.getOrganizationName());
            assertThat(imrtItem.getPerformanceTask()).isEqualTo(metadata.getPerformanceTask());
            assertThat(imrtItem.getWritingPurpose()).isEqualTo(metadata.getWritingPurpose());
            assertThat(imrtItem.getTestCategory()).isEqualTo(metadata.getTestCategory());
            assertThat(imrtItem.getScoringEngine()).isEqualTo(metadata.getScoringEngine());
            assertThat(imrtItem.getAllowCalculator()).isEqualTo(metadata.getAllowCalculator());
        } else {
            assertThat(imrtItem.getSubject()).isBlank();
            assertThat(imrtItem.getGrade()).isBlank();
            assertThat(imrtItem.getDepthOfKnowledge()).isBlank();
            assertThat(imrtItem.getOrganizationTypeId()).isBlank();
            assertThat(imrtItem.getOrganizationName()).isBlank();
        }

        if (item.getGlossary() != null) {
            assertThat(imrtItem.isEnglishGlossaryProvided()).isEqualTo(item.getGlossary().isEnglishGlossaryProvided());
            assertThat(imrtItem.isIllustratedGlossaryProvided()).isEqualTo(item.getGlossary().isIllustratedGlossaryProvided());
            assertThat(imrtItem.getIllustratedGlossaryRequired()).isEqualTo(item.getGlossary().getIllustratedGlossaryRequired());
            assertThat(imrtItem.isTranslatedGlossaryProvided()).isEqualTo(item.getGlossary().isTranslatedGlossaryProvided());
            assertThat(imrtItem.getTranslatedGlossaryRequired()).isEqualTo(item.getGlossary().getTranslatedGlossaryRequired());
        }
    }

    /**
     * Validate an itemLog object
     *
     * @param itemLog the object to validate
     * @param item    the expected ImrtItem
     */
    private void validateItemLog(ItemLog itemLog, BaseItem item) {
        assertThat(itemLog.getItemLogKey().getItem()).isEqualTo(item);
        assertThat(itemLog.getItemLogKey().getCommitHash()).isEqualTo(commitHash);
        assertThat(itemLog.getCommitDate()).isEqualTo(commitDate);
        assertThat(itemLog.getUpdatedBy()).isEqualTo(author);
        assertThat(itemLog.getIngestSource()).isEqualTo(ingestSource);
    }

    /**
     * Parse and Item from a json file
     *
     * @param filePath The path of the file, relative to src/test/resources
     * @return The parsed item
     * @throws IOException If something goes wrong
     */
    private Item getItemFromJsonFile(String filePath) throws IOException {
        URL url = getClass().getClassLoader().getResource(filePath);
        assertThat(url).isNotNull();
        return objectMapper.readValue(Files.readAllBytes(Paths.get(url.getPath())), AbstractItem.class);
    }
}
