package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.rest.item.ItemEntityResponse;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.model.ItemMigrationResponse;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemIngestService;
import org.opentestsystem.ap.imrt.iis.service.ItemMigrationService;
import org.opentestsystem.ap.imrt.iis.service.ItemService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Collections;
import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemMigrationServiceImplTest {
    @Mock
    private ItemIngestServiceProperties mockItemIngestServiceProperties;

    @Mock
    private ItemIngestService mockItemIngestService;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private Page<BaseItem> baseItemPage;

    @Mock
    private BaseItemRepository baseItemRepository;

    @Mock
    private ItemService itemService;

    @Mock
    private ItemDeleteNotificationHandler itemDeleteNotificationHandler;

    @Mock
    private ItemEventListener itemEventListener;

    private ItemMigrationService itemMigrationService;

    @Before
    public void setup() {
        when(mockItemIngestServiceProperties.getImrtPageQueryLimit()).thenReturn(100);
        itemMigrationService = new ItemMigrationServiceImpl(
                mockItemIngestService,
                mockItemIngestServiceProperties,
                mockOperationalEventService, baseItemRepository, itemService, itemDeleteNotificationHandler, itemEventListener);
    }

    @Test
    @Ignore
    public void shouldMigrateItems() {
        final Pageable pageRequest = new PageRequest(0, mockItemIngestServiceProperties.getImrtPageQueryLimit());

        BaseItem item = new ImrtItemBuilder().build();

        UUID commitId = UUID.randomUUID();

        when(baseItemPage.getContent()).thenReturn(Collections.singletonList(item));
        when(baseItemPage.hasNext()).thenReturn(false);
        when(baseItemRepository.findAll(pageRequest)).thenReturn(baseItemPage);
        when(mockItemIngestService.syncItemWithLatestRevision(isA(ItemUpdateEvent.class))).thenReturn(true);

        ItemEntityResponse response = new ItemEntityResponse();
        response.setId(commitId);
        when(itemService.findLatestItemEntityByItemId(item.getId())).thenReturn(Optional.of(response));

        ItemMigrationResponse migrationResponse = itemMigrationService.migrateAllExistingItems();

        assertThat(migrationResponse.getNumberOfErrors()).isEqualTo(0);
        assertThat(migrationResponse.getNumberOfItembankIds()).isEqualTo(1);

        verify(baseItemPage).getContent();
        verify(baseItemPage).hasNext();
        verify(baseItemRepository).findAll(pageRequest);
        verify(mockItemIngestService).syncItemWithLatestRevision(isA(ItemUpdateEvent.class));
    }

    @Test
    @Ignore
    public void shouldMigrateMultiplePagesOfItems() {
        final Pageable pageRequest = new PageRequest(0, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final Pageable nextPageRequest = new PageRequest(1, mockItemIngestServiceProperties.getImrtPageQueryLimit());

        UUID commitId = UUID.randomUUID();

        BaseItem item = new ImrtItemBuilder().build();

        when(baseItemPage.getContent())
                .thenReturn(Collections.singletonList(item));
        when(baseItemPage.hasNext())
                .thenReturn(true, false);
        when(baseItemPage.nextPageable())
                .thenReturn(nextPageRequest);
        when(baseItemRepository.findAll(isA(PageRequest.class)))
                .thenReturn(baseItemPage);
        when(mockItemIngestService.syncItemWithLatestRevision(isA(ItemUpdateEvent.class))).thenReturn(true);

        ItemEntityResponse response = new ItemEntityResponse();
        response.setId(commitId);
        when(itemService.findLatestItemEntityByItemId(item.getId())).thenReturn(Optional.of(response));

        final ItemMigrationResponse result = itemMigrationService.migrateAllExistingItems();

        assertThat(result.getNumberOfItembankIds()).isEqualTo(2);
        assertThat(result.getNumberOfErrors()).isEqualTo(0);

        verify(baseItemPage, times(2)).getContent();
        verify(baseItemPage, times(2)).nextPageable();
        verify(baseItemPage, times(2)).hasNext();
        verify(baseItemRepository).findAll(pageRequest);
        verify(baseItemRepository).findAll(nextPageRequest);
        verify(mockItemIngestService, times(2)).syncItemWithLatestRevision(isA(ItemUpdateEvent.class));
    }

    @Test
    @Ignore
    public void shouldContinueMigratingItemsWhenAnExceptionIsThrownFromMigrateItem() {
        final Pageable pageRequest = new PageRequest(0, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final Pageable nextPageRequest = new PageRequest(1, mockItemIngestServiceProperties.getImrtPageQueryLimit());

        BaseItem item = new ImrtItemBuilder().build();

        when(baseItemPage.getContent())
                .thenReturn(Collections.singletonList(item));
        when(baseItemPage.hasNext())
                .thenReturn(true, false);
        when(baseItemPage.nextPageable())
                .thenReturn(nextPageRequest);
        when(baseItemRepository.findAll(isA(PageRequest.class)))
                .thenReturn(baseItemPage);
        when(mockItemIngestService.syncItemWithLatestRevision(isA(ItemUpdateEvent.class)))
                .thenReturn(true);

        ItemEntityResponse response = new ItemEntityResponse();
        response.setId(UUID.randomUUID());
        when(itemService.findLatestItemEntityByItemId(item.getId()))
                .thenThrow(new RuntimeException("Fail"))
                .thenReturn(Optional.of(response));

        final ItemMigrationResponse result = itemMigrationService.migrateAllExistingItems();

        verify(baseItemPage, times(2)).getContent();
        verify(baseItemPage, times(2)).nextPageable();
        verify(baseItemPage, times(2)).hasNext();
        verify(baseItemRepository).findAll(pageRequest);
        verify(baseItemRepository).findAll(nextPageRequest);
        verify(mockItemIngestService).syncItemWithLatestRevision(isA(ItemUpdateEvent.class));

        assertThat(result.getNumberOfItembankIds()).isEqualTo(1);
        assertThat(result.getNumberOfErrors()).isEqualTo(1);
    }
}
