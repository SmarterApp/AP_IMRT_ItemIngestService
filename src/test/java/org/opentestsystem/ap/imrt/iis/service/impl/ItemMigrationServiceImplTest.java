package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.ItemGitInformation;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ItemGitInformationBuilder;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.model.ItemMigrationResponse;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemIngestService;
import org.opentestsystem.ap.imrt.iis.service.ItemMigrationService;
import org.opentestsystem.ap.imrt.iis.service.ItemService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Collections;
import java.util.UUID;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemMigrationServiceImplTest {
    @Mock
    private ItemIngestServiceProperties mockItemIngestServiceProperties;

    @Mock
    private ItemGitInformationRepository mockItemGitInformationRepository;

    @Mock
    private ItemIngestService mockItemIngestService;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private Page<ItemGitInformation> mockItemGitInformationPage;

    @Mock
    private BaseItemRepository baseItemRepository;

    @Mock
    private ItemService itemService;

    private ItemMigrationService itemMigrationService;

    @Before
    public void setup() {
        when(mockItemIngestServiceProperties.getImrtPageQueryLimit()).thenReturn(100);
        itemMigrationService = new ItemMigrationServiceImpl(
                mockItemIngestService,
                mockItemIngestServiceProperties,
                mockOperationalEventService, baseItemRepository, itemService);
    }

    @Test
    public void shouldMigrateItems() {
        final Pageable pageRequest = new PageRequest(0, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final ItemGitInformation itemGitInformation = new ItemGitInformationBuilder().build();

        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(1, UUID.randomUUID());

        when(mockItemGitInformationPage.getContent())
                .thenReturn(Collections.singletonList(itemGitInformation));
        when(mockItemGitInformationPage.hasNext()).thenReturn(false);
        when(mockItemGitInformationRepository.findAll(pageRequest))
                .thenReturn(mockItemGitInformationPage);
        when(mockItemIngestService.syncItemWithLatestRevision(itemUpdateEvent)).thenReturn(true);

        itemMigrationService.migrateAllExistingItems();

        verify(mockItemGitInformationPage).getContent();
        verify(mockItemGitInformationPage).hasNext();
        verify(mockItemGitInformationRepository).findAll(pageRequest);
        verify(mockItemIngestService).syncItemWithLatestRevision(itemUpdateEvent);
    }

    @Test
    public void shouldMigrateMultiplePagesOfItems() {
        final Pageable pageRequest = new PageRequest(0, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final Pageable nextPageRequest = new PageRequest(1, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final ItemGitInformation itemGitInformation = new ItemGitInformationBuilder().build();

        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(1, UUID.randomUUID());

        when(mockItemGitInformationPage.getContent())
                .thenReturn(Collections.singletonList(itemGitInformation));
        when(mockItemGitInformationPage.hasNext())
                .thenReturn(true, false);
        when(mockItemGitInformationPage.nextPageable())
                .thenReturn(nextPageRequest);
        when(mockItemGitInformationRepository.findAll(isA(PageRequest.class)))
                .thenReturn(mockItemGitInformationPage);
        when(mockItemIngestService.syncItemWithLatestRevision(itemUpdateEvent)).thenReturn(true);

        final ItemMigrationResponse result = itemMigrationService.migrateAllExistingItems();

        verify(mockItemGitInformationPage, times(2)).getContent();
        verify(mockItemGitInformationPage, times(2)).nextPageable();
        verify(mockItemGitInformationPage, times(2)).hasNext();
        verify(mockItemGitInformationRepository).findAll(pageRequest);
        verify(mockItemGitInformationRepository).findAll(nextPageRequest);
        verify(mockItemIngestService, times(2)).syncItemWithLatestRevision(isA(ItemUpdateEvent.class));

        assertThat(result.getNumberOfItembankIds()).isEqualTo(2);
        assertThat(result.getNumberOfErrors()).isEqualTo(0);
    }

    @Test
    public void shouldContinueMigratingItemsWhenAnExceptionIsThrownFromMigrateItem() {
        final Pageable pageRequest = new PageRequest(0, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final Pageable nextPageRequest = new PageRequest(1, mockItemIngestServiceProperties.getImrtPageQueryLimit());
        final ItemGitInformation itemGitInformation = new ItemGitInformationBuilder().build();

        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(1, UUID.randomUUID());

        when(mockItemGitInformationPage.getContent())
                .thenReturn(Collections.singletonList(itemGitInformation));
        when(mockItemGitInformationPage.hasNext())
                .thenReturn(true, false);
        when(mockItemGitInformationPage.nextPageable())
                .thenReturn(nextPageRequest);
        when(mockItemGitInformationRepository.findAll(isA(PageRequest.class)))
                .thenReturn(mockItemGitInformationPage);
        when(mockItemIngestService.syncItemWithLatestRevision(itemUpdateEvent))
                .thenThrow(new RuntimeException());

        final ItemMigrationResponse result = itemMigrationService.migrateAllExistingItems();

        verify(mockItemGitInformationPage, times(2)).getContent();
        verify(mockItemGitInformationPage, times(2)).nextPageable();
        verify(mockItemGitInformationPage, times(2)).hasNext();
        verify(mockItemGitInformationRepository).findAll(pageRequest);
        verify(mockItemGitInformationRepository).findAll(nextPageRequest);
        verify(mockItemIngestService, times(2)).syncItemWithLatestRevision(isA(ItemUpdateEvent.class));

        assertThat(result.getNumberOfItembankIds()).isEqualTo(1);
        assertThat(result.getNumberOfErrors()).isEqualTo(1);
    }
}
