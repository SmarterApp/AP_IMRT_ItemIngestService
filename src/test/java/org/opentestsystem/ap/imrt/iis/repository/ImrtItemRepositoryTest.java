package org.opentestsystem.ap.imrt.iis.repository;

import org.junit.Test;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.imrt.iis.BaseIntegrationTest;
import org.opentestsystem.ap.imrt.iis.model.ImrtItem;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class ImrtItemRepositoryTest extends BaseIntegrationTest {

    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Test
    public void shouldCreateItem() {
        ImrtItem imrtItem = new TestImrtItemBuilder().build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findOne(imrtItem.getKey()));
    }

    @Test
    public void shouldCreateItemWithBlankFields() {
        // TODO clean this up when we re-do the builders
        ImrtItem imrtItem = new ImrtItem();
        imrtItem.setId("test id");
        imrtItem.setWorkflowStatus("wf status");
        imrtItem.setItemType("item type");
        imrtItem.setItemCreatedBy("me");
        imrtItem.setItemCreatedAt(Instant.now());
        imrtItem.setItemJson(new StimItem("test stim"));
        imrtItem.setUpdatedBy("me");
        imrtItem = imrtItemRepository.save(imrtItem);
        assertThat(imrtItem.getDepthOfKnowledge()).isEqualTo("");
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findOne(imrtItem.getKey()));
    }

    @Test
    public void shouldFindById() {
        ImrtItem imrtItem = new TestImrtItemBuilder().build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findById(imrtItem.getId()));
    }

    @Test
    public void shouldNotFindById() {
        ImrtItem imrtItem = new TestImrtItemBuilder().build();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItemRepository.findById(imrtItem.getId()+"xxx")).isNull();

    }

    @Test
    public void shouldUpdateItem() {
        ImrtItem imrtItem = new TestImrtItemBuilder().build();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);
        Instant originalUpdatedAt = imrtItem.getUpdatedAt();

        ImrtItem updatedItem = imrtItemRepository.findOne(imrtItem.getKey());
        updatedItem.setSubject("differentSubject");
        updatedItem.setItemType("differentType");
        imrtItemRepository.save(updatedItem);

        // There should still be only one item in the DB after the update
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(1);
        // If we do a read, we should get back a new object with the updated fields
        // Updated at will be later, and the parsed Item object from the itemJson field will be different
        ImrtItem readItem = imrtItemRepository.findOne(imrtItem.getKey());
        assertThat(originalUpdatedAt).isBefore(readItem.getUpdatedAt());
        assertThat(updatedItem.getSubject()).isEqualTo(readItem.getSubject());
        assertThat(updatedItem.getItemType()).isEqualTo(readItem.getItemType());
        assertThat(updatedItem.getCreatedAt()).isEqualTo(readItem.getCreatedAt());
        assertThat(updatedItem.getGrade()).isEqualTo(readItem.getGrade());
    }

    @Test
    public void shouldDeleteItem() {
        ImrtItem imrtItem = new TestImrtItemBuilder().build();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);
        // There should be one item in the DB after the save
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(1);
        imrtItemRepository.delete(imrtItem.getKey());
        // There should be no items in the DB after the delete
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(0);

    }
}
