package org.opentestsystem.ap.imrt.iis.repository;

import org.junit.Test;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.imrt.iis.BaseIntegrationTest;
import org.opentestsystem.ap.imrt.iis.model.ImrtItem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;

import static org.assertj.core.api.Assertions.assertThat;

public class ImrtItemRepositoryTest extends BaseIntegrationTest {

    @Autowired
    private ImrtItemRepository imrtItemRepository;

    @Test
    public void shouldCreateItem() {
        ImrtItem imrtItem = generateItem();
        // After a successful save, the returned object should be equal to the original object
        assertThat(imrtItem).isEqualTo(imrtItemRepository.save(imrtItem));
        // If we do a read, we should get back a new object with the same fields
        assertThat(imrtItem).isEqualToComparingFieldByFieldRecursively(imrtItemRepository.findOne(imrtItem.getKey()));
    }

    @Test
    public void shouldUpdateItem() {
        ImrtItem imrtItem = generateItem();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);
        ImrtItem updatedItem = imrtItemRepository.findOne(imrtItem.getKey());
        updatedItem.setSubject("differentSubject");
        updatedItem.setItemType("differentType");
        imrtItemRepository.save(updatedItem);

        // There should still be only one item in the DB after the update
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(1);
        // If we do a read, we should get back a new object with the updated fields
        // Updated at will be later, and the parsed Item object from the itemJson field will be different
        ImrtItem readItem = imrtItemRepository.findOne(imrtItem.getKey());
        assertThat(updatedItem.getUpdatedAt()).isBefore(readItem.getUpdatedAt());
        assertThat(updatedItem.getSubject()).isEqualTo(readItem.getSubject());
        assertThat(updatedItem.getItemType()).isEqualTo(readItem.getItemType());
        assertThat(updatedItem.getCreatedAt()).isEqualTo(readItem.getCreatedAt());
        assertThat(updatedItem.getGrade()).isEqualTo(readItem.getGrade());
    }

    @Test
    public void shouldDeleteItem() {
        ImrtItem imrtItem = generateItem();
        // Save the item to the DB
        imrtItemRepository.save(imrtItem);
        // There should be one item in the DB after the save
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(1);
        imrtItemRepository.delete(imrtItem.getKey());
        // There should be no items in the DB after the delete
        assertThat(imrtItemRepository.findAll().size()).isEqualTo(0);

    }
}
