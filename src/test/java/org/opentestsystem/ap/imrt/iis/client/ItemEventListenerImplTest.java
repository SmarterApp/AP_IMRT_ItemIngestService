package org.opentestsystem.ap.imrt.iis.client;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;
import org.opentestsystem.ap.imrt.iis.service.ItemWorkQueueService;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;

@RunWith(MockitoJUnitRunner.class)
public class ItemEventListenerImplTest {

    @Mock
    private ItemBankClient itemBankClient;

    @Mock
    private ItemWorkQueueService itemWorkQueueService;

    @Mock
    private OperationalEventService operationalEventService;

    // Class under test
    private ItemEventListener listener;

    @Before
    public void setup() {
        listener = new ItemEventListenerImpl(operationalEventService, itemBankClient, itemWorkQueueService, new ItemIngestServiceProperties());
    }

    @Test
    public void testOnItemCreate() {
        int itemBankId = 33;
        listener.onCreateItem(itemBankId);
        verify(itemBankClient).monitorItem(itemBankId);
        verify(itemWorkQueueService).sendItemUpdateMessage(itemBankId);
        verify(operationalEventService).itemMonitoredEvent(any(), eq(itemBankId));
    }

    @Test
    public void testOnItemUpdate() {
        int itemBankId = 55;

        listener.onUpdateItem(itemBankId);
        verify(itemWorkQueueService).sendItemUpdateMessage(itemBankId);
    }

    @Test
    public void testOnItemDelete() {
        final int itemBankId = 42;

        listener.onDeleteItem(itemBankId);
        verify(itemWorkQueueService).sendItemDeleteMessage(itemBankId);
    }

    @Test
    public void shouldLogExceptionInOnCreateItem() {
        final int itemBankId = 33;
        final GitLabApiRuntimeException mockException = new GitLabApiRuntimeException("something awful happened");

        doThrow(mockException)
                .when(itemBankClient).monitorItem(itemBankId);

        listener.onCreateItem(itemBankId);
        verify(itemBankClient).monitorItem(itemBankId);
        verifyZeroInteractions(itemWorkQueueService);
        verify(operationalEventService).error(any(), eq(mockException), eq("error attempting to create item with itemBankId {}"), eq(itemBankId));
        verify(operationalEventService, never()).itemMonitoredEvent(any(), eq(itemBankId));
    }
}
