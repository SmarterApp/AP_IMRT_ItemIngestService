package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.ValidationResult;
import org.opentestsystem.ap.common.model.ValidationResults;
import org.opentestsystem.ap.imrt.common.exception.NotFoundException;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.repository.ValidationResultsRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.builder.ItemGitInformationBuilder;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;

import java.util.Collections;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemValidationServiceImplTest {
    @Mock
    private ValidationResultsRepository mockValidationResultsRepository;

    @Mock
    private ItemGitInformationRepository mockItemGitInformationRepository;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemTabulatorRepository mockItemTabulatorRepository;

    @Captor
    private ArgumentCaptor<Iterable<org.opentestsystem.ap.imrt.common.model.ValidationResult>> validationResultsCaptor;

    private ItemIngestServiceProperties itemIngestServiceProperties;

    private ItemValidationServiceImpl itemValidationService;

    @Before
    public void setUp() {
        itemIngestServiceProperties = new ItemIngestServiceProperties();
        itemValidationService = new ItemValidationServiceImpl(mockValidationResultsRepository, mockItemGitInformationRepository, mockOperationalEventService, mockItemTabulatorRepository, itemIngestServiceProperties);
    }

    @Test
    public void shouldValidateItem() {
        ImrtItem item = new ImrtItemBuilder().build();
        ItemGitInformation itemGitInformation = new ItemGitInformationBuilder()
                .withProjectId(1)
                .withItem(item)
                .build();

        ValidationResults results = new ValidationResults();
        ValidationResult result = new ValidationResult();
        result.setCategory("cat");
        result.setDetail("item isn't valid");
        result.setItemId(String.valueOf(item.getId()));
        result.setItemType(item.getItemType());
        result.setMessage("message");
        result.setSeverity("severe");
        results.setValidationResults(Collections.singletonList(result));

        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.of(itemGitInformation));
        when(mockItemTabulatorRepository.getValidationResults(item.getId())).thenReturn(Optional.of(results));

        itemValidationService.validateItem(1);

        verify(mockValidationResultsRepository).deleteAllByItem(item);
        verify(mockValidationResultsRepository).save(validationResultsCaptor.capture());

        assertThat(validationResultsCaptor.getValue()).hasSize(1);

        org.opentestsystem.ap.imrt.common.model.ValidationResult validationResult = validationResultsCaptor.getValue().iterator().next();

        assertThat(validationResult.getCategory()).isEqualTo(result.getCategory());
        assertThat(validationResult.getDetail()).isEqualTo(result.getDetail());
        assertThat(validationResult.getItem()).isEqualTo(item);
        assertThat(validationResult.getValidationItemId()).isEqualTo(result.getItemId());
        assertThat(validationResult.getValidationItemType()).isEqualTo(result.getItemType());
        assertThat(validationResult.getMessage()).isEqualTo(result.getMessage());
        assertThat(validationResult.getSeverity()).isEqualTo(result.getSeverity());
    }

    @Test(expected = NotFoundException.class)
    public void shouldIgnoreItemsWithoutGitInformation() {
        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.empty());

        itemValidationService.validateItem(1);
    }

    @Test(expected = NotFoundException.class)
    public void shouldThrownWhenItemValidationResultsNotFound() {
        ImrtItem item = new ImrtItemBuilder().build();
        ItemGitInformation itemGitInformation = new ItemGitInformationBuilder()
                .withProjectId(1)
                .withItem(item)
                .build();

        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.of(itemGitInformation));
        when(mockItemTabulatorRepository.getValidationResults(item.getId())).thenReturn(Optional.empty());

        itemValidationService.validateItem(1);
    }
}