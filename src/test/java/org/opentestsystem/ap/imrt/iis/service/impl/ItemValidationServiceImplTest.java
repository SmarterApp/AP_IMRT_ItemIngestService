package org.opentestsystem.ap.imrt.iis.service.impl;

import org.assertj.core.util.Sets;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.opentestsystem.ap.common.model.ValidationResult;
import org.opentestsystem.ap.common.model.ValidationResults;
import org.opentestsystem.ap.imrt.common.exception.NotFoundException;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.repository.BaseItemRepository;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.common.repository.StimulusRepository;
import org.opentestsystem.ap.imrt.common.repository.ValidationResultsRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.builder.ItemGitInformationBuilder;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;
import org.opentestsystem.ap.imrt.iis.service.ProjectLockService;

import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemValidationServiceImplTest {
    @Mock
    private ValidationResultsRepository mockValidationResultsRepository;

    @Mock
    private ItemGitInformationRepository mockItemGitInformationRepository;

    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemTabulatorRepository mockItemTabulatorRepository;

    @Mock
    private BaseItemRepository mockBaseItemRepository;

    @Mock
    private ImrtItemRepository mockImrtItemRepository;

    @Mock
    private StimulusRepository mockStimulusRepository;

    @Mock
    private ProjectLockService mockProjectLockService;

    @Captor
    private ArgumentCaptor<Iterable<org.opentestsystem.ap.imrt.common.model.ValidationResult>> validationResultsCaptor;

    @Captor
    private ArgumentCaptor<ImrtItem> itemCaptor;

    private ItemValidationServiceImpl itemValidationService;

    @Before
    public void setUp() {
        ItemIngestServiceProperties itemIngestServiceProperties = new ItemIngestServiceProperties();
        itemValidationService = new ItemValidationServiceImpl(mockValidationResultsRepository,
                mockItemGitInformationRepository,
                mockOperationalEventService,
                mockItemTabulatorRepository,
                itemIngestServiceProperties,
                mockProjectLockService,
                mockBaseItemRepository,
                mockImrtItemRepository,
                mockStimulusRepository);
    }

    @Test
    public void shouldValidateItem() {
        ImrtItem item = new ImrtItemBuilder().build();
        ItemGitInformation itemGitInformation = new ItemGitInformationBuilder()
                .withProjectId(1)
                .withItem(item)
                .withIngestSource("master")
                .build();

        ValidationResults results = new ValidationResults();
        ValidationResult result = new ValidationResult();
        result.setCategory("cat");
        result.setDetail("item isn't valid");
        result.setItemId(String.valueOf(item.getId()));
        result.setItemType(item.getItemType());
        result.setMessage("message");
        result.setSeverity("severe");
        results.setValidationResults(Collections.singletonList(result));

        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.of(itemGitInformation));
        when(mockItemTabulatorRepository.getValidationResults(item.getId(), "master")).thenReturn(Optional.of(results));
        when(mockProjectLockService.lockProject(itemGitInformation.getProjectId())).thenReturn(42L);

        // Simulate fetching the baseitem after the ValidationResults have been saved.
        when(mockBaseItemRepository.findById(itemGitInformation.getItem().getId())).thenAnswer((Answer<BaseItem>) invocation -> {
            org.opentestsystem.ap.imrt.common.model.ValidationResult imrtValidationResult = new org.opentestsystem.ap.imrt.common.model.ValidationResult();
            imrtValidationResult.setCategory(result.getCategory());
            imrtValidationResult.setDetail(result.getDetail());
            imrtValidationResult.setItem(item);
            imrtValidationResult.setMessage(result.getMessage());
            imrtValidationResult.setSeverity(result.getSeverity());
            imrtValidationResult.setKey(42);
            imrtValidationResult.setValidationItemType(result.getItemType());

            item.setValidationResults(Sets.newHashSet(Collections.singletonList(imrtValidationResult)));

            return item;
        });
        when(mockImrtItemRepository.save(item)).thenReturn(item);

        itemValidationService.validateItem(1);

        verify(mockValidationResultsRepository).deleteAllByItem(item);
        verify(mockValidationResultsRepository).save(validationResultsCaptor.capture());
        verify(mockProjectLockService).lockProject(itemGitInformation.getProjectId());
        verify(mockBaseItemRepository).findById(itemGitInformation.getItem().getId());
        verify(mockImrtItemRepository).save(itemCaptor.capture());
        verifyZeroInteractions(mockStimulusRepository);
        verify(mockProjectLockService).unlockProject(itemGitInformation.getProjectId(), 42L);

        assertThat(validationResultsCaptor.getValue()).hasSize(1);

        org.opentestsystem.ap.imrt.common.model.ValidationResult validationResult = validationResultsCaptor.getValue().iterator().next();
        final ImrtItem itemWithValidationErrorCounts = itemCaptor.getValue();

        assertThat(validationResult.getCategory()).isEqualTo(result.getCategory());
        assertThat(validationResult.getDetail()).isEqualTo(result.getDetail());
        assertThat(validationResult.getItem()).isEqualTo(item);
        assertThat(validationResult.getValidationItemId()).isEqualTo(result.getItemId());
        assertThat(validationResult.getValidationItemType()).isEqualTo(result.getItemType());
        assertThat(validationResult.getMessage()).isEqualTo(result.getMessage());
        assertThat(validationResult.getSeverity()).isEqualTo(result.getSeverity());
        assertThat(itemWithValidationErrorCounts.getSevereValidationResultCount()).isEqualTo(1);
    }

    @Test
    public void shouldNotUpdateValidationErrorCountsWhenThereAreNoValidationErrors() {
        ImrtItem item = new ImrtItemBuilder().build();
        ItemGitInformation itemGitInformation = new ItemGitInformationBuilder()
                .withProjectId(1)
                .withItem(item)
                .withIngestSource("master")
                .build();
        final ValidationResults validationResults = new ValidationResults();
        validationResults.setValidationResults(Collections.emptyList());

        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.of(itemGitInformation));
        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.of(itemGitInformation));
        when(mockItemTabulatorRepository.getValidationResults(item.getId(), "master")).thenReturn(Optional.of(validationResults));

        itemValidationService.validateItem(1);

        verify(mockValidationResultsRepository).deleteAllByItem(item);
        verify(mockValidationResultsRepository, never()).save(validationResultsCaptor.capture());
        verifyZeroInteractions(mockProjectLockService);
        verifyZeroInteractions(mockImrtItemRepository);
        verifyZeroInteractions(mockStimulusRepository);
    }

    @Test(expected = NotFoundException.class)
    public void shouldIgnoreItemsWithoutGitInformation() {
        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.empty());

        itemValidationService.validateItem(1);
    }

    @Test(expected = NotFoundException.class)
    public void shouldThrownWhenItemValidationResultsNotFound() {
        ImrtItem item = new ImrtItemBuilder().build();
        ItemGitInformation itemGitInformation = new ItemGitInformationBuilder()
                .withProjectId(1)
                .withItem(item)
                .withIngestSource("master")
                .build();

        when(mockItemGitInformationRepository.findOneByProjectId(1)).thenReturn(Optional.of(itemGitInformation));
        when(mockItemTabulatorRepository.getValidationResults(item.getId(), "master")).thenReturn(Optional.empty());

        itemValidationService.validateItem(1);
    }
}