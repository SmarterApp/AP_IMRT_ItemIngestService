package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.opentestsystem.ap.common.imrt.exception.NotFoundException;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.repository.ValidationResultsRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.model.ValidationResult;
import org.opentestsystem.ap.common.model.ValidationResults;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.ItemRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;

import java.util.Collections;
import java.util.Optional;

import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemValidationServiceImplTest {
    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemTabulatorRepository mockItemTabulatorRepository;

    @Mock
    private BaseItemRepository mockBaseItemRepository;

    @Mock
    private ValidationResultsRepository validationResultsRepository;

    @Mock
    private ItemRepository itemRepository;

    private ItemValidationServiceImpl itemValidationService;

    @Before
    public void setUp() {
        ItemIngestServiceProperties itemIngestServiceProperties = new ItemIngestServiceProperties();
        itemValidationService = new ItemValidationServiceImpl(
                mockOperationalEventService,
                mockItemTabulatorRepository,
                itemIngestServiceProperties,
                validationResultsRepository,
                itemRepository, mockBaseItemRepository);
    }

    @Test
    public void shouldValidateItem() {
        ImrtItem item = new ImrtItemBuilder().withKey(1).build();

        ValidationResults results = new ValidationResults();
        ValidationResult result = new ValidationResult();
        result.setCategory("cat");
        result.setDetail("item isn't valid");
        result.setItemId(String.valueOf(item.getId()));
        result.setItemType(item.getItemType());
        result.setMessage("message");
        result.setSeverity("severe");
        results.setValidationResults(Collections.singletonList(result));

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId(), "master")).thenReturn(Optional.of(results));

        // Simulate fetching the baseitem after the ValidationResults have been saved.
        when(mockBaseItemRepository.findById(1)).thenAnswer((Answer<BaseItem>) invocation -> {
            org.opentestsystem.ap.common.imrt.model.ValidationResult imrtValidationResult = new org.opentestsystem.ap.common.imrt.model.ValidationResult();
            imrtValidationResult.setCategory(result.getCategory());
            imrtValidationResult.setDetail(result.getDetail());
            imrtValidationResult.setItem(item);
            imrtValidationResult.setMessage(result.getMessage());
            imrtValidationResult.setSeverity(result.getSeverity());
            imrtValidationResult.setKey(42);
            imrtValidationResult.setValidationItemType(result.getItemType());

            return item;
        });

        itemValidationService.validateItem(1);

        verify(validationResultsRepository).deleteByItemKey(item.getKey());
        verify(itemRepository).updateValidationCounts(1, 1, 0, 0, 0);
    }

    @Test
    public void shouldNotUpdateValidationErrorCountsWhenThereAreNoValidationErrors() {
        ImrtItem item = new ImrtItemBuilder().withKey(1).build();
        final ValidationResults validationResults = new ValidationResults();
        validationResults.setValidationResults(Collections.emptyList());

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId(), "master")).thenReturn(Optional.of(validationResults));
        when(mockBaseItemRepository.findById(item.getId())).thenReturn(item);

        itemValidationService.validateItem(1);

        verify(validationResultsRepository).deleteByItemKey(item.getKey());
        verify(itemRepository).updateValidationCounts(1, 0, 0, 0, 0);
    }

    @Test(expected = NotFoundException.class)
    public void shouldIgnoreItemsWithoutGitInformation() {
        when(mockBaseItemRepository.findById(1)).thenReturn(null);

        itemValidationService.validateItem(1);
    }

    @Test(expected = NotFoundException.class)
    public void shouldThrownWhenItemValidationResultsNotFound() {
        ImrtItem item = new ImrtItemBuilder().build();

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId(), "master")).thenReturn(Optional.empty());

        itemValidationService.validateItem(1);
    }
}