package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.model.validation.ValidationResult;
import org.opentestsystem.ap.common.model.validation.ValidationResults;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.model.ValidationResultDto;
import org.opentestsystem.ap.imrt.iis.repository.ItemRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;
import org.opentestsystem.ap.imrt.iis.repository.ValidationResultRepository;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemValidationServiceImplTest {
    @Mock
    private OperationalEventService mockOperationalEventService;

    @Mock
    private ItemTabulatorRepository mockItemTabulatorRepository;

    @Mock
    private BaseItemRepository mockBaseItemRepository;

    @Mock
    private ItemRepository itemRepository;

    @Mock
    private ValidationResultRepository validationResultRepository;

    @Captor
    private ArgumentCaptor<Collection<ValidationResultDto>> dtoCaptor;

    @Captor
    private ArgumentCaptor<Iterable<Integer>> deleteKeyCaptor;

    private ItemValidationServiceImpl itemValidationService;

    @Before
    public void setUp() {
        ItemIngestServiceProperties itemIngestServiceProperties = new ItemIngestServiceProperties();
        itemValidationService = new ItemValidationServiceImpl(
                mockOperationalEventService,
                mockItemTabulatorRepository,
                itemIngestServiceProperties,
                itemRepository, mockBaseItemRepository, validationResultRepository);
    }

    @Test
    public void shouldValidateItemWithNoErrors() {
        ImrtItem item = new ImrtItemBuilder().withKey(1).build();

        ValidationResults results = new ValidationResults();
        ValidationResult result = new ValidationResult();
        result.setCategory("cat");
        result.setDetail("item isn't valid");
        result.setItemId(String.valueOf(item.getId()));
        result.setItemType(item.getItemType());
        result.setMessage("message");
        result.setSeverity("severe");
        results.setValidationResults(Collections.singletonList(result));

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId())).thenReturn(Optional.of(results));

        // Simulate fetching the baseitem after the ValidationResults have been saved.
        when(mockBaseItemRepository.findById(1)).thenAnswer((Answer<BaseItem>) invocation -> {
            org.opentestsystem.ap.common.imrt.model.ValidationResult imrtValidationResult = new org.opentestsystem.ap.common.imrt.model.ValidationResult();
            imrtValidationResult.setCategory(result.getCategory());
            imrtValidationResult.setDetail(result.getDetail());
            imrtValidationResult.setItem(item);
            imrtValidationResult.setMessage(result.getMessage());
            imrtValidationResult.setSeverity(result.getSeverity());
            imrtValidationResult.setKey(42);
            imrtValidationResult.setValidationItemType(result.getItemType());

            return item;
        });

        itemValidationService.validateItem(1);

        verify(validationResultRepository).createValidationResult(dtoCaptor.capture());
        verify(itemRepository).updateValidationCounts(1, 1, 0, 0, 0);
        verify(validationResultRepository, times(0)).deleteValidateResult(deleteKeyCaptor.capture());

        assertThat(dtoCaptor.getValue()).hasSize(1);
        assertThat(dtoCaptor.getValue().iterator().next().getDetail()).isEqualTo(result.getDetail());
    }

    @Test
    public void shouldNotUpdateValidationErrorCountsWhenThereAreNoValidationErrors() {
        ImrtItem item = new ImrtItemBuilder().withKey(1).build();
        final ValidationResults validationResults = new ValidationResults();
        validationResults.setValidationResults(Collections.emptyList());

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId())).thenReturn(Optional.of(validationResults));
        when(mockBaseItemRepository.findById(item.getId())).thenReturn(item);

        itemValidationService.validateItem(1);

        verify(itemRepository).updateValidationCounts(1, 0, 0, 0, 0);
    }

    @Test
    public void shouldThrownWhenItemValidationResultsNotFound() {
        ImrtItem item = new ImrtItemBuilder().withKey(1).build();

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId())).thenReturn(Optional.empty());

        itemValidationService.validateItem(1);
        verify(validationResultRepository, times(0)).createValidationResult(dtoCaptor.capture());
    }

    @Test
    public void shouldValidateItemWithExistingResults() {
        ImrtItem item = new ImrtItemBuilder().withKey(1).build();

        ValidationResults results = new ValidationResults();
        ValidationResult result = new ValidationResult();
        result.setCategory("cat");
        result.setDetail("item isn't valid");
        result.setItemId(String.valueOf(item.getId()));
        result.setItemType(item.getItemType());
        result.setMessage("message");
        result.setSeverity("severe");

        ValidationResult result2 = new ValidationResult();
        result2.setCategory("cat");
        result2.setDetail("associated stim isn't valid");
        result2.setItemId(String.valueOf(item.getId()));
        result2.setItemType(item.getItemType());
        result2.setMessage("message");
        result2.setSeverity("severe");

        results.setValidationResults(Arrays.asList(result, result2));

        ValidationResultDto savedResult = ValidationResultDto.builder()
                .key(33)
                .validationItemId(String.valueOf(item.getId()))
                .validationItemType(item.getItemType())
                .category("cat")
                .severity("severe")
                .message("message")
                .detail("subject isn't valid")
                .build();

        ValidationResultDto savedResult2 = ValidationResultDto.builder()
                .key(34)
                .validationItemId(String.valueOf(item.getId()))
                .validationItemType(item.getItemType())
                .category("cat")
                .severity("severe")
                .message("message")
                .detail("item isn't valid")
                .build();

        List<ValidationResultDto> savedResults = Arrays.asList(savedResult, savedResult2);

        when(mockBaseItemRepository.findById(1)).thenReturn(item);
        when(mockItemTabulatorRepository.getValidationResults(item.getId())).thenReturn(Optional.of(results));
        when(validationResultRepository.findValidationResults(item.getId())).thenReturn(savedResults);

        itemValidationService.validateItem(1);

        verify(validationResultRepository).createValidationResult(dtoCaptor.capture());
        verify(validationResultRepository).deleteValidateResult(deleteKeyCaptor.capture());
        verify(itemRepository).updateValidationCounts(item.getKey(), 2, 0, 0, 0);


        assertThat(dtoCaptor.getValue()).hasSize(1);
        assertThat(dtoCaptor.getValue().iterator().next().getDetail()).isEqualTo(result2.getDetail());

        assertThat(deleteKeyCaptor.getValue()).hasSize(1);
        assertThat(deleteKeyCaptor.getValue().iterator().next()).isEqualTo(33);
    }
}