package org.opentestsystem.ap.imrt.iis.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.core.ItemBankMapper;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.service.ItemRevisionProcessor;
import org.opentestsystem.ap.imrt.iis.service.ItemRevisionService;
import org.opentestsystem.ap.imrt.iis.service.ItemService;
import org.opentestsystem.ap.imrt.iis.service.ItemWorkQueueService;
import org.opentestsystem.ap.imrt.iis.service.ProjectLockService;

import java.util.UUID;

import static org.junit.Assert.fail;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ItemIngestServiceImplTest {
    private static final int itemBankId = 432;
    private static final long lockId = 98765;

    @Mock
    private ProjectLockService projectLockService;

    @Mock
    private ItemRevisionService itemRevisionService;

    @Mock
    private OperationalEventService operationalEventService;

    @Mock
    private ItemRevisionProcessor businessRuleRunner;

    @Mock
    private ItemBankMapper itemConverter;

    @Mock
    private ItemWorkQueueService mockItemWorkQueueService;

    @Mock
    private ItemService itemService;

    @Mock
    private BaseItemRepository baseItemRepository;

    private ItemRevision itemRevision;

    private ItemIngestServiceImpl itemIngestService;

    @Before
    public void setup() {
        BaseItem baseItem = new ImrtItemBuilder()
                .withId(123)
                .withKey(1)
                .build();

        itemRevision = ItemRevision.builder()
                .withBaseItem(baseItem)
                .build();

        itemIngestService = new ItemIngestServiceImpl(projectLockService,
                itemRevisionService, operationalEventService, businessRuleRunner, itemConverter, mockItemWorkQueueService, itemService, baseItemRepository);
    }

    @Test
    public void shouldThrowNoLock() {
        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(itemBankId, UUID.randomUUID());
        when(projectLockService.lockProject(itemBankId)).thenThrow(new RuntimeException());
        try {
            itemIngestService.syncItem(itemUpdateEvent);
            fail();
        } catch (RuntimeException e) {
            verify(projectLockService).lockProject(itemBankId);
            verify(projectLockService, never()).unlockProject(anyInt(), anyLong());
        }
    }

    @Test
    public void shouldErrorHistoryThrows() {
        ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(itemBankId, UUID.randomUUID());
        when(projectLockService.lockProject(itemBankId)).thenReturn(lockId);

        try {
            itemIngestService.syncItem(itemUpdateEvent);
            fail();
        } catch (Throwable e) {
            verify(projectLockService).lockProject(itemBankId);
            verify(projectLockService).unlockProject(itemBankId, lockId);
        }
    }
}
