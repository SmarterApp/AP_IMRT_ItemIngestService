package org.opentestsystem.ap.imrt.iis.business;


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.model.WorkflowStatusEnum;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.builder.ImrtItemBuilder;
import org.opentestsystem.ap.imrt.iis.builder.ItemGitInformationBuilder;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;

import java.time.Instant;
import java.time.temporal.ChronoUnit;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(MockitoJUnitRunner.class)
public class OperationalStatusSetAtRuleTest {
    @Mock
    private OperationalEventService mockOperationalEventService;

    private OperationalStatusSetAtRule operationalStatusSetAtRule;

    @Before
    public void setUp() {
        operationalStatusSetAtRule = new OperationalStatusSetAtRule(mockOperationalEventService);
    }

    @Test
    public void shouldUseExistingItemCommitDateIfExistingOperational() {
        Instant past = Instant.now().minus(100, ChronoUnit.DAYS);

        ImrtItem existingItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .build();

        ImrtItem currentItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Draft.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .build();

        ItemGitInformation existingGitInfo = ItemGitInformationBuilder.builder()
                .withItem(existingItem)
                .withCurrentCommitDate(past)
                .build();

        ItemGitInformation currentGitInfo = ItemGitInformationBuilder.builder()
                .withItem(currentItem)
                .withCurrentCommitDate(past)
                .build();

        ItemRevision currentRevision = ItemRevision.builder()
                .withBaseItem(currentItem)
                .withItemGitInformation(currentGitInfo)
                .build();

        ItemRevision revisionAfterRule = operationalStatusSetAtRule.applyBusinessRule(existingGitInfo, currentRevision);

        assertThat(revisionAfterRule.getItem().isContentChangedAfterOperational()).isFalse();
        assertThat(revisionAfterRule.getItem().getDateStatusSetToOperational()).isNull();
    }

    @Test
    public void shouldIgnoreIfItemOperationalSame() {
        Instant past = Instant.now().minus(100, ChronoUnit.DAYS);

        ImrtItem existingItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .withDateStatusSetToOperational(past)
                .build();

        ImrtItem currentItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .withDateStatusSetToOperational(past)
                .build();

        ItemGitInformation existingGitInfo = ItemGitInformationBuilder.builder()
                .withItem(existingItem)
                .withCurrentCommitDate(past)
                .build();

        ItemGitInformation currentGitInfo = ItemGitInformationBuilder.builder()
                .withItem(currentItem)
                .withCurrentCommitDate(past)
                .build();

        ItemRevision currentRevision = ItemRevision.builder()
                .withBaseItem(currentItem)
                .withItemGitInformation(currentGitInfo)
                .build();

        ItemRevision revisionAfterRule = operationalStatusSetAtRule.applyBusinessRule(existingGitInfo, currentRevision);

        assertThat(revisionAfterRule.getItem().isContentChangedAfterOperational()).isFalse();
        assertThat(revisionAfterRule.getItem().getDateStatusSetToOperational()).isEqualTo(past);
    }

    @Test
    public void shouldNotSetContentChangedIfItemWorkflowStatusHasNotChanged() {
        Instant past = Instant.now().minus(100, ChronoUnit.DAYS);

        ImrtItem existingItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .build();

        ImrtItem currentItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .build();

        ItemGitInformation existingGitInfo = ItemGitInformationBuilder.builder()
                .withItem(existingItem)
                .withCurrentCommitDate(past)
                .build();

        ItemGitInformation currentGitInfo = ItemGitInformationBuilder.builder()
                .withItem(currentItem)
                .withCurrentCommitDate(past)
                .build();

        ItemRevision currentRevision = ItemRevision.builder()
                .withBaseItem(currentItem)
                .withItemGitInformation(currentGitInfo)
                .build();

        ItemRevision revisionAfterRule = operationalStatusSetAtRule.applyBusinessRule(existingGitInfo, currentRevision);

        assertThat(revisionAfterRule.getItem().isContentChangedAfterOperational()).isFalse();
        assertThat(revisionAfterRule.getItem().getDateStatusSetToOperational()).isEqualTo(past);
    }

    @Test
    public void shouldSetDateWorkflowStatusChangedIfItemWorkflowStatusChangedToOperational() {
        Instant now = Instant.now();
        Instant past = Instant.now().minus(100, ChronoUnit.DAYS);

        ImrtItem existingItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Draft.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .build();

        ImrtItem currentItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(now)
                .withSpanishContentLastUpdatedAt(now)
                .build();

        ItemGitInformation existingGitInfo = ItemGitInformationBuilder.builder()
                .withItem(existingItem)
                .withCurrentCommitDate(past)
                .build();

        ItemGitInformation currentGitInfo = ItemGitInformationBuilder.builder()
                .withItem(currentItem)
                .withCurrentCommitDate(now)
                .build();

        ItemRevision currentRevision = ItemRevision.builder()
                .withBaseItem(currentItem)
                .withItemGitInformation(currentGitInfo)
                .build();

        ItemRevision revisionAfterRule = operationalStatusSetAtRule.applyBusinessRule(existingGitInfo, currentRevision);

        assertThat(revisionAfterRule.getItem().isContentChangedAfterOperational()).isFalse();
        assertThat(revisionAfterRule.getItem().getDateStatusSetToOperational()).isEqualTo(now);
    }

    @Test
    public void shouldSetContentChangedIfItemWorkflowStatusChangedToOperational() {
        Instant now = Instant.now();
        Instant past = Instant.now().minus(100, ChronoUnit.DAYS);

        ImrtItem existingItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(past)
                .withSpanishContentLastUpdatedAt(past)
                .withDateStatusSetToOperational(past)
                .build();

        ImrtItem currentItem = ImrtItemBuilder.builder()
                .withWorkflowStatus(WorkflowStatusEnum.Operational.toString())
                .withEnglishContentLastUpdatedAt(now)
                .withSpanishContentLastUpdatedAt(now)
                .withDateStatusSetToOperational(past)
                .build();

        ItemGitInformation existingGitInfo = ItemGitInformationBuilder.builder()
                .withItem(existingItem)
                .withCurrentCommitDate(past)
                .build();

        ItemGitInformation currentGitInfo = ItemGitInformationBuilder.builder()
                .withItem(currentItem)
                .withCurrentCommitDate(now)
                .build();

        ItemRevision currentRevision = ItemRevision.builder()
                .withBaseItem(currentItem)
                .withItemGitInformation(currentGitInfo)
                .build();

        ItemRevision revisionAfterRule = operationalStatusSetAtRule.applyBusinessRule(existingGitInfo, currentRevision);

        assertThat(revisionAfterRule.getItem().isContentChangedAfterOperational()).isTrue();
        assertThat(revisionAfterRule.getItem().getDateStatusSetToOperational()).isEqualTo(past);
    }
}