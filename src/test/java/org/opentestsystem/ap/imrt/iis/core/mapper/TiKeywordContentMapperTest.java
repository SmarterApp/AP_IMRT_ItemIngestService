package org.opentestsystem.ap.imrt.iis.core.mapper;

import org.junit.Test;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.KeywordContent;

import java.util.Collection;
import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.SPANISH_TABLE_CELLS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.SPANISH_TABLE_COL_HEADERS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.SPANISH_TABLE_TITLE;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.TABLE_CELLS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.TABLE_COL_HEADERS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.TiSection.TABLE_TITLE;

public class TiKeywordContentMapperTest {
    private TiKeywordContentMapper mapper = new TiKeywordContentMapper();

    @Test
    public void shouldHandleTiItems() {
        assertThat(mapper.isSupportedItem(new TiItem("123"))).isTrue();
    }

    @Test
    public void shouldConvertItemContent() {
        String englishContent = "    <p>English</p> text";
        String spanishContent = "Spanish     text ";

        TiItem tiItem = new TiItem("123");
        tiItem.getCore().getEn().setPrompt(englishContent);
        tiItem.getCore().getEn().setTable(getTable("English title", "English Column", "English Row Label", "English Answer"));
        tiItem.getTranslations().getEsp().setPrompt(spanishContent);
        tiItem.getTranslations().getEsp().setTable(getTable("Spanish title", "Spanish Column", "Spanish Row Label", "Spanish Answer"));
        BaseItem baseItem = mock(BaseItem.class);

        Collection<KeywordContent> keywordContents = mapper.findKeywordForItem(baseItem, tiItem);

        assertThat(keywordContents).hasSize(10);

        for (KeywordContent content : keywordContents) {
            assertThat(content.getItem()).isEqualTo(baseItem);
            switch (content.getSection()) {
                case PROMPT:
                    assertThat(content.getContent()).isEqualTo("English text");
                    break;
                case SPANISH_PROMPT:
                    assertThat(content.getContent()).isEqualTo("Spanish text");
                    break;
                case TABLE_TITLE:
                    assertThat(content.getContent()).isEqualTo("English title");
                    break;
                case TABLE_CELLS:
                    boolean match = "English Row Label".equals(content.getContent()) || "English Answer".equals(content.getContent());
                    assertThat(match).isTrue();
                    break;
                case TABLE_COL_HEADERS:
                    assertThat(content.getContent()).isEqualTo("English Column");
                    break;
                case SPANISH_TABLE_COL_HEADERS:
                    assertThat(content.getContent()).isEqualTo("Spanish Column");
                    break;
                case SPANISH_TABLE_CELLS:
                    match = "Spanish Row Label".equals(content.getContent()) || "Spanish Answer".equals(content.getContent());
                    assertThat(match).isTrue();
                    break;
                case SPANISH_TABLE_TITLE:
                    assertThat(content.getContent()).isEqualTo("Spanish title");
                    break;
                default:
                    fail("Found invalid section " + content.getSection());
            }
        }
    }

    private Table getTable(String title, String columnLabel, String rowLabel, String answerText) {
        Table.Column column = new Table.Column(columnLabel);
        Table.Cell<String> cellLabel = new Table.Cell<>(ItemConstants.CellType.CELL_TYPE_LABEL, rowLabel);
        Table.Cell<String> cellAnswer = new Table.Cell<>(ItemConstants.CellType.CELL_TYPE_ANSWER, answerText);

        Table table = new Table();
        table.setTitle(title);
        table.setColumns(Collections.singletonList(column));
        Table.Row row = new Table.Row(cellLabel, cellAnswer);
        table.setRows(Collections.singletonList(row));

        return table;
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldHandleIfWrongTypeIsPassedIn() {
        mapper.findKeywordForItem(mock(BaseItem.class), new MiItem("123"));
    }
}