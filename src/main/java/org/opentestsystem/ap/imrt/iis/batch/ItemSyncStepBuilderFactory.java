package org.opentestsystem.ap.imrt.iis.batch;

import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.support.IteratorItemReader;
import org.springframework.stereotype.Service;

/**
 * Creates a step for the item synchronization job. We want to re-create the step each time
 * we start the job, so that we can create a new reader, which will go out to the itemBank
 * and get the current list of itemBankIds
 */
@Service
public class ItemSyncStepBuilderFactory {
    private final NoOpItemWriter noOpItemWriter;
    private final StepBuilderFactory stepBuilderFactory;
    private final ItemSynchronizationProcessor itemSynchronizationProcessor;
    private final ItemSynchronizationService itemSynchronizationService;

    public ItemSyncStepBuilderFactory(NoOpItemWriter noOpItemWriter, StepBuilderFactory stepBuilderFactory,
                                      ItemSynchronizationProcessor itemSynchronizationProcessor,
                                      ItemSynchronizationService itemSynchronizationService) {
        this.noOpItemWriter = noOpItemWriter;
        this.stepBuilderFactory = stepBuilderFactory;
        this.itemSynchronizationProcessor = itemSynchronizationProcessor;
        this.itemSynchronizationService = itemSynchronizationService;
    }

    /**
     * Builds the item synchronization processing "step"
     * @return A fully configured step for processing an item bank item
     */
    public Step buildItemSynchronizationStep() {
        return stepBuilderFactory.get("itemSynchronizationStep")
                .allowStartIfComplete(true)
                // The chunck size determines how many items are processed between writes
                // to the DB. It also determines how often the job checks to see if it has
                // been stopped.
                .<Integer, Void> chunk(10) // TODO make chunk size configurable?
                .reader(new IteratorItemReader<>(itemSynchronizationService.getAllItemBankIds()))
                .processor(itemSynchronizationProcessor)
                .writer(noOpItemWriter)
                .build();
    }
}
