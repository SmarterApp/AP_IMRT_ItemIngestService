package org.opentestsystem.ap.imrt.iis.controller;

import org.opentestsystem.ap.imrt.iis.model.ItemMigrationResponse;
import org.opentestsystem.ap.imrt.iis.model.JobExecutionResponse;
import org.opentestsystem.ap.imrt.iis.service.ItemMigrationService;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.opentestsystem.ap.imrt.iis.service.SpringBatchJobManagementService;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ItemIngestJobController {
    private final JobLauncher jobLauncher;
    private final Job itemSynchronizationJob;
    private final Job itemMigrationJob;
    private final ItemSynchronizationService itemSynchronizationService;
    private final ItemMigrationService itemMigrationService;
    private final SpringBatchJobManagementService springBatchJobManagementService;

    @Autowired
    public ItemIngestJobController(final JobLauncher jobLauncher,
                                   final Job itemSynchronizationJob,
                                   final Job itemMigrationJob,
                                   final ItemSynchronizationService itemSynchronizationService,
                                   final ItemMigrationService itemMigrationService,
                                   final SpringBatchJobManagementService springBatchJobManagementService) {
        this.jobLauncher = jobLauncher;
        this.itemSynchronizationJob = itemSynchronizationJob;
        this.itemMigrationJob = itemMigrationJob;
        this.itemSynchronizationService = itemSynchronizationService;
        this.itemMigrationService = itemMigrationService;
        this.springBatchJobManagementService = springBatchJobManagementService;
    }

    @PostMapping("/sync")
    ResponseEntity<JobExecutionResponse> synchronize() throws Exception {
        final JobExecution jobExecution = jobLauncher.run(itemSynchronizationJob, new JobParameters());

        return ResponseEntity.ok(new JobExecutionResponse(jobExecution.getId(),
                jobExecution.getJobInstance().getId(),
                jobExecution.getJobInstance().getJobName(),
                jobExecution.getStatus().toString(),
                String.format("Started %s successfully", jobExecution.getJobInstance().getJobName())));
    }

    @PostMapping("/migrate")
    ResponseEntity<JobExecutionResponse> migrate() throws Exception {
        final JobExecution jobExecution = jobLauncher.run(itemMigrationJob, new JobParameters());

        return ResponseEntity.ok(new JobExecutionResponse(jobExecution.getId(),
                jobExecution.getJobInstance().getId(),
                jobExecution.getJobInstance().getJobName(),
                jobExecution.getStatus().toString(),
                String.format("Started %s successfully", jobExecution.getJobInstance().getJobName())));
    }

    @PostMapping("/sync/{projectId}")
    ResponseEntity<String> synchronizeItem(@PathVariable final int projectId, @RequestParam(required = false) boolean addWebhook) {
        itemSynchronizationService.synchronizeItem(projectId, addWebhook);
        return ResponseEntity.ok("Synced project " + projectId);
    }

    @PostMapping("/migrate/{projectId}")
    ResponseEntity<String> migrateItem(@PathVariable final int projectId) {
        ItemMigrationResponse response = itemMigrationService.migrateItem(projectId);

        return ResponseEntity.ok("Migrated " + response.getNumberOfItembankIds() + " projects");
    }

    @PutMapping("/abandon/{jobInstanceId}")
    ResponseEntity<JobExecutionResponse> abandon(@PathVariable final long jobInstanceId) {
        return ResponseEntity.ok(springBatchJobManagementService.abandon(jobInstanceId));
    }
}
