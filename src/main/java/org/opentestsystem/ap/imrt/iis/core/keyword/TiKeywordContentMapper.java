package org.opentestsystem.ap.imrt.iis.core.keyword;

import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TiItem;
import org.opentestsystem.ap.common.model.content.TiItemContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.SPANISH_TABLE_CELLS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.SPANISH_TABLE_COL_HEADERS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.SPANISH_TABLE_TITLE;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.TABLE_CELLS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.TABLE_COL_HEADERS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.TiSection.TABLE_TITLE;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_TI;
import static org.opentestsystem.ap.imrt.iis.core.keyword.KeywordContentUtil.convertContentToKeywordString;

@Component
public class TiKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_TI, iatItem.getType()));
        }

        TiItem miItem = (TiItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>(getEnglishContent(baseItem, miItem));
        contents.addAll(getSpanishContent(baseItem, miItem));

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof TiItem;
    }

    private List<KeywordContent> getEnglishContent(final BaseItem baseItem, final TiItem tiItem) {
        List<KeywordContent> contents = new ArrayList<>();
        TiItemContent miItemContent = tiItem.getCore().getEn();

        if (isNotBlank(miItemContent.getPrompt())) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(miItemContent.getPrompt())));
        }

        Table table = miItemContent.getTable();

        if (isNotBlank(table.getTitle())) {
            contents.add(new KeywordContent(baseItem, TABLE_TITLE, convertContentToKeywordString(table.getTitle())));
        }

        List<KeywordContent> columnLabels = table.getColumns().stream()
                .filter(column -> isNotBlank(column.getLabel())).map(column -> new KeywordContent(baseItem, TABLE_COL_HEADERS, column.getLabel()))
                .collect(Collectors.toList());
        contents.addAll(columnLabels);

        for (Table.Row row : table.getRows()) {
            List<KeywordContent> cells = row.getCells().stream()
                    .filter(cell -> cell.getValue() instanceof String && isNotBlank((String) cell.getValue()))
                    .map(cell -> new KeywordContent(baseItem, TABLE_CELLS, convertContentToKeywordString((String) cell.getValue())))
                    .collect(Collectors.toList());

            contents.addAll(cells);
        }

        return contents;
    }

    private List<KeywordContent> getSpanishContent(final BaseItem baseItem, final TiItem tiItem) {
        List<KeywordContent> contents = new ArrayList<>();

        if (tiItem.getTranslations() == null || tiItem.getTranslations().getEsp() == null) {
            return contents;
        }

        TiItemContent tiItemContent = tiItem.getTranslations().getEsp();

        if (isNotBlank(tiItemContent.getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(tiItemContent.getPrompt())));
        }

        Table table = tiItemContent.getTable();

        if (isNotBlank(table.getTitle())) {
            contents.add(new KeywordContent(baseItem, SPANISH_TABLE_TITLE, convertContentToKeywordString(table.getTitle())));
        }

        List<KeywordContent> columnLabels = table.getColumns().stream()
                .filter(column -> isNotBlank(column.getLabel())).map(column -> new KeywordContent(baseItem, SPANISH_TABLE_COL_HEADERS, column.getLabel()))
                .collect(Collectors.toList());
        contents.addAll(columnLabels);

        for (Table.Row row : table.getRows()) {
            List<KeywordContent> cells = row.getCells().stream()
                    .filter(cell -> cell.getValue() instanceof String && isNotBlank((String) cell.getValue()))
                    .map(cell -> new KeywordContent(baseItem, SPANISH_TABLE_CELLS, convertContentToKeywordString((String) cell.getValue())))
                    .collect(Collectors.toList());

            contents.addAll(cells);
        }

        return contents;
    }
}
