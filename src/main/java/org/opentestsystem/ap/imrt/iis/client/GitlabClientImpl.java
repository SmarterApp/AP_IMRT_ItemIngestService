package org.opentestsystem.ap.imrt.iis.client;

import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.systemhooks.GroupMemberSystemHookEvent;
import org.gitlab4j.api.systemhooks.GroupSystemHookEvent;
import org.gitlab4j.api.systemhooks.KeySystemHookEvent;
import org.gitlab4j.api.systemhooks.ProjectSystemHookEvent;
import org.gitlab4j.api.systemhooks.PushSystemHookEvent;
import org.gitlab4j.api.systemhooks.RepositorySystemHookEvent;
import org.gitlab4j.api.systemhooks.SystemHookListener;
import org.gitlab4j.api.systemhooks.SystemHookManager;
import org.gitlab4j.api.systemhooks.TagPushSystemHookEvent;
import org.gitlab4j.api.systemhooks.TeamMemberSystemHookEvent;
import org.gitlab4j.api.systemhooks.UserSystemHookEvent;
import org.gitlab4j.api.webhook.BuildEvent;
import org.gitlab4j.api.webhook.IssueEvent;
import org.gitlab4j.api.webhook.MergeRequestEvent;
import org.gitlab4j.api.webhook.NoteEvent;
import org.gitlab4j.api.webhook.PipelineEvent;
import org.gitlab4j.api.webhook.PushEvent;
import org.gitlab4j.api.webhook.TagPushEvent;
import org.gitlab4j.api.webhook.WebHookListener;
import org.gitlab4j.api.webhook.WebHookManager;
import org.gitlab4j.api.webhook.WikiPageEvent;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.service.EventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;

/**
 * Wrapper around the gitlab4j java web client:
 * https://github.com/gmessner/gitlab4j-api
 */
@Component
@ConditionalOnProperty(value = "test.enabled", havingValue = "false", matchIfMissing = true)
public class GitlabClientImpl implements SystemHookListener, WebHookListener, ItemBankClient, GitlabHookClient {
    private static final Logger logger = LoggerFactory.getLogger(GitlabClientImpl.class);

    private final ItemBankProperties gitlabProperties;
    private GitLabApi gitLabApi;
    private Namespace group;
    private final SystemHookManager systemHookManager = new SystemHookManager();
    private final WebHookManager webHookManager = new WebHookManager();
    private ItemEventListener projectListener;
    private EventService eventService;

    @Autowired
    public GitlabClientImpl(ItemBankProperties gitlabProperties, EventService eventService) {
        this.gitlabProperties = gitlabProperties;
        this.eventService = eventService;
    }

    @PostConstruct
    public void init() {
        gitLabApi = new GitLabApi(gitlabProperties.getHost(), gitlabProperties.getAccessToken());
        try {
            group = gitLabApi.getNamespaceApi().findNamespaces(gitlabProperties.getGroup()).get(0);
            systemHookManager.addListener(this);
            webHookManager.addListener(this);
            logger.info("GitlabClientImpl Initialized");
        } catch (GitLabApiException e) {
            // Generate an event
            eventService.serviceError(logger,"Unable to find group {}", gitlabProperties.getGroup(), e);
            // Cause spring init to fail
            throw new RuntimeException(e);
        }
    }

    @Override
    public void setItemEventListener(ItemEventListener listener) {
        projectListener = listener;
    }

    @Override
    public void handleSystemHook(HttpServletRequest request) {
        try {
            // This method parses the data and then invokes the SystemHookListener overrides
            // in this class based on the contents.
            systemHookManager.handleEvent(request);
        } catch (GitLabApiException e) {
            // Generate an event
            eventService.serviceError(logger,"Unable to handle system hook call {}", request, e);
        }
    }

    @Override
    public void handleWebHook(HttpServletRequest request) {
        try {
            // This method parses the data and then invokes the WebHookListener overrides
            // in this class based on the contents.
            webHookManager.handleEvent(request);
        } catch (GitLabApiException e) {
            // Generate an event
            eventService.serviceError(logger,"Unable to handle web hook call {}", request, e);
        }
    }

    @Override
    public void monitorItem(int projectId) {
        logger.debug("Adding project push hook id {} url {}", projectId, gitlabProperties.getWebhookUrl());
        try {
            gitLabApi.getProjectApi().addHook(projectId, gitlabProperties.getWebhookUrl(), true, false, false);
        } catch (GitLabApiException e) {
            // Generate an event
            eventService.serviceError(logger,"Unable to register webhook for projectId {}", projectId, e);
        }
    }

    @Override
    public void onProjectEvent(ProjectSystemHookEvent event) {
        logger.debug("onProjectEvent path {}", event.getPathWithNamespace());
        // Check to see if this is a project create event for our group
        if (projectListener != null && event.getClass().getSimpleName().equals("CreateProjectSystemHookEvent") &&
                event.getPathWithNamespace().startsWith(group.getPath())) {
            // If so, notify our listener
            projectListener.onCreateItem(event.getProjectId());
        }
    }

    @Override
    public void onTeamMemberEvent(TeamMemberSystemHookEvent event) {

    }

    @Override
    public void onUserEvent(UserSystemHookEvent event) {

    }

    @Override
    public void onKeyEvent(KeySystemHookEvent event) {

    }

    @Override
    public void onGroupEvent(GroupSystemHookEvent event) {

    }

    @Override
    public void onGroupMemberEvent(GroupMemberSystemHookEvent event) {

    }

    @Override
    public void onPushEvent(PushSystemHookEvent event) {

    }

    @Override
    public void onTagPushEvent(TagPushSystemHookEvent event) {

    }

    @Override
    public void onRepositoryEvent(RepositorySystemHookEvent event) {

    }

    @Override
    public void onBuildEvent(BuildEvent buildEvent) {

    }

    @Override
    public void onIssueEvent(IssueEvent event) {

    }

    @Override
    public void onMergeRequestEvent(MergeRequestEvent event) {
    }

    @Override
    public void onNoteEvent(NoteEvent noteEvent) {

    }

    @Override
    public void onPipelineEvent(PipelineEvent pipelineEvent) {

    }

    @Override
    public void onPushEvent(PushEvent pushEvent) {
        logger.debug("onPushEvent ref {} branch {} path {} id {}",
                pushEvent.getRef(), pushEvent.getBranch(), pushEvent.getProject().getPathWithNamespace(),
                pushEvent.getProjectId());
        // Check to see that this is a push into the master branch
        if (projectListener != null && pushEvent.getBranch().equals("master")) {
            // If so, notify the listener
            logger.debug("onPushEvent ref {} branch {} path {} id {}",
                    pushEvent.getRef(), pushEvent.getBranch(), pushEvent.getProject().getPathWithNamespace(),
                    pushEvent.getProjectId());
            projectListener.onUpdateItem(pushEvent.getProjectId());
        }
    }

    @Override
    public void onTagPushEvent(TagPushEvent tagPushEvent) {

    }

    @Override
    public void onWikiPageEvent(WikiPageEvent wikiEvent) {

    }

    void setGitLabApi(GitLabApi gitLabApi) {
        this.gitLabApi = gitLabApi;
    }

    void setGroup(Namespace group) {
        this.group = group;
    }
}
