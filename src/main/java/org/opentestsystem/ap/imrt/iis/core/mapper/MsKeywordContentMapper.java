package org.opentestsystem.ap.imrt.iis.core.mapper;

import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.content.MsItemContent;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.KeywordContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_MS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.MsSection.OPTIONS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.MsSection.PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.MsSection.SPANISH_OPTIONS;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.MsSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.imrt.iis.core.mapper.KeywordContentUtil.convertContentToKeywordString;

@Component
public class MsKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_MS, iatItem.getType()));
        }

        MsItem msItem = (MsItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>(getEnglishContent(baseItem, msItem));
        contents.addAll(getSpanishContent(baseItem, msItem));

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof MsItem;
    }

    private List<KeywordContent> getEnglishContent(final BaseItem baseItem, final MsItem msItem) {
        List<KeywordContent> contents = new ArrayList<>();

        MsItemContent mcItemContent = msItem.getCore().getEn();

        if (isNotBlank(mcItemContent.getPrompt())) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(mcItemContent.getPrompt())));
        }

        List<KeywordContent> options = mcItemContent.getOptions().stream()
                .map(itemOption -> new KeywordContent(baseItem, OPTIONS, convertContentToKeywordString(itemOption.getText())))
                .collect(Collectors.toList());

        contents.addAll(options);

        return contents;
    }

    private List<KeywordContent> getSpanishContent(final BaseItem baseItem, final MsItem msItem) {
        List<KeywordContent> contents = new ArrayList<>();

        if (msItem.getTranslations() == null || msItem.getTranslations().getEsp() == null) {
            return contents;
        }

        MsItemContent mcItemContent = msItem.getTranslations().getEsp();

        if (isNotBlank(mcItemContent.getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(mcItemContent.getPrompt())));
        }

        List<KeywordContent> options = mcItemContent.getOptions().stream()
                .map(itemOption -> new KeywordContent(baseItem, SPANISH_OPTIONS, convertContentToKeywordString(itemOption.getText())))
                .collect(Collectors.toList());

        contents.addAll(options);

        return contents;
    }
}
