package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.message.ItemDeleteMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemUpdateMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemUpdateMessageRecoverer;
import org.opentestsystem.ap.imrt.iis.message.ItemValidationListener;
import org.opentestsystem.ap.imrt.iis.message.MessageErrorHandler;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.util.ErrorHandler;

/**
 * Configuration for AMQP item update and delete work queues.
 */
// TODO figure out how to configure the retry strategy when exceptions are thrown.
@Configuration
public class MessageQueueConfiguration {
    private static final String UPDATE_QUEUE_NAME = "item-update";
    private static final String DELETE_QUEUE_NAME = "item-delete";
    private static final String VALIDATION_QUEUE_NAME = "item-validation";

    @Bean
    Queue updateQueue() {
        return new Queue(UPDATE_QUEUE_NAME, true);
    }

    @Bean
    Queue deleteQueue() {
        return new Queue(DELETE_QUEUE_NAME, true);
    }

    @Bean
    Queue validationQueue() {
        return new Queue(VALIDATION_QUEUE_NAME, true);
    }

    @Bean
    TopicExchange exchange() {
        return new TopicExchange("spring-boot-exchange");
    }

    @Bean
    Binding updateQueueBinding(Queue updateQueue, TopicExchange exchange) {
        return BindingBuilder.bind(updateQueue).to(exchange).with(UPDATE_QUEUE_NAME);
    }

    @Bean
    Binding deleteQueueBinding(Queue deleteQueue, TopicExchange exchange) {
        return BindingBuilder.bind(deleteQueue).to(exchange).with(DELETE_QUEUE_NAME);
    }

    @Bean
    Binding getValidationQueueBinding(Queue validationQueue, TopicExchange exchange) {
        return BindingBuilder.bind(validationQueue).to(exchange).with(VALIDATION_QUEUE_NAME);
    }

    @Bean
    SimpleMessageListenerContainer itemUpdateListenerContainer(final ConnectionFactory connectionFactory,
                                                                   final OperationalEventService operationalEventService,
                                                                   final ItemUpdateMessageListener itemUpdateMessageListener,
                                                                   final ItemIngestServiceProperties properties) {
        return getSimpleMessageListenerContainer(connectionFactory,
                operationalEventService,
                itemUpdateMessageListener,
                properties,
                UPDATE_QUEUE_NAME);
    }

    @Bean
    SimpleMessageListenerContainer itemDeleteListenerContainer(final ConnectionFactory connectionFactory,
                                                               final OperationalEventService operationalEventService,
                                                               final ItemDeleteMessageListener itemDeleteMessageListener,
                                                               final ItemIngestServiceProperties properties) {
        return getSimpleMessageListenerContainer(connectionFactory,
                operationalEventService,
                itemDeleteMessageListener,
                properties,
                DELETE_QUEUE_NAME);
    }

    @Bean
    SimpleMessageListenerContainer itemValidationListenerContainer(final ConnectionFactory connectionFactory,
                                                                   final OperationalEventService operationalEventService,
                                                                   final ItemValidationListener itemValidationListener,
                                                                   final ItemIngestServiceProperties properties) {
        return getSimpleMessageListenerContainer(connectionFactory,
                operationalEventService,
                itemValidationListener,
                properties,
                VALIDATION_QUEUE_NAME);
    }

    /**
     * Create a {@link org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer} for the specified
     * {@link org.springframework.amqp.core.Queue} name
     *
     * @param connectionFactory The {@link org.springframework.amqp.rabbit.connection.ConnectionFactory} that will handle connections
     * @param operationalEventService The {@link org.opentestsystem.ap.imrt.common.service.OperationalEventService} for recording events
     * @param itemMessageListener An {@link org.opentestsystem.ap.imrt.iis.message.ItemMessageListener} implementation to handle receiving messages
     * @param properties An {@link org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties} implementation describing necessary ingest configuration information
     * @param queueName The name of the {@link org.springframework.amqp.core.Queue} being wired up
     * @return A {@link org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer} for the specified queue name
     */
    private SimpleMessageListenerContainer getSimpleMessageListenerContainer(final ConnectionFactory connectionFactory,
                                                                             final OperationalEventService operationalEventService,
                                                                             final ItemMessageListener itemMessageListener,
                                                                             final ItemIngestServiceProperties properties,
                                                                             final String queueName) {
        final SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.setQueueNames(queueName);
        container.setMessageListener(new MessageListenerAdapter(itemMessageListener, "handleMessage"));
        container.setAdviceChain(RetryInterceptorBuilder.stateless()
                .maxAttempts(properties.getRetryAmount())
                .recoverer(new ItemUpdateMessageRecoverer(operationalEventService))
                .backOffOptions(properties.getRetryInitialInterval(),
                        properties.getRetryIntervalMultiplier(),
                        properties.getRetryMaxInterval())
                .build());
        container.setErrorHandler(new MessageErrorHandler(operationalEventService));
        return container;
    }
}
