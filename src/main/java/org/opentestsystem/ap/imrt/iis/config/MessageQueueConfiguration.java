package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.common.itembank.ItemBankObjectMapper;
import org.opentestsystem.ap.imrt.iis.event.TimsItemEventHandler;
import org.opentestsystem.ap.imrt.iis.message.ItemDeleteMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemUpdateMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemValidationListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.amqp.rabbit.retry.RepublishMessageRecoverer;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.retry.interceptor.RetryOperationsInterceptor;

/**
 * Configuration for AMQP item update and delete work queues.
 */
@Configuration
public class MessageQueueConfiguration {
    private static final Logger LOG = LoggerFactory.getLogger(MessageQueueConfiguration.class);

    private static final String UPDATE_QUEUE_NAME = "item-update";
    private static final String DELETE_QUEUE_NAME = "item-delete";
    private static final String VALIDATION_QUEUE_NAME = "item-validation";
    public static final String ERROR_QUEUE_NAME = "imrt-error";

    @Bean
    Queue updateQueue() {
        return new Queue(UPDATE_QUEUE_NAME, true);
    }

    @Bean
    Queue deleteQueue() {
        return new Queue(DELETE_QUEUE_NAME, true);
    }

    @Bean
    Queue validationQueue() {
        return new Queue(VALIDATION_QUEUE_NAME, true);
    }

    @Bean
    Queue errorQueue() {
        return new Queue(ERROR_QUEUE_NAME, false);
    }

    @Bean
    Queue timsItemEventQueue(TimsProperties timsProperties) {
        return new Queue(timsProperties.getQueue(), true);
    }

    @Bean
    TopicExchange exchange() {
        return new TopicExchange("imrt-spring-boot-exchange");
    }

    @Bean
    TopicExchange timsExchange(TimsProperties timsProperties) {
        LOG.info("TimsProperties: {}", timsProperties);
        return new TopicExchange(timsProperties.getExchange());
    }

    @Bean
    Binding timsItemEventBinding(Queue timsItemEventQueue, TopicExchange timsExchange) {
        return BindingBuilder.bind(timsItemEventQueue).to(timsExchange).with(timsItemEventQueue.getName());
    }

    @Bean
    Binding updateQueueBinding(final Queue updateQueue, final TopicExchange exchange) {
        return BindingBuilder.bind(updateQueue).to(exchange).with(updateQueue.getName());
    }

    @Bean
    Binding deadLetterQueueBinding(final Queue errorQueue, final TopicExchange exchange) {
        return BindingBuilder.bind(errorQueue).to(exchange).with(errorQueue.getName());
    }

    @Bean
    Binding deleteQueueBinding(final Queue deleteQueue, final TopicExchange exchange) {
        return BindingBuilder.bind(deleteQueue).to(exchange).with(deleteQueue.getName());
    }

    @Bean
    Binding validationQueueBinding(final Queue validationQueue, final TopicExchange exchange) {
        return BindingBuilder.bind(validationQueue).to(exchange).with(validationQueue.getName());
    }

    @Primary
    @Bean
    public RabbitTemplate getRabbitTemplate(final ConnectionFactory connectionFactory) {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter(new ItemBankObjectMapper()));
        return rabbitTemplate;
    }

    @Bean
    SimpleMessageListenerContainer itemUpdateListenerContainer(final ConnectionFactory connectionFactory,
                                                               final ItemUpdateMessageListener itemUpdateMessageListener,
                                                               final Queue updateQueue,
                                                               final RetryOperationsInterceptor retryOperationsInterceptor,
                                                               final ItemIngestServiceProperties itemIngestServiceProperties) {
        final SimpleMessageListenerContainer updateMessageContainer = new SimpleMessageListenerContainer();
        updateMessageContainer.setConnectionFactory(connectionFactory);
        updateMessageContainer.setQueueNames(updateQueue.getName());
        MessageListenerAdapter adapter = new MessageListenerAdapter(itemUpdateMessageListener, new Jackson2JsonMessageConverter(new ItemBankObjectMapper()));
        adapter.setDefaultListenerMethod("handleUpdate");
        updateMessageContainer.setMessageListener(adapter);
        updateMessageContainer.setAdviceChain(retryOperationsInterceptor);

        updateMessageContainer.setConcurrentConsumers(itemIngestServiceProperties.getUpdateQueueConcurrentConsumers());

        return updateMessageContainer;
    }

    @Bean
    SimpleMessageListenerContainer timsItemEventListenerContainer(final ConnectionFactory connectionFactory,
                                                               final TimsItemEventHandler eventHandler,
                                                               final Queue timsItemEventQueue,
                                                               final RetryOperationsInterceptor retryOperationsInterceptor,
                                                               final ItemIngestServiceProperties itemIngestServiceProperties) {
        final SimpleMessageListenerContainer timsItemEventContainer = new SimpleMessageListenerContainer();
        timsItemEventContainer.setConnectionFactory(connectionFactory);
        timsItemEventContainer.setQueueNames(timsItemEventQueue.getName());
        MessageListenerAdapter adapter = new MessageListenerAdapter(eventHandler, new Jackson2JsonMessageConverter(new ItemBankObjectMapper()));
        adapter.setDefaultListenerMethod("onItemEvent");
        timsItemEventContainer.setMessageListener(adapter);
        timsItemEventContainer.setAdviceChain(retryOperationsInterceptor);

        timsItemEventContainer.setConcurrentConsumers(itemIngestServiceProperties.getUpdateQueueConcurrentConsumers());

        return timsItemEventContainer;
    }


    @Bean
    SimpleMessageListenerContainer itemDeleteListenerContainer(final ConnectionFactory connectionFactory,
                                                               final ItemDeleteMessageListener itemDeleteMessageListener,
                                                               final Queue deleteQueue,
                                                               final RetryOperationsInterceptor retryOperationsInterceptor) {
        return getSimpleMessageListenerContainer(connectionFactory,
                itemDeleteMessageListener,
                deleteQueue.getName(),
                retryOperationsInterceptor);
    }

    @Bean
    SimpleMessageListenerContainer itemValidationListenerContainer(final ConnectionFactory connectionFactory,
                                                                   final ItemValidationListener itemValidationListener,
                                                                   final Queue validationQueue,
                                                                   final RetryOperationsInterceptor retryOperationsInterceptor,
                                                                   final ItemIngestServiceProperties itemIngestServiceProperties) {
        SimpleMessageListenerContainer validationMessageContainer =  getSimpleMessageListenerContainer(connectionFactory,
                itemValidationListener,
                validationQueue.getName(),
                retryOperationsInterceptor);

        validationMessageContainer.setConcurrentConsumers(itemIngestServiceProperties.getValidationQueueConcurrentConsumers());

        return validationMessageContainer;
    }

    @Bean
    RetryOperationsInterceptor retryOperationsInterceptor(final AmqpTemplate amqpTemplate,
                                                          final TopicExchange exchange,
                                                          final ItemIngestServiceProperties itemIngestServiceProperties) {

        LOG.info("Item Ingest Service Properties " + itemIngestServiceProperties);

        return RetryInterceptorBuilder.stateless()
                .maxAttempts(itemIngestServiceProperties.getRetryAmount())
                .recoverer(new RepublishMessageRecoverer(amqpTemplate, exchange.getName(), ERROR_QUEUE_NAME))
                .build();
    }

    /**
     * Create a {@link org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer} for the specified
     * {@link org.springframework.amqp.core.Queue} name
     *
     * @param connectionFactory   The {@link org.springframework.amqp.rabbit.connection.ConnectionFactory} that will handle connections
     * @param itemMessageListener An {@link org.opentestsystem.ap.imrt.iis.message.ItemMessageListener} implementation to handle receiving messages
     * @param queueName           The name of the {@link org.springframework.amqp.core.Queue} being wired up
     * @return A {@link org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer} for the specified queue name
     */
    private SimpleMessageListenerContainer getSimpleMessageListenerContainer(final ConnectionFactory connectionFactory,
                                                                             final ItemMessageListener itemMessageListener,
                                                                             final String queueName,
                                                                             final RetryOperationsInterceptor retryOperationsInterceptor) {
        final SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.setQueueNames(queueName);
        MessageListenerAdapter adapter = new MessageListenerAdapter(itemMessageListener, new Jackson2JsonMessageConverter(new ItemBankObjectMapper()));
        adapter.setDefaultListenerMethod("handleMessage");
        container.setMessageListener(adapter);
        container.setAdviceChain(retryOperationsInterceptor);
        return container;
    }
}
