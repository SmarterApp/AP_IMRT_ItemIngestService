package org.opentestsystem.ap.imrt.iis.repository.impl;

import org.opentestsystem.ap.imrt.iis.model.ValidationResultDto;
import org.opentestsystem.ap.imrt.iis.repository.ValidationResultRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import java.util.Collection;
import java.util.List;
import java.util.function.Function;

@Repository
public class JdbcValidationResultRepository implements ValidationResultRepository {
    private NamedParameterJdbcTemplate template;

    @Value("${validation-result.create}")
    private String sqlCreate;

    @Value("${validation-result.find}")
    private String sqlFind;

    @Value("${validation-result.delete}")
    private String sqlDelete;

    @Value("${validation-result.deleteAllByItemKey}")
    private String sqlDeleteAllByItemKey;

    public JdbcValidationResultRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public void deleteValidateResult(final Iterable<Integer> keys) {
        template.update(sqlDelete,
                new MapSqlParameterSource("keys", keys));
    }

    @Override
    public void createValidationResult(final Collection<ValidationResultDto> results) {
        SqlParameterSource[] parameterSources = results.stream().map((Function<ValidationResultDto, SqlParameterSource>) dto -> {
            MapSqlParameterSource source = new MapSqlParameterSource("item_key", dto.getItemKey());
            source.addValue("validation_item_id", dto.getValidationItemId());
            source.addValue("validation_item_type", dto.getValidationItemType());
            source.addValue("category", dto.getCategory());
            source.addValue("message", dto.getMessage());
            source.addValue("detail", dto.getDetail());
            source.addValue("severity", dto.getSeverity());
            source.addValue("created_at", dto.getCreatedAt());
            source.addValue("updated_at", dto.getUpdatedAt());
            source.addValue("updated_by", dto.getUpdatedBy());
            return source;
        }).toArray(SqlParameterSource[]::new);

        template.batchUpdate(sqlCreate, parameterSources);
    }

    @Override
    public List<ValidationResultDto> findValidationResults(final int itemId) {
        return template.query(sqlFind,
                new MapSqlParameterSource("itemId", itemId),
                ValidationResultMapper);
    }

    @Override
    public void deleteAllByItemKey(final int itemKey) {
        template.update(sqlDeleteAllByItemKey, new MapSqlParameterSource("item_key", itemKey));
    }

    private static final RowMapper<ValidationResultDto> ValidationResultMapper = (row, rowNum) -> ValidationResultDto.builder()
            .key(row.getInt("key"))
            .itemKey(row.getInt("item_key"))
            .validationItemId(row.getString("validation_item_id"))
            .validationItemType(row.getString("validation_item_type"))
            .category(row.getString("category"))
            .message(row.getString("message"))
            .detail(row.getString("detail"))
            .severity(row.getString("severity"))
            .createdAt(row.getTimestamp("created_at").toInstant())
            .updatedAt(row.getTimestamp("updated_at").toInstant())
            .updatedBy(row.getString("updated_by"))
            .build();
}
