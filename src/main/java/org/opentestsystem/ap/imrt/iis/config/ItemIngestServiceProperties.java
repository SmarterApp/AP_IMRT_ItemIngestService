package org.opentestsystem.ap.imrt.iis.config;

import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties(prefix = "iis")
public class ItemIngestServiceProperties {
    private int retryAmount = 3;
    private int imrtPageQueryLimit = 1000;
    private String itemValidationServiceUrl = StringUtils.EMPTY;
    private boolean ignoreValidate;
    private boolean ignoreWebhookCreation;
    private int updateQueueConcurrentConsumers = 3;

    /**
     * @return the number of times a message will be retries
     */
    public int getRetryAmount() {
        return retryAmount;
    }

    public void setRetryAmount(int retryAmount) {
        if (retryAmount < 1) {
            throw new IllegalArgumentException("Cannot set iis.retryAmount to value less than 1");
        }

        this.retryAmount = retryAmount;
    }

    /**
     * @return The number of records returned in a database query that uses pagination
     */
    public int getImrtPageQueryLimit() {
        return imrtPageQueryLimit;
    }

    public void setImrtPageQueryLimit(final int imrtPageQueryLimit) {
        this.imrtPageQueryLimit = imrtPageQueryLimit;
    }

    /**
     * @return the item validation service URL
     */
    public String getItemValidationServiceUrl() {
        return itemValidationServiceUrl;
    }

    public void setItemValidationServiceUrl(final String itemValidationServiceUrl) {
        this.itemValidationServiceUrl = itemValidationServiceUrl;
    }

    public void setIgnoreValidate(final boolean ignoreValidate) {
        this.ignoreValidate = ignoreValidate;
    }

    /**
     * @return {@code true} to validate items in IVS
     */
    public boolean isIgnoreValidate() {
        return ignoreValidate;
    }

    /**
     * @return {@code true} if the on create webhook should be ignored.
     */
    public boolean isIgnoreWebhookCreation() {
        return ignoreWebhookCreation;
    }

    public void setIgnoreWebhookCreation(final boolean ignoreWebhookCreation) {
        this.ignoreWebhookCreation = ignoreWebhookCreation;
    }

    /**
     * The number of concurrent consumers for the update queue
     *
     * @return the number concurrent consumers for the update queue
     */
    public int getUpdateQueueConcurrentConsumers() {
        return updateQueueConcurrentConsumers;
    }

    public void setUpdateQueueConcurrentConsumers(final int updateQueueConcurrentConsumers) {
        this.updateQueueConcurrentConsumers = updateQueueConcurrentConsumers;
    }

    @Override
    public String toString() {
        return "ItemIngestServiceProperties{" +
                "retryAmount=" + retryAmount +
                ", imrtPageQueryLimit=" + imrtPageQueryLimit +
                ", itemValidationServiceUrl='" + itemValidationServiceUrl + '\'' +
                ", ignoreValidate=" + ignoreValidate +
                ", ignoreWebhookCreation=" + ignoreWebhookCreation +
                ", updateQueueConcurrentConsumers=" + updateQueueConcurrentConsumers +
                '}';
    }
}
