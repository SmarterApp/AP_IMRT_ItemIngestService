package org.opentestsystem.ap.imrt.iis.service;

import org.slf4j.Logger;

/**
 * Abstract class to provide a mechanism for generating events to facilitate
 * monitoring of the ItemIngestService.
 */
public abstract class OperationalEventService {
    /**
     * Item related events
     */
    protected enum ItemEventType {
        ITEM_MONITORED, ITEM_CREATED, ITEM_UPDATED
    }

    /**
     * Service related events, requiring action by Operations
     */
    protected enum ServiceEventType {
        SERVICE_WARNING, SERVICE_ERROR
    }

    /**
     * Indicates that an item is now being monitored by IIS
     * @param logger  Logger belonging to the calling class
     * @param projectId  Git projectId of the monitored item
     */
    public void itemMonitoredEvent(Logger logger, int projectId) {
        itemEvent(logger, ItemEventType.ITEM_MONITORED, null, null, projectId);
    }

    /**
     * Indicates that an item has been created in the imrt database
     * @param logger  Logger belonging to the calling class
     * @param key  Database key for the newly created item
     * @param id  Itembank Id for the newly created item
     * @param projectId  Git projectId of the newly created item
     */
    public void itemCreatedEvent(Logger logger, int key, int id, int projectId) {
        itemEvent(logger, ItemEventType.ITEM_CREATED, key, id, projectId);
    }

    /**
     * Indicates that an item has been updated in the imrt database
     * @param logger  Logger belonging to the calling class
     * @param key  Database key for the updated item
     * @param id  Itembank Id for the updated item
     * @param projectId  Git projectId of the updated item
     */
    public void itemUpdatedEvent(Logger logger, int key, int id, int projectId) {
        itemEvent(logger, ItemEventType.ITEM_UPDATED, key, id, projectId);
    }

    /**
     * Implementing classes should generate an appropriate event for monitoring
     * item activities.
     * @param logger  Logger belonging to the calling class
     * @param type  Type of the event
     * @param key  Database key for the updated item
     * @param id  Itembank Id for the updated item
     * @param projectId  Git projectId of the updated item
     */
    protected abstract void itemEvent(Logger logger, ItemEventType type, Integer key, Integer id, Integer projectId);

    /**
     * Indicates a fatal error has occurred during processing
     * @param logger  Logger belonging to the calling class
     * @param e  Optional exception that caused the error, may be null
     * @param format  The format string for the message. Uses the standard slf4j formatting scheme
     *                of using {} as placeholders for arguments
     * @param args  A list of arguments, corresponding to the {} placeholders in the format string.
     */
    public void serviceError(Logger logger, Exception e, String format, Object ... args) {
        serviceEvent(logger, ServiceEventType.SERVICE_ERROR, e, format, args);
    }

    /**
     * Indicates an unexpected problem has occurred during processing
     * @param logger  Logger belonging to the calling class
     * @param e  Optional exception that caused the warning, may be null
     * @param format  The format string for the message. Uses the standard slf4j formatting scheme
     *                of using {} as placeholders for arguments
     * @param args  A list of arguments, corresponding to the {} placeholders in the format string.
     */
    public void serviceWarning(Logger logger, Exception e, String format, Object ... args) {
        serviceEvent(logger, ServiceEventType.SERVICE_WARNING, e, format, args);
    }

    /**
     * Implementing classes should generate an appropriate event for monitoring
     * operational events generated by the application
     * @param logger  Logger belonging to the calling class
     * @param type  Type of the event
     * @param e  Optional exception that caused the warning, may be null
     * @param format  The format string for the message. Uses the standard slf4j formatting scheme
     *                of using {} as placeholders for arguments
     * @param args  A list of arguments, corresponding to the {} placeholders in the format string.
     */
    protected abstract void serviceEvent(Logger logger, ServiceEventType type, Exception e, String format, Object ... args);
}
