package org.opentestsystem.ap.imrt.iis.service;

import org.gitlab4j.api.Pager;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Optional;

@Service
public class ItemSynchronizationServiceImpl implements ItemSynchronizationService {
    private static final Logger logger = LoggerFactory.getLogger(ItemSynchronizationServiceImpl.class);

    private final ItemBankClient itemBankClient;
    private final OperationalEventService operationalEventService;
    private final ImrtItemRepository imrtItemRepository;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemEventListener itemEventListener;

    @Autowired
    public ItemSynchronizationServiceImpl(final ItemBankClient itemBankClient,
                                          final OperationalEventService operationalEventService,
                                          final ImrtItemRepository imrtItemRepository,
                                          final ItemGitInformationRepository itemGitInformationRepository,
                                          final ItemEventListener itemEventListener) {
        this.itemBankClient = itemBankClient;
        this.operationalEventService = operationalEventService;
        this.imrtItemRepository = imrtItemRepository;
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemEventListener = itemEventListener;
    }

    @Override
    @Async
    public void synchronize(final Instant start) {
        Pager<Project> projectsPager = itemBankClient.getProjects(100);

        while (projectsPager.hasNext()) {
            // Does the item exist in the IMRT database? If not, we need to create a new item and move onto the next
            // item.
            // TODO:  can we sort by last_activity_date?
            for (final Project project : projectsPager.next()) {
                final ImrtItem existingItem = imrtItemRepository.findOne(project.getId());
                if (existingItem == null) {
                    itemEventListener.onCreateItem(project.getId());
                    itemEventListener.onUpdateItem(project.getId());
                    continue;
                }

                // Otherwise, start looking at commit history.  If the current commit hash IMRT knows about does not
                // match the most recent commit hash in source control, start the update process for this item.
                final ItemGitInformation itemGitInformation = itemGitInformationRepository.findOne(project.getId());
                final Optional<ItemBankItemRevision> mostRecentRevision = itemBankClient.getMostRecentRevision(project.getId());
                if (!mostRecentRevision.isPresent()) {
                    // log warning and continue processing.  We should always have at least one commit to master for
                    // each item.
                    operationalEventService.serviceWarning(logger,
                        null,
                        "Could not find any revisions on master branch for item id '{}'",
                        project.getName());
                    continue;
                }

                if (!itemGitInformation.getCurrentCommitHash().equals(mostRecentRevision.get().getRevisionId())) {
                    itemEventListener.onUpdateItem(project.getId());
                }
            }
        }
    }
}
