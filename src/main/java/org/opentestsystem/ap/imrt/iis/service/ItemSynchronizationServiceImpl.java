package org.opentestsystem.ap.imrt.iis.service;

import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.model.ItemSynchronizationResponse;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.awt.print.Pageable;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ItemSynchronizationServiceImpl implements ItemSynchronizationService {
    private final ItemBankClient itemBankClient;
    private final ItemEventListener itemEventListener;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private static final Logger logger = LoggerFactory.getLogger(ItemSynchronizationServiceImpl.class);

    @Autowired
    public ItemSynchronizationServiceImpl(final ItemBankClient itemBankClient,
                                          final ItemEventListener itemEventListener,
                                          final ItemGitInformationRepository itemGitInformationRepository) {
        this.itemBankClient = itemBankClient;
        this.itemEventListener = itemEventListener;
        this.itemGitInformationRepository = itemGitInformationRepository;
    }

    @Override
    public ItemSynchronizationResponse synchronize() {
        final Instant getProjectIdsStartTime = Instant.now();
        logger.debug("getting item bank ids from source control");

        final List<Integer> allItemBankIdsInSourceControl = itemBankClient.getAllItemBankIds();

        logger.debug("retrieved {} item bank ids from source control in {} seconds",
                allItemBankIdsInSourceControl.size(),
                Duration.between(getProjectIdsStartTime, Instant.now()).getSeconds());

        int numberOfItemsWithoutWebhook = 0;
        for (final Integer projectId : allItemBankIdsInSourceControl) {
            // If the project does not any webhooks in place or if the project does not have any webhooks that match
            // IMRT's webhook URL configuration, create one.
            if (!itemBankClient.isProjectMonitored(projectId)) {
                numberOfItemsWithoutWebhook++;
                itemEventListener.onCreateItem(projectId);
            }

            itemEventListener.onUpdateItem(projectId);
        }

        // Find out if we have any item bank ids in IMRT that do not exist in source control.  If we do, they need to be
        // deleted from the IMRT database.
        final List<ItemGitInformation> itemGitInformationList = new ArrayList<>();
        itemGitInformationRepository.findAll().forEach(itemGitInformationList::add);

        final List<Integer> itemBankIdsInImrt = itemGitInformationList.stream()
                .map(ItemGitInformation::getProjectId)
                .collect(Collectors.toList());

        itemBankIdsInImrt.removeAll(allItemBankIdsInSourceControl);

        // Delete all items that are in IMRT but not in source control - IMRT should never have more items than source
        // control has
        if (!itemBankIdsInImrt.isEmpty()) {
            for (final Integer itemBankId : itemBankIdsInImrt) {
                itemEventListener.onDeleteItem(itemBankId);
            }
        }

        return new ItemSynchronizationResponse(numberOfItemsWithoutWebhook,
                allItemBankIdsInSourceControl.size(),
                itemBankIdsInImrt.size());
    }
}
