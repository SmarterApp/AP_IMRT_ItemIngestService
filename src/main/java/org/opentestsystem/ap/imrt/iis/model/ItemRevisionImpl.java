package org.opentestsystem.ap.imrt.iis.model;

import com.google.common.primitives.Ints;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.model.AbstractAssessmentItemCore;
import org.opentestsystem.ap.common.model.Administration;
import org.opentestsystem.ap.common.model.AssessmentItemCore;
import org.opentestsystem.ap.common.model.FieldTestData;
import org.opentestsystem.ap.common.model.Form;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.ItemLog;
import org.opentestsystem.ap.imrt.common.model.ItemLogKey;
import org.opentestsystem.ap.imrt.common.model.Stimulus;

import java.util.Optional;

import static org.apache.commons.lang.StringUtils.isNotBlank;
import static org.springframework.util.StringUtils.isEmpty;

/**
 * Implementation of ItemRevision interface that converts from AP common domain
 * model, with some associated git information, into IMRT domain model objects
 */
public final class ItemRevisionImpl implements ItemRevision {
    private final Item item;
    private final ItemBankItemRevision itemBankItemRevision;
    private final ItemGitInformation existingItemGitInformation;
    private ItemMetadata metadata;
    private BaseItem baseItem;
    private ItemGitInformation itemGitInformation;
    private Integer linkedStimulusId;
    private ItemLog itemLog;

    public ItemRevisionImpl(ItemBankItemRevision itemBankItemRevision, ItemGitInformation existingItemGitInformation) {
        this.item = itemBankItemRevision.getItem();
        this.existingItemGitInformation = existingItemGitInformation;
        this.itemBankItemRevision = itemBankItemRevision;

        createDomainModelObjects();
    }

    /**
     * Covert item bank data into domain model objects
     */
    private void createDomainModelObjects() {
        findMetadata();
        createImrtItem();
        createItemGitInformation();
        updateItemStandardIds(baseItem);
        createItemLog();
    }

    /**
     * Finds the ItemMetadata by inspecting the type of the item. Stores it
     * in the metadata field. Also stores linkedStimulusId if found.
     */
    private void findMetadata() {
        if (item.getCore() instanceof AbstractAssessmentItemCore) {
            AbstractAssessmentItemCore core = (AbstractAssessmentItemCore) item.getCore();
            metadata = core.getMetadata();
            String stimulusId = core.getStimulusId();
            if (!isEmpty(stimulusId)) {
                linkedStimulusId = convertItemId(stimulusId);
            }
        } else if (item.getCore() != null) {
            metadata = item.getCore().getMetadata();
        }
    }

    /**
     * Creates an ImrtItem from the item bank data and stores it in the
     * baseItem field.
     */
    private void createImrtItem() {
        baseItem = ItemConstants.ItemType.TYPE_STIM.equals(item.getType()) ? new Stimulus() : new ImrtItem();

        baseItem.setId(convertItemId(item.getId()));
        baseItem.setItemJson(item);
        baseItem.setItemType(item.getType());
        baseItem.setUpdatedBy(itemBankItemRevision.getAuthor());
        baseItem.setAssociatedStimulusId(linkedStimulusId);
        baseItem.setBeingCreated(itemBankItemRevision.isBeingCreated());

        if (item.getWorkflow() != null) {
            baseItem.setWorkflowStatus(StringUtils.defaultString(item.getWorkflow().getWorkflowStatusCode()));
        }

        // Metadata may be null if this is a tutorial item
        if (metadata != null) {
            baseItem.setSubject(StringUtils.defaultString(metadata.getSubject()));
            baseItem.setGrade(StringUtils.defaultString(metadata.getIntendedGrade()));
            baseItem.setDepthOfKnowledge(StringUtils.defaultString(metadata.getDepthOfKnowledge()));
            baseItem.setOrganizationTypeId(StringUtils.defaultString(metadata.getOrganizationTypeId()));
            baseItem.setOrganizationName(StringUtils.defaultString(metadata.getOrganizationName()));
            baseItem.setContentTaskModel(StringUtils.defaultString(metadata.getContentTaskModel()));
            baseItem.setItemAuthor(metadata.getItemAuthor());
        }
        if (null == existingItemGitInformation) {
            // We have never seen this item before, so set the creation info from this commit
            baseItem.setItemCreatedBy(itemBankItemRevision.getAuthor());
            baseItem.setItemCreatedAt(itemBankItemRevision.getRevisionDate());
            baseItem.setWorkflowStatusSetAt(itemBankItemRevision.getRevisionDate());
        } else {
            BaseItem existingImrtItem = existingItemGitInformation.getItem();
            baseItem.setItemCreatedBy(existingImrtItem.getItemCreatedBy());
            baseItem.setItemCreatedAt(existingImrtItem.getItemCreatedAt());
            baseItem.setWorkflowStatusSetAt(existingImrtItem.getWorkflowStatusSetAt());
            baseItem.setKey(existingImrtItem.getKey());
        }

        populateItemWithAdministrationData(item, baseItem);
    }

    /**
     * Creates ItemGitInformation from the item bank data and stores it in
     * the itemGitInformation field
     */
    private void createItemGitInformation() {
        itemGitInformation = new ItemGitInformation();
        itemGitInformation.setItem(baseItem);
        itemGitInformation.setProjectId(itemBankItemRevision.getItemBankId());
        itemGitInformation.setProjectPath(itemBankItemRevision.getItemBankPath());
        itemGitInformation.setCurrentCommitDate(itemBankItemRevision.getRevisionDate());
        itemGitInformation.setCurrentCommitHash(itemBankItemRevision.getRevisionId());
        itemGitInformation.setUpdatedBy(itemBankItemRevision.getAuthor());
        itemGitInformation.setIngestSource(itemBankItemRevision.getIngestSource());
    }

    private void updateItemStandardIds(BaseItem item) {
        if (null == metadata) {
            return;
        }

        item.setPrimaryClaim(StringUtils.defaultString(metadata.getPrimaryClaim()));
        item.setPrimaryTarget(StringUtils.defaultString(metadata.getPrimaryTarget()));
        item.setPrimaryCommonCoreStandard(StringUtils.defaultString(metadata.getPrimaryCommonCoreStandard()));
        item.setPrimaryContentDomain(StringUtils.defaultString(metadata.getPrimaryContentDomain()));
        item.setSecondaryClaim(StringUtils.defaultString(metadata.getSecondaryClaim()));
        item.setSecondaryCommonCoreStandard(StringUtils.defaultString(metadata.getSecondaryCommonCoreStandard()));
        item.setSecondaryContentDomain(StringUtils.defaultString(metadata.getSecondaryContentDomain()));
        item.setSecondaryTarget(StringUtils.defaultString(metadata.getSecondaryTarget()));
        item.setTertiaryClaim(StringUtils.defaultString(metadata.getTertiaryClaim()));
        item.setTertiaryCommonCoreStandard(StringUtils.defaultString(metadata.getTertiaryCommonCoreStandard()));
        item.setTertiaryContentDomain(StringUtils.defaultString(metadata.getTertiaryContentDomain()));
        item.setTertiaryTarget(StringUtils.defaultString(metadata.getTertiaryTarget()));
        item.setQuaternaryClaim(StringUtils.defaultString(metadata.getQuaternaryClaim()));
        item.setQuaternaryCommonCoreStandard(StringUtils.defaultString(metadata.getQuaternaryCommonCoreStandard()));
        item.setQuaternaryContentDomain(StringUtils.defaultString(metadata.getQuaternaryContentDomain()));
        item.setQuaternaryTarget(StringUtils.defaultString(metadata.getQuaternaryTarget()));
    }

    private void populateItemWithAdministrationData(Item item, BaseItem baseItem) {
        if (!(item.getCore() instanceof AssessmentItemCore)) {
            return;
        }

        AssessmentItemCore core = (AssessmentItemCore) item.getCore();

        if (core.getAdministrations() == null || core.getAdministrations().isEmpty()) {
            return;
        }

        final String fieldTestDataId = core.getFieldTestAdministrationId();
        int formCount = 0;
        int exposuresCount = 0;
        Optional<FieldTestData> fieldTestData = Optional.empty();

        for (Administration administration : core.getAdministrations()) {
            if (StringUtils.equals(administration.getAdministrationId(), fieldTestDataId)) {
                fieldTestData = Optional.of(administration.getFieldTestData());
            }

            for (Form form : administration.getForms()) {
                formCount++;
                if (form.getExposures() != null) {
                    exposuresCount += form.getExposures();
                }
            }
        }

        baseItem.setExposuresCount(exposuresCount);
        baseItem.setFormCount(formCount);

        if (fieldTestData.isPresent() && isNotBlank(fieldTestData.get().getItemDifficultyQuintile())) {
            baseItem.setItemDifficultyQuintile(Ints.tryParse(fieldTestData.get().getItemDifficultyQuintile()));
        }
    }

    /**
     * Create an itemLog entry for this revision
     */
    private void createItemLog() {
        ItemLogKey itemLogKey = new ItemLogKey(baseItem, itemBankItemRevision.getRevisionId());
        itemLog = new ItemLog();
        itemLog.setItemLogKey(itemLogKey);
        itemLog.setCommitDate(itemBankItemRevision.getRevisionDate());
        itemLog.setUpdatedBy(itemBankItemRevision.getAuthor());
        itemLog.setIngestSource(itemBankItemRevision.getIngestSource());
    }

    /**
     * Converts IAT's string ids to numeric ids
     *
     * @param id the id String to be converted
     * @return the integer id
     * @throws IllegalArgumentException if the id is not a number
     */
    private static Integer convertItemId(String id) throws IllegalArgumentException {
        try {
            return Integer.valueOf(id);
        } catch (NumberFormatException nfe) {
            throw new IllegalArgumentException("The id is not a number and cannot be ingested into the system");
        }
    }

    @Override
    public ItemGitInformation getItemGitInformation() {
        return itemGitInformation;
    }

    @Override
    public BaseItem getItem() {
        return baseItem;
    }

    @Override
    public Optional<Integer> getLinkedStimulusId() {
        return Optional.ofNullable(linkedStimulusId);
    }

    @Override
    public ItemLog getItemLog() {
        return itemLog;
    }
}
