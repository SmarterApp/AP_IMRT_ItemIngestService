package org.opentestsystem.ap.imrt.iis.model;

import com.google.common.collect.Lists;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.model.AbstractAssessmentItemCore;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.StimItemCore;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.ItemLog;
import org.opentestsystem.ap.imrt.common.model.ItemLogKey;
import org.opentestsystem.ap.imrt.common.model.StandardId;
import org.opentestsystem.ap.imrt.common.model.StandardIdKey;
import org.opentestsystem.ap.imrt.common.model.Stimulus;

import java.util.List;
import java.util.Optional;

import static org.springframework.util.StringUtils.isEmpty;

/**
 * Implementation of ItemRevision interface that converts from AP common domain
 * model, with some associated git information, into IMRT domain model objects
 */
public final class ItemRevisionImpl implements ItemRevision {
    private final Item item;
    private final ItemBankItemRevision itemBankItemRevision;
    private final ItemGitInformation existingItemGitInformation;
    private ItemMetadata metadata;
    private BaseItem baseItem;
    private ItemGitInformation itemGitInformation;
    private String linkedStimulusId;
    private final List<StandardId> standardIdList = Lists.newArrayList();
    private ItemLog itemLog;

    public ItemRevisionImpl(ItemBankItemRevision itemBankItemRevision, ItemGitInformation existingItemGitInformation) {
        this.item = itemBankItemRevision.getItem();
        this.existingItemGitInformation = existingItemGitInformation;
        this.itemBankItemRevision = itemBankItemRevision;

        createDomainModelObjects();
    }

    /**
     * Covert item bank data into domain model objects
     */
    private void createDomainModelObjects() {
        findMetadata();
        createImrtItem();
        createItemGitInformation();
        createStandardIds();
        createItemLog();
    }

    /**
     * Finds the ItemMetadata by inspecting the type of the item. Stores it
     * in the metadata field. Also stores linkedStimulusId if found.
     */
    private void findMetadata() {
        if (item.getCore() instanceof AbstractAssessmentItemCore) {
            AbstractAssessmentItemCore core = (AbstractAssessmentItemCore) item.getCore();
            metadata = core.getMetadata();
            String stimulusId = core.getStimulusId();
            if (!isEmpty(stimulusId)) {
                linkedStimulusId = stimulusId;
            }
        } else if (item.getCore() instanceof StimItemCore) {
            metadata = ((StimItemCore) item.getCore()).getMetadata();
        }
    }

    /**
     * Creates an ImrtItem from the item bank data and stores it in the
     * baseItem field.
     */
    private void createImrtItem() {
        baseItem = ItemConstants.ItemType.TYPE_STIM.equals(item.getType()) ? new Stimulus() : new ImrtItem();
        baseItem.setItemJson(item);
        baseItem.setId(item.getId());
        baseItem.setItemType(item.getType());
        baseItem.setUpdatedBy(itemBankItemRevision.getAuthor());
        baseItem.setAssociatedStimulusId(linkedStimulusId);
        baseItem.setBeingCreated(itemBankItemRevision.isBeingCreated());

        if(item.getWorkflow() != null) {
            baseItem.setWorkflowStatus(StringUtils.defaultString(item.getWorkflow().getWorkflowStatusCode()));
        }

        // Metadata may be null if this is a tutorial item
        if (metadata != null) {
            baseItem.setSubject(StringUtils.defaultString(metadata.getSubject()));
            baseItem.setGrade(StringUtils.defaultString(metadata.getGrade()));
            baseItem.setDepthOfKnowledge(StringUtils.defaultString(metadata.getDepthOfKnowledge()));
            baseItem.setOrganizationTypeId(StringUtils.defaultString(metadata.getOrganizationTypeId()));
            baseItem.setOrganizationName(StringUtils.defaultString(metadata.getOrganizationName()));
        }
        if (null == existingItemGitInformation) {
            // We have never seen this item before, so set the creation info from this commit
            baseItem.setItemCreatedBy(itemBankItemRevision.getAuthor());
            baseItem.setItemCreatedAt(itemBankItemRevision.getRevisionDate());
            baseItem.setWorkflowStatusSetAt(itemBankItemRevision.getRevisionDate());
        } else {
            BaseItem existingImrtItem = existingItemGitInformation.getItem();
            baseItem.setItemCreatedBy(existingImrtItem.getItemCreatedBy());
            baseItem.setItemCreatedAt(existingImrtItem.getItemCreatedAt());
            baseItem.setWorkflowStatusSetAt(existingImrtItem.getWorkflowStatusSetAt());
            baseItem.setKey(existingImrtItem.getKey());
        }
    }

    /**
     * Creates ItemGitInformation from the item bank data and stores it in
     * the itemGitInformation field
     */
    private void createItemGitInformation() {
        itemGitInformation = new ItemGitInformation();
        itemGitInformation.setItem(baseItem);
        itemGitInformation.setProjectId(itemBankItemRevision.getItemBankId());
        itemGitInformation.setProjectPath(itemBankItemRevision.getItemBankPath());
        itemGitInformation.setCurrentCommitDate(itemBankItemRevision.getRevisionDate());
        itemGitInformation.setCurrentCommitHash(itemBankItemRevision.getRevisionId());
        itemGitInformation.setUpdatedBy(itemBankItemRevision.getAuthor());
        itemGitInformation.setIngestSource(itemBankItemRevision.getIngestSource());
    }

    /**
     * Creates the standardId objects if the associated data is present.
     * Standard Ids are stored in the standardId list field.
     */
    private void createStandardIds() {
        if (null == metadata) {
            return;
        }
        // Standard IDs are handled a bit differently for ELA than for other subjects
        if (ItemConstants.ItemSubject.SUBJECT_ELA.equalsIgnoreCase(metadata.getSubject())) {
            createElaStandardId();
        } else {
            createNormalStandardIds();
        }
    }

    /**
     * Create a standard id domain object based on the current method IAT uses for ELA.
     * The id is only created if at least one value is populated. The id is stored
     * in the standardId list field.
     */
    private void createElaStandardId() {
        if (anyFieldsPopulated(metadata.getPrimaryClaim(),
                metadata.getContentDomain(), metadata.getPrimaryAssessmentTarget(),
                // TODO when supported metadata.getPrimaryEmphasis
                metadata.getPrimaryCommonCoreStandard())) {
            standardIdList.add(new StandardId.StandardIdBuilder()
                    .withStandardIdKey(new StandardIdKey(baseItem.getKey(), StandardIdKey.PRIMARY))
                    .withClaim(metadata.getPrimaryClaim())
                    .withContentDomain(metadata.getContentDomain())
                    .withTarget(metadata.getPrimaryAssessmentTarget())
                    .withEmphasis("")  //TODO - IAT required to populate this information
                    .withCommonCoreStandard(metadata.getPrimaryCommonCoreStandard())
                    .withUpdatedBy(itemBankItemRevision.getAuthor())
                    .build());
        }
    }

    /**
     * Create standard id domain objects based on the primary, secondary, tertiary, and quaternay values
     * in the item metadata. Ids are only created if at least one value is populated. Standard ids are stored
     * in the standardIdList field.
     */
    private void createNormalStandardIds() {
        if (anyFieldsPopulated(metadata.getPrimaryClaim(),
                metadata.getPrimaryContentDomain(), metadata.getPrimaryAssessmentTarget(),
                // TODO when supported metadata.getPrimaryEmphasis
                metadata.getPrimaryCommonCoreStandard())) {
            standardIdList.add(new StandardId.StandardIdBuilder()
                    .withStandardIdKey(new StandardIdKey(baseItem.getKey(), StandardIdKey.PRIMARY))
                    .withClaim(metadata.getPrimaryClaim())
                    .withContentDomain(metadata.getPrimaryContentDomain())
                    .withTarget(metadata.getPrimaryAssessmentTarget())
                    .withEmphasis("")  //TODO - IAT required to populate this information
                    .withCommonCoreStandard(metadata.getPrimaryCommonCoreStandard())
                    .withUpdatedBy(itemBankItemRevision.getAuthor())
                    .build());
        }
        if (anyFieldsPopulated(metadata.getSecondaryClaim(),
                metadata.getSecondaryContentDomain(), metadata.getSecondaryAssessmentTarget(),
                metadata.getSecondaryCommonCoreStandard())) {
            standardIdList.add(new StandardId.StandardIdBuilder()
                    .withStandardIdKey(new StandardIdKey(baseItem.getKey(), StandardIdKey.SECONDARY))
                    .withClaim(metadata.getSecondaryClaim())
                    .withContentDomain(metadata.getSecondaryContentDomain())
                    .withTarget(metadata.getSecondaryAssessmentTarget())
                    .withCommonCoreStandard(metadata.getSecondaryCommonCoreStandard())
                    .withUpdatedBy(itemBankItemRevision.getAuthor())
                    .build());
        }
        if (anyFieldsPopulated(metadata.getTertiaryClaim(),
                metadata.getTertiaryContentDomain(), metadata.getTertiaryAssessmentTarget(),
                metadata.getTertiaryCommonCoreStandard())) {
            standardIdList.add(new StandardId.StandardIdBuilder()
                    .withStandardIdKey(new StandardIdKey(baseItem.getKey(), StandardIdKey.TERTIARY))
                    .withClaim(metadata.getTertiaryClaim())
                    .withContentDomain(metadata.getTertiaryContentDomain())
                    .withTarget(metadata.getTertiaryAssessmentTarget())
                    .withCommonCoreStandard(metadata.getTertiaryCommonCoreStandard())
                    .withUpdatedBy(itemBankItemRevision.getAuthor())
                    .build());
        }
        if (anyFieldsPopulated(metadata.getQuaternaryClaim(),
                metadata.getQuaternaryContentDomain(), metadata.getQuaternaryAssessmentTarget(),
                metadata.getQuaternaryCommonCoreStandard())) {
            standardIdList.add(new StandardId.StandardIdBuilder()
                    .withStandardIdKey(new StandardIdKey(baseItem.getKey(), StandardIdKey.QUATERNARY))
                    .withClaim(metadata.getQuaternaryClaim())
                    .withContentDomain(metadata.getQuaternaryContentDomain())
                    .withTarget(metadata.getQuaternaryAssessmentTarget())
                    .withCommonCoreStandard(metadata.getQuaternaryCommonCoreStandard())
                    .withUpdatedBy(itemBankItemRevision.getAuthor())
                    .build());
        }
    }

    /**
     * Null safe checking on a set of fields to see if any of them are populated
     *
     * @param fields the set of fields to check
     * @return true if all fields are empty, false otherwise
     */
    private boolean anyFieldsPopulated(String... fields) {
        for (String field : fields) {
            if (!isEmpty(field)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Create an itemLog entry for this revision
     */
    private void createItemLog() {
        ItemLogKey itemLogKey = new ItemLogKey(baseItem, itemBankItemRevision.getRevisionId());
        itemLog = new ItemLog();
        itemLog.setItemLogKey(itemLogKey);
        itemLog.setCommitDate(itemBankItemRevision.getRevisionDate());
        itemLog.setUpdatedBy(itemBankItemRevision.getAuthor());
        itemLog.setIngestSource(itemBankItemRevision.getIngestSource());
    }

    @Override
    public ItemGitInformation getItemGitInformation() {
        return itemGitInformation;
    }

    @Override
    public BaseItem getItem() {
        return baseItem;
    }

    @Override
    public Optional<String> getLinkedStimulusId() {
        return Optional.ofNullable(linkedStimulusId);
    }

    @Override
    public ItemLog getItemLog() {
        return itemLog;
    }

    @Override
    public List<StandardId> getStandardIdList() {
        return standardIdList;
    }
}
