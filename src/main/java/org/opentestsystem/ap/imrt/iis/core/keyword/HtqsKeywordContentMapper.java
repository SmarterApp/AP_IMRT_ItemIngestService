package org.opentestsystem.ap.imrt.iis.core.keyword;

import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.content.HtqsItemContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqsSection.INTERACTIVE_TEXTS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqsSection.PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqsSection.SPANISH_INTERACTIVE_TEXTS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqsSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQS;
import static org.opentestsystem.ap.imrt.iis.core.keyword.KeywordContentUtil.convertContentToKeywordString;

@Component
public class HtqsKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_HTQS, iatItem.getType()));
        }

        HtqsItem htqsItem = (HtqsItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>(getEnglishKeywordContent(baseItem, htqsItem));
        contents.addAll(getSpanishKeywordContent(baseItem, htqsItem));

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof HtqsItem;
    }

    private Collection<KeywordContent> getEnglishKeywordContent(BaseItem baseItem, HtqsItem htqoItem) {
        List<KeywordContent> contents = new ArrayList<>();
        HtqsItemContent content = htqoItem.getCore().getEn();

        if (isNotBlank(content.getPrompt())) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(content.getPrompt())));
        }

        if (content.getHtqSelectable() != null && isNotBlank(content.getHtqSelectable().getInteractiveText())) {
            contents.add(new KeywordContent(baseItem, INTERACTIVE_TEXTS, convertContentToKeywordString(content.getHtqSelectable().getInteractiveText())));
        }

        return contents;
    }

    private Collection<KeywordContent> getSpanishKeywordContent(BaseItem baseItem, HtqsItem htqsItem) {
        List<KeywordContent> contents = new ArrayList<>();

        if (htqsItem.getTranslations() == null || htqsItem.getTranslations().getEsp() == null) {
            return contents;
        }

        HtqsItemContent content = htqsItem.getTranslations().getEsp();

        if (isNotBlank(content.getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(content.getPrompt())));
        }

        if (content.getHtqSelectable() != null && isNotBlank(content.getHtqSelectable().getInteractiveText())) {
            contents.add(new KeywordContent(baseItem, SPANISH_INTERACTIVE_TEXTS, convertContentToKeywordString(content.getHtqSelectable().getInteractiveText())));
        }

        return contents;
    }
}
