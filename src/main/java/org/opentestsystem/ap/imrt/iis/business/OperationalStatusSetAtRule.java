package org.opentestsystem.ap.imrt.iis.business;

import org.opentestsystem.ap.common.model.WorkflowStatusEnum;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.util.Optional;

/**
 * Rule to set the operational status set at and verify if the content has changed
 */
@Component
public class OperationalStatusSetAtRule implements ItemRevisionComparisonRule {
    private static final Logger LOG = LoggerFactory.getLogger(OperationalStatusSetAtRule.class);
    private static final String OPERATIONAL_STATUS = WorkflowStatusEnum.Operational.toString();

    private final OperationalEventService logger;

    public OperationalStatusSetAtRule(final OperationalEventService logger) {
        this.logger = logger;
    }

    @Override
    public ItemRevision applyBusinessRule(final ItemGitInformation existing, final ItemRevision current) {
        if(!OPERATIONAL_STATUS.equals(current.getItem().getWorkflowStatus())) {
            return current;
        }

        Optional<Instant> maybeOperationalStatusSetAt = getOperationalStatusSetAt(existing, current);
        maybeOperationalStatusSetAt.ifPresent(instant -> current.getItem().setDateStatusSetToOperational(instant));

        if(current.getItem().getDateStatusSetToOperational() != null) {
            Instant dateOperation = current.getItem().getDateStatusSetToOperational();
            Instant spanishContentChangedAt = current.getItem().getSpanishContentLastUpdatedAt();
            Instant englishContentChangedAt = current.getItem().getEnglishContentLastUpdatedAt();

            current.getItem().setContentChangedAfterOperational(dateOperation.isBefore(spanishContentChangedAt) || dateOperation.isBefore(englishContentChangedAt));

            logger.debug(LOG, "Item {} operational date set to {} and content changed after operational set to {}",
                    current.getItem().getId(),
                    current.getItem().isContentChangedAfterOperational());
        }

        return current;
    }

    private Optional<Instant> getOperationalStatusSetAt(final ItemGitInformation existing, final ItemRevision current) {
        String existingStatus = existing.getItem().getWorkflowStatus();
        String currentStatus = current.getItem().getWorkflowStatus();
        Instant operationalStatusSetAt = existing.getItem().getDateStatusSetToOperational();

        if(!OPERATIONAL_STATUS.equals(existingStatus) && OPERATIONAL_STATUS.equals(currentStatus)) {
            return Optional.of(current.getItemGitInformation().getCurrentCommitDate());
        }

        //This is for items that are operational and don't have a date.
        if(OPERATIONAL_STATUS.equals(existingStatus) && operationalStatusSetAt == null) {
            return Optional.of(existing.getCurrentCommitDate());
        }

        return Optional.empty();
    }
}
