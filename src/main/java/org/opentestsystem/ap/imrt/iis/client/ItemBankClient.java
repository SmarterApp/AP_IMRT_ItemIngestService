package org.opentestsystem.ap.imrt.iis.client;

import org.gitlab4j.api.Pager;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.imrt.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;
import org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision;

import java.util.List;
import java.util.Optional;

/**
 * Interface for Item Bank operations
 */
public interface ItemBankClient {
    /**
     * Register an object to be called for item creation and update events
     *
     * @param listener Listener to be notified for Item creation or updates
     */
    void setItemEventListener(ItemEventListener listener);

    /**
     * Registers an interest in the item. Once this method is called, any changes to the item
     * will result in a call to the onItemUpdate method in the listener.
     *
     * @param itemBankId the item bank id for the item.
     */
    void monitorItem(int itemBankId);

    /**
     * Retrieves the history of an item from the item bank
     *
     * @param itemBankId      the item bank id for the item.
     * @param existingGitInfo Existing itembank info for the item. May be null. If it is not null, only
     *                        history entries since this entry will be returned.
     * @return The list of historical commits
     * @throws GitLabApiRuntimeException if the itembank id does not contain an item or if there is issues connecting to the item bank
     */
    List<ItemBankItemRevision> getItemHistory(int itemBankId, ItemGitInformation existingGitInfo) throws GitLabApiRuntimeException;

    /**
     * Get a collection of all item bank identifiers contained in the source control group.
     *
     * @return A {@link java.util.List} of item bank identifiers.
     */
    List<Integer> getAllItemBankIds();

    /**
     * Get {@link Pager} of projects.  This can be iterated over the pages of projects
     *
     * @return the pager of project
     */
    Optional<Pager<Project>> getProjectPage();

    /**
     * Find a project by id.
     *
     * @param projectId the Gitlab project id
     * @return {@link Project} otherwise empty if not found
     */
    Optional<Project> findProject(int projectId);

    /**
     * Determine if the {@link org.gitlab4j.api.models.Project} has the appropriate webhook to consider itself
     * monitored.
     *
     * @param projectId The id of the {@link org.gitlab4j.api.models.Project} to investigate
     * @return True if the {@link org.gitlab4j.api.models.Project} has the appropriate webhook to allow it to be
     * monitored for changes; otherwise false.
     * @throws GitLabApiRuntimeException if there is issues connecting to the item bank
     */
    boolean isProjectMonitored(int projectId);

    /**
     * Generates an {@link ItemBankItemRevision} object from a given
     * {@link org.opentestsystem.ap.common.imrt.model.ItemGitInformation} on item.json
     *
     * @param itemGitInformation The {@link org.opentestsystem.ap.common.imrt.model.ItemGitInformation} that serves as
     *                           the basis for the {@link org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision}
     * @return {@link org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision} object containing details on the revision
     */
    ItemBankItemRevision getItemBankItemRevision(final ItemGitInformation itemGitInformation);

    /**
     * Finds {@link ItemBankItemRevision} if itembank id contains an item
     *
     * @param itemBankId the itembank id
     * @return the {@link ItemBankItemRevision} if found otherwise empty
     * @throws GitLabApiRuntimeException if there is an issue getting data from the itembank
     */
    Optional<ItemBankItemRevision> findLatestItemBankItemRevision(final int itemBankId) throws GitLabApiRuntimeException;
}
