package org.opentestsystem.ap.imrt.iis.client;

import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.iis.model.ItemBankItemRevision;

import java.util.List;

/**
 * Interface for Item Bank operations
 */
public interface ItemBankClient {
    /**
     * Register an object to be called for item creation and update events
     *
     * @param listener Listener to be notified for Item creation or updates
     */
    void setItemEventListener(ItemEventListener listener);

    /**
     * Registers an interest in the item. Once this method is called, any changes to the item
     * will result in a call to the onItemUpdate method in the listener.
     *
     * @param itemBankId the item bank id for the item.
     */
    void monitorItem(int itemBankId);

    /**
     * Retrieves the history of an item from the item bank
     *
     * @param itemBankId the item bank id for the item.
     * @param existingGitInfo Existing itembank info for the item. May be null. If it is not null, only
     *                        history entries since this entry will be returned.
     * @return The list of historical commits
     */
    List<ItemBankItemRevision> getItemHistory(int itemBankId, ItemGitInformation existingGitInfo);
    /**
     * Get a collection of all item bank identifiers contained in the source control group.
     *
     * @return A {@link java.util.List} of item bank identifiers.
     */
    List<Integer> getAllItemBankIds();

    /**
     * Determine if the {@link org.gitlab4j.api.models.Project} has the appropriate webhook to consider itself
     * monitored.
     *
     * @param projectId The id of the {@link org.gitlab4j.api.models.Project} to investigate
     * @return True if the {@link org.gitlab4j.api.models.Project} has the appropriate webhook to allow it to be
     * monitored for changes; otherwise false.
     */
    boolean isProjectMonitored(int projectId);
}
