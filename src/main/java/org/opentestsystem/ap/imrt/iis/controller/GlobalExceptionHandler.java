package org.opentestsystem.ap.imrt.iis.controller;

import org.opentestsystem.ap.imrt.common.exception.NotFoundException;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.exception.JobAbandonmentException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

/**
 * Global exception handler for IIS, to make sure all exceptions generate an
 * operational event.
 */
@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
    private static final Logger LOG = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    private final OperationalEventService logger;

    @Autowired
    public GlobalExceptionHandler(final OperationalEventService logger) {
        this.logger = logger;
    }

    /**
     * Handle the {@link org.springframework.batch.core.repository.JobExecutionAlreadyRunningException} thrown when a
     * user attempts to start a job that is already running.
     *
     * @param ex The {@link org.springframework.batch.core.repository.JobExecutionAlreadyRunningException} thrown by the
     *           {@link org.springframework.batch.core.launch.JobLauncher}
     * @return A message indicating the id of the {@link org.springframework.batch.core.Job} that is already running and
     * instructions on how to stop it.
     */
    @ExceptionHandler(JobExecutionAlreadyRunningException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    @ResponseBody
    protected String handleJobExecutionAlreadyRunningException(final JobExecutionAlreadyRunningException ex) {
        logger.error(LOG, ex, "A job is already running");
        return String.format("%s.  To abandon the running execution of this job, make a PUT call to /abandon, passing in the job instance id", ex.getMessage());
    }

    /**
     * Handle a {@link org.opentestsystem.ap.imrt.iis.exception.JobAbandonmentException} that was thrown while
     * attempting to abandon a {@link org.springframework.batch.core.JobExecution}.
     *
     * @param ex The {@link org.opentestsystem.ap.imrt.iis.exception.JobAbandonmentException} that was thrown
     * @return A message indicating the excepion that was thrown
     */
    @ExceptionHandler(JobAbandonmentException.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ResponseBody
    protected String handleJobManagementException(final JobAbandonmentException ex) {
        logger.error(LOG, ex, "Unexpected error abandoning a job");
        return String.format("An unexpected error was encountered abandoning with a job:  %s", ex.getMessage());
    }

    /**
     * Handle {@link org.opentestsystem.ap.imrt.common.exception.NotFoundException}s that can be thrown when making a
     * request for a resource that cannot be found.
     *
     * @param ex The {@link org.opentestsystem.ap.imrt.common.exception.NotFoundException} that was thrown
     * @return A message indicating the exception that was thrown
     */
    @ExceptionHandler(NotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    @ResponseBody
    protected String handleNotFoundException(final NotFoundException ex) {
        logger.error(LOG, ex, "Resource could not be found");
        return ex.getMessage();
    }

    /**
     * Handler for all RuntimeExceptions. Notifies the operationalEventService then
     * calls the default handler from the base class.
     *
     * @param ex      Exception that was thrown
     * @param request Request the exception was thrown from
     * @return ResponseEntity from the default handler
     */
    @ExceptionHandler(value = {Exception.class})
    protected ResponseEntity<Object> handleRuntimeException(Exception ex, WebRequest request) {
        logger.error(LOG, ex, "Unexpected error processing request");
        return handleException(ex, request);
    }
}
