package org.opentestsystem.ap.imrt.iis.controller;

import org.opentestsystem.ap.imrt.iis.service.OperationalEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

/**
 * Global exception handler for IIS, to make sure all exceptions generate an
 * operational event.
 */
@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    private final OperationalEventService operationalEventService;

    public GlobalExceptionHandler(OperationalEventService operationalEventService) {
        this.operationalEventService = operationalEventService;
    }

    /**
     * Handler for all RuntimeExceptions. Notifies the operationalEventService then
     * calls the default handler from the base class.
     * @param ex  Exception that was thrown
     * @param request  Request the exception was thrown from
     * @return ResponseEntity from the default handler
     */
    @ExceptionHandler(value = { RuntimeException.class })
    protected ResponseEntity<Object> handleRuntimeException(RuntimeException ex, WebRequest request) {
        operationalEventService.serviceError(logger, ex, "Unexpected error processing request");
        return handleException(ex, request);
    }
}
