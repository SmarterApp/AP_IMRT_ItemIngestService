package org.opentestsystem.ap.imrt.iis.repository;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * A collection that will page using Spring Data to get the next page when moving onto the "next page"
 * @param <T>
 */
public class PageableCollection<T> implements Iterable<T>
{
    private static final int DEFAULT_PAGE_SIZE = 100;

    private PageableDataFetcher<?, T> fetcher;
    private int pageSize;

    public PageableCollection(PageableDataFetcher<?, T> f) {
        this(f, DEFAULT_PAGE_SIZE);
    }

    public PageableCollection(PageableDataFetcher<?, T> f, int pageSize)
    {
        this.fetcher = f;
        this.pageSize = pageSize;
    }

    @Override
    public Iterator<T> iterator()
    {
        return new PageableIterator<T>(fetcher, pageSize);
    }


    private class PageableIterator<T> implements Iterator<T>
    {
        private static final int FIRST_PAGE = 0;

        private List<T> currentData;
        private int cursor;
        private int pageSize;
        private Pageable page;
        private PageableDataFetcher<?, T> fetcher;

        public PageableIterator(PageableDataFetcher<?, T> f, int pageSize) {
            this.fetcher = f;
            this.pageSize = pageSize;
            page = new PageRequest(FIRST_PAGE, pageSize);
            currentData = new ArrayList<T>();
        }

        @Override
        public boolean hasNext()
        {
            if (hasDataLoaded()) {
                return true;
            }

            tryToFetchMoreData();
            return !currentData.isEmpty();
        }

        private void tryToFetchMoreData()
        {
            currentData = fetcher.fetch(page);
            page = new PageRequest(page.getPageNumber()+1, pageSize, page.getSort());
            cursor = 0;
        }

        private boolean hasDataLoaded()
        {
            return cursor < currentData.size();
        }

        @Override
        public T next()
        {
            return currentData.get(cursor++);
        }

        @Override
        public void remove()
        {
            throw new UnsupportedOperationException();
        }
    }
}
