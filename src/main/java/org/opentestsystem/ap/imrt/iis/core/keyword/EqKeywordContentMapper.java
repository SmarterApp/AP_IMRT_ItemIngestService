package org.opentestsystem.ap.imrt.iis.core.keyword;

import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.content.EqItemContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EqSection.LEFT_LABEL;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EqSection.PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EqSection.RIGHT_LABEL;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EqSection.SPANISH_LEFT_LABEL;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EqSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EqSection.SPANISH_RIGHT_LABEL;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.imrt.iis.core.keyword.KeywordContentUtil.convertContentToKeywordString;

@Component
public class EqKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_EQ, iatItem.getType()));
        }

        EqItem eqItem = (EqItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>(getEnglishContent(baseItem, eqItem));
        contents.addAll(getSpanishContent(baseItem, eqItem));

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof EqItem;
    }

    private Collection<KeywordContent> getEnglishContent(final BaseItem baseItem, final EqItem eqItem) {
        final Set<KeywordContent> contents = new HashSet<>();

        EqItemContent eqItemContent = eqItem.getCore().getEn();

        String englishPrompt = eqItemContent.getPrompt();
        if (isNotBlank(englishPrompt)) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(englishPrompt)));
        }

        eqItemContent.getParts().forEach(eqPart -> {
            if (isNotBlank(eqPart.getLeftLabel())) {
                contents.add(new KeywordContent(baseItem, LEFT_LABEL, convertContentToKeywordString(eqPart.getLeftLabel())));
            }

            if (isNotBlank(eqPart.getRightLabel())) {
                contents.add(new KeywordContent(baseItem, RIGHT_LABEL, convertContentToKeywordString(eqPart.getRightLabel())));
            }
        });

        return contents;
    }

    private Collection<KeywordContent> getSpanishContent(final BaseItem baseItem, final EqItem eqItem) {
        final Set<KeywordContent> contents = new HashSet<>();

        if (eqItem.getTranslations() == null
                || eqItem.getTranslations().getEsp() == null) {
            return contents;
        }

        EqItemContent spanishContent = eqItem.getTranslations().getEsp();
        if (isNotBlank(spanishContent.getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(eqItem.getTranslations().getEsp().getPrompt())));
        }

        spanishContent.getParts().forEach(eqPart -> {
            if (isNotBlank(eqPart.getLeftLabel())) {
                contents.add(new KeywordContent(baseItem, SPANISH_LEFT_LABEL, convertContentToKeywordString(eqPart.getLeftLabel())));
            }

            if (isNotBlank(eqPart.getRightLabel())) {
                contents.add(new KeywordContent(baseItem, SPANISH_RIGHT_LABEL, convertContentToKeywordString(eqPart.getRightLabel())));
            }
        });

        return contents;
    }
}
