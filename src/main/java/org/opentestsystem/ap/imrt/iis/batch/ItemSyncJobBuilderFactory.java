package org.opentestsystem.ap.imrt.iis.batch;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.configuration.DuplicateJobException;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.support.ReferenceJobFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Creates and registers a new instance of the item sync job. We create a new
 * instance each time, rather than creating a single bean, since we want to
 * go to the itembank each time to get the list of item bank ids.
 */
@Service
public class ItemSyncJobBuilderFactory {
    private static final String jobName = "itemSynchronizationJob";
    private final JobBuilderFactory jobBuilderFactory;
    private final JobExecutionListener itemSynchronizationJobExecutionListener;
    private final ItemSyncStepBuilderFactory itemSyncStepBuilderFactory;

    @Autowired
    JobRegistry jobRegistry;

    public ItemSyncJobBuilderFactory(JobBuilderFactory jobBuilderFactory,
                                     JobExecutionListener itemSynchronizationJobExecutionListener,
                                     ItemSyncStepBuilderFactory itemSyncStepBuilderFactory) {
        this.jobBuilderFactory = jobBuilderFactory;
        this.itemSynchronizationJobExecutionListener = itemSynchronizationJobExecutionListener;
        this.itemSyncStepBuilderFactory = itemSyncStepBuilderFactory;
    }

    /**
     * Builds the item sync job
     * @return A fully configured ItemSync job
     * @throws DuplicateJobException This should not happen since we check the registry before we register the job
     */
    public Job buildItemSynchronizationJob() throws DuplicateJobException {
        Job job = jobBuilderFactory.get(jobName)
                .incrementer(new RunIdIncrementer())
                .listener(itemSynchronizationJobExecutionListener)
                .flow(itemSyncStepBuilderFactory.buildItemSynchronizationStep())
                .end()
                .build();
        // If we haven't already, register our job. This is the magic that lets
        // the jobOperator find the job to manage it.
        if (!jobRegistry.getJobNames().contains(jobName)) {
            jobRegistry.register(new ReferenceJobFactory(job));
        }
        return job;
    }
}
