package org.opentestsystem.ap.imrt.iis.repository.impl;

import org.opentestsystem.ap.common.rest.item.ItemCommitResponse;
import org.opentestsystem.ap.common.rest.item.ItemEntityResponse;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.RemoteItemRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public class TimsItemRepository implements RemoteItemRepository {
    private static final Logger LOG = LoggerFactory.getLogger(TimsItemRepository.class);
    private static final String itemEntityBasePath = "/api/v1/entities/item/";
    private static final String allItemsPath = "/api/v1/items";

    private final RestTemplate restTemplate;

    private final ItemIngestServiceProperties itemIngestServiceProperties;

    public TimsItemRepository(final RestTemplate restTemplate,
                              final ItemIngestServiceProperties itemIngestServiceProperties) {
        this.restTemplate = restTemplate;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
    }

    @Override
    public Optional<ItemEntityResponse> findItemEntityById(UUID commitId) {
        URI uri = UriComponentsBuilder.fromHttpUrl(itemIngestServiceProperties.getItemManagementServiceUrl())
                .path(itemEntityBasePath)
                .path("commit/{commitId}")
                .buildAndExpand(commitId)
                .toUri();

        ItemEntityResponse itemEntityResponse = restTemplate.getForObject(uri, ItemEntityResponse.class);
        return Optional.ofNullable(itemEntityResponse);
    }

    @Override
    public ItemCommitResponse findMasterItemCommitsSinceCommit(int itemId, UUID fromCommitId) {
        URI uri = UriComponentsBuilder.fromHttpUrl(itemIngestServiceProperties.getItemManagementServiceUrl())
                .path(itemEntityBasePath)
                .path("{itemId}/commit")
                .queryParam("lastCommitId", fromCommitId)
                .buildAndExpand(itemId)
                .toUri();

        ItemCommitResponse itemCommitResponse = restTemplate.getForObject(uri, ItemCommitResponse.class);
        return itemCommitResponse;
    }

    @Override
    public List<String> getItemIdsInItemBank() {
        URI uri = UriComponentsBuilder.fromHttpUrl(itemIngestServiceProperties.getItemManagementServiceUrl())
                .path(allItemsPath)
                .queryParam("fields", "id")
                .build()
                .toUri();

        ResponseEntity<List<String>> response = restTemplate.exchange(
                uri.toString(),
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<String>>() {
                });

        return response.getBody();
    }

    @Override
    public Optional<ItemEntityResponse> findLatestItemEntityByItemId(final String itemId) {
        URI uri = UriComponentsBuilder.fromHttpUrl(itemIngestServiceProperties.getItemManagementServiceUrl())
                .path(itemEntityBasePath)
                .path("{itemId}")
                .buildAndExpand(itemId)
                .toUri();

        ItemEntityResponse itemEntityResponse = restTemplate.getForObject(uri, ItemEntityResponse.class);
        return Optional.ofNullable(itemEntityResponse);
    }

    @Override
    public Optional<ItemCommitResponse> findCommits(final String itemId) {
        String uriString = UriComponentsBuilder.fromHttpUrl(itemIngestServiceProperties.getItemManagementServiceUrl())
                .path(itemEntityBasePath)
                .path("{itemId}/commit")
                .buildAndExpand(itemId)
                .toUriString();

        try {
            ResponseEntity<ItemCommitResponse> itemCommitResponse = restTemplate.getForEntity(uriString, ItemCommitResponse.class);
            return Optional.ofNullable(itemCommitResponse.getBody());
        } catch (Exception e) {
            LOG.error("Failed to make query", e);
        }

        return Optional.empty();
    }
}
