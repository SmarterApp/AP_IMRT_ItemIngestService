package org.opentestsystem.ap.imrt.iis.repository;

import org.gitlab4j.api.Pager;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Commit;
import org.gitlab4j.api.models.Group;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.Project;
import org.gitlab4j.api.models.ProjectHook;
import org.gitlab4j.api.models.RepositoryFile;

import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * An interface for interacting with GitLab data
 */
public interface GitLabRepository {
    /**
     * Add a {@link org.gitlab4j.api.models.ProjectHook} on the project in GitLab.
     *
     * @param itemBankId The item bank identifier (the project_id in GitLab)
     * @return The {@link org.gitlab4j.api.models.ProjectHook} that was created for the item; otherwise
     * {@link java.util.Optional#empty()}
     */
    Optional<ProjectHook> addProjectHook(final int itemBankId);

    /**
     * Fnd all {@link org.gitlab4j.api.models.Namespace}s for the configured project group name
     *
     * @param projectGroupName The name of the GitLab project group
     * @return A {@link java.util.List<org.gitlab4j.api.models.Namespace>} representing all namespaces for the specified
     * project group name
     */
    List<Namespace> findAllNamespaces(final String projectGroupName);

    /**
     * Find a specific {@link org.gitlab4j.api.models.RepositoryFile} within the specified
     * {@link org.gitlab4j.api.models.Branch}
     *
     * @param itemBankId The item bank identifier (the project_id in GitLab)
     * @param fileName   The name of the file to find
     * @param branchName The name of the {@link org.gitlab4j.api.models.Branch} that contains the file
     * @return A {@link org.gitlab4j.api.models.RepositoryFile} representing the file for the specified item bank id
     */
    Optional<RepositoryFile> findFile(final int itemBankId, final String fileName, final String branchName);

    /**
     * Find all {@link org.gitlab4j.api.models.Branch}es for a given item bank id.
     *
     * @param itemBankId The item bank identifier (the project_id in GitLab)
     * @return A {@link java.util.List<org.gitlab4j.api.models.Branch>} representing all branches for the specified item
     * bank identifier
     */
    List<Branch> getAllBranches(final int itemBankId);

    /**
     * Find all {@link org.gitlab4j.api.models.ProjectHook}s attached to the specified item.
     *
     * @param itemBankId The item bank identifier (the project_id in GitLab)
     * @return A {@link List<org.gitlab4j.api.models.ProjectHook>} representing all project hooks that have been
     * attached to the item.
     */
    List<ProjectHook> getAllProjectHooks(final int itemBankId);

    /**
     * Get all the {@link org.gitlab4j.api.models.Commit}s for a specified file on a specified branch.
     *
     * @param itemBankId The item bank identifier (the project_id in GitLab)
     * @param branchName The name of the {@link org.gitlab4j.api.models.Branch} that contains the relevant commits
     * @param from       The lower-bound of the date range for when commits should be fetched
     * @param to         the upper-bound of the date range for when commits should be fetched
     * @param pageSize   The maximum number of commits contained in a single "page" of data
     * @return A {@link org.gitlab4j.api.Pager} containing a "page" of commit records
     */
    Optional<Pager<Commit>> findAllCommitsForProject(final int itemBankId,
                                                  final String branchName,
                                                  final Date from,
                                                  final Date to,
                                                  final int pageSize);

    /**
     * Fetch all of the {@link org.gitlab4j.api.models.Project}s contained within GitLab.
     *
     * @param pageSize The maximum number of commits contained in a single "page" of data
     * @return A {@link org.gitlab4j.api.Pager} containing a "page" of project records; otherwise
     * {@link java.util.Optional#empty()}
     */
    Optional<Pager<Project>> findAllProjects(final int pageSize);

    /**
     * Fetch all of the {@link org.gitlab4j.api.models.Project}s contained within Gitlab group.
     *
     * @param pageSize The maximum number of commits contained in a single "page" of data
     * @param groupId  The group id for the projects
     * @return A {@link org.gitlab4j.api.Pager} containing a "page" of project records; otherwise
     * {@link java.util.Optional#empty()}
     */
    Optional<Pager<Project>> findAllProjects(final int groupId, final int pageSize);

    /**
     * Find a project by id.
     *
     * @param projectId the Gitlab project id
     * @return {@link Project} otherwise empty if not found
     */
    Optional<Project> findProject(int projectId);

    /**
     * Find group by group path
     *
     * @param groupPath the group path for the group
     * @return the {@link Group} if found otherwise empty
     */
    Optional<Group> findGroup(String groupPath);

    /**
     * Fetch a specific {@link org.gitlab4j.api.models.Commit} from GitLab.
     *
     * @param itemBankId The item bank identifier (the project_id in GitLab)
     * @param commitHash the SHA hash of the {@link org.gitlab4j.api.models.Commit} to find
     * @return The {@link org.gitlab4j.api.models.Commit} for the specified commit hash; otherwise
     * {@link java.util.Optional#empty()}
     */
    Optional<Commit> findCommit(final int itemBankId, final String commitHash);
}
