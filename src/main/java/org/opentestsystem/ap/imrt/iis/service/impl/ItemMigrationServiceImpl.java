package org.opentestsystem.ap.imrt.iis.service.impl;

import org.apache.commons.collections4.IterableUtils;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.model.ItemMigrationResponse;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemIngestService;
import org.opentestsystem.ap.imrt.iis.service.ItemMigrationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ItemMigrationServiceImpl implements ItemMigrationService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemMigrationServiceImpl.class);
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemIngestService itemIngestService;
    private final ItemIngestServiceProperties itemIngestServiceProperties;
    private final OperationalEventService logger;

    public ItemMigrationServiceImpl(final ItemGitInformationRepository itemGitInformationRepository,
                                    final ItemIngestService itemIngestService,
                                    final ItemIngestServiceProperties itemIngestServiceProperties,
                                    final OperationalEventService logger) {
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemIngestService = itemIngestService;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
        this.logger = logger;
    }

    @Override
    public ItemMigrationResponse migrateAllExistingItems() {
        Pageable pageRequest = new PageRequest(0, itemIngestServiceProperties.getImrtPageQueryLimit());
        Page<ItemGitInformation> itemGitInformationPage;
        int numberOfItemBankIds = 0;
        int numberOfErrors = 0;

        do {
            itemGitInformationPage = itemGitInformationRepository.findAll(pageRequest);

            final List<ItemGitInformation> itemGitInformationList =
                    IterableUtils.toList(itemGitInformationPage.getContent());
            for (final ItemGitInformation itemGitInformation : itemGitInformationList) {
                try {
                    final ItemGitInformation currentRevision = itemIngestService.syncItemWithLatestRevision(itemGitInformation);
                    logger.info(LOG, "Migrated itembank id {}: item id {} to commit hash ", currentRevision.getProjectId(), itemGitInformation.getItem().getId(), itemGitInformation.getCurrentCommitHash());
                    numberOfItemBankIds++;
                } catch (final Exception e) {
                    // In this case, we want to continue processing items even if an exception is encountered.
                    // Instead of throwing, the exception will be logged and the migration process will continue.
                    logger.error(LOG,
                            e,
                            "Unexpected error attempting to migrate itemBankId {}, commit hash {}",
                            itemGitInformation.getProjectId(),
                            itemGitInformation.getCurrentCommitHash());

                    numberOfErrors++;
                }
            }

            pageRequest = itemGitInformationPage.nextPageable();
        } while (itemGitInformationPage.hasNext());

        return new ItemMigrationResponse(numberOfItemBankIds, numberOfErrors);
    }
}
