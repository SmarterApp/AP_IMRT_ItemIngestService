package org.opentestsystem.ap.imrt.iis.message;

import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.rest.item.ItemCommitResponse;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.service.BaseItemService;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.UUID;

@Component
public class ItemSyncListener {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSyncListener.class);
    private final BaseItemService baseItemService;
    private final OperationalEventService operationalEventService;
    private final ItemEventListener itemEventListener;
    private final ItemService itemService;
    private final ItemDeleteNotificationHandler itemDeleteNotificationHandler;

    public ItemSyncListener(final BaseItemService baseItemService, final OperationalEventService operationalEventService, final ItemEventListener itemEventListener, final ItemService itemService, final ItemDeleteNotificationHandler itemDeleteNotificationHandler) {
        this.baseItemService = baseItemService;
        this.operationalEventService = operationalEventService;
        this.itemEventListener = itemEventListener;
        this.itemService = itemService;
        this.itemDeleteNotificationHandler = itemDeleteNotificationHandler;
    }

    public void synchronizeItem(Integer itemId) {
        Optional<UUID> maybeCommitId = baseItemService.findItemCommitId(itemId);
        ItemUpdateEvent event;

        if (maybeCommitId.isPresent()) {
            operationalEventService.info(LOG, "Item id {} being synced with last commit id {}", itemId, maybeCommitId.get());
            event = new ItemUpdateEvent(itemId, maybeCommitId.get());
        } else {
            operationalEventService.info(LOG, "Item id {} had no commits so syncing fresh from first commit", itemId);
            ItemCommitResponse itemCommitResponse = itemService.findAllCommits(itemId).orElseThrow(() -> new RuntimeException("Could not find item commits from IMS for item " + itemId));

            if (itemCommitResponse.getCommits().isEmpty()) {
                operationalEventService.info(LOG, "No commits found for Item id {} had no commits so syncing fresh from first commit", itemId);
                itemDeleteNotificationHandler.processItemMessage(itemId);
                return;
            }

            event = new ItemUpdateEvent(itemId, itemCommitResponse.getCommits().get(0));
        }

        operationalEventService.info(LOG, "Updating item id {} using commit id {}", event.getItemId(), event.getCommitId());
        itemEventListener.onUpdateItem(event);
    }
}
