package org.opentestsystem.ap.imrt.iis.repository.impl;


import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.model.validation.ValidationResults;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.Optional;

@Repository
public class ItemTabulatorRepositoryImpl implements ItemTabulatorRepository {
    private static final Logger LOG = LoggerFactory.getLogger(ItemTabulatorRepositoryImpl.class);
    private final OperationalEventService operationalEventService;
    private final RestTemplate restTemplate;
    private final ItemIngestServiceProperties itemIngestServiceProperties;

    public ItemTabulatorRepositoryImpl(final OperationalEventService operationalEventService,
                                       final RestTemplate restTemplate,
                                       final ItemIngestServiceProperties itemIngestServiceProperties) {
        this.operationalEventService = operationalEventService;
        this.restTemplate = restTemplate;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
    }

    @Override
    public Optional<ValidationResults> getValidationResults(final int itemId) {
        final URI url = UriComponentsBuilder
                .fromHttpUrl(itemIngestServiceProperties.getItemValidationServiceUrl())
                .pathSegment("api/v1/validate")
                .pathSegment("{itemId}")
                .buildAndExpand(itemId)
                .toUri();

        try {
            ResponseEntity<ValidationResults> validationResults = restTemplate.getForEntity(url, ValidationResults.class);
            return Optional.of(validationResults.getBody());
        } catch (HttpClientErrorException e) {
            if (HttpStatus.NOT_FOUND.equals(e.getStatusCode())) {
                operationalEventService.warn(LOG, null, "IVS returned 404 for item {}", itemId);
            } else {
                throw e;
            }
        }

        return Optional.empty();
    }
}
