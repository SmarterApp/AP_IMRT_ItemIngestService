package org.opentestsystem.ap.imrt.iis.core.mapper;

import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.content.EbsrItemContent;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.PART_A_OPTIONS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.PART_A_STEM;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.PART_B_OPTIONS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.PART_B_STEM;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.SPANISH_PART_A_OPTIONS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.SPANISH_PART_A_STEM;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.SPANISH_PART_B_OPTIONS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.SPANISH_PART_B_STEM;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.EbsrSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.imrt.iis.core.mapper.KeywordContentUtil.convertContentToKeywordString;

@Component
public class EbsrKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_EBSR, iatItem.getType()));
        }

        EbsrItem ebsrItem = (EbsrItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>(getEnglishContent(baseItem, ebsrItem));
        contents.addAll(getSpanishContent(baseItem, ebsrItem));

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof EbsrItem;
    }

    private Collection<KeywordContent> getEnglishContent(final BaseItem baseItem, final EbsrItem ebsrItem) {
        final Set<KeywordContent> contents = new HashSet<>();

        EbsrItemContent ebsrItemContent = ebsrItem.getCore().getEn();

        String englishPrompt = ebsrItemContent.getPrompt();
        if (isNotBlank(englishPrompt)) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(englishPrompt)));
        }

        if (isNotBlank(ebsrItemContent.getPartAPrompt())) {
            contents.add(new KeywordContent(baseItem, PART_A_STEM, convertContentToKeywordString(ebsrItemContent.getPartAPrompt())));
        }

        if (isNotBlank(ebsrItemContent.getPartBPrompt())) {
            contents.add(new KeywordContent(baseItem, PART_B_STEM, convertContentToKeywordString(ebsrItemContent.getPartBPrompt())));
        }

        contents.addAll(convertOptions(baseItem, PART_A_OPTIONS, ebsrItemContent.getPartAOptions()));
        contents.addAll(convertOptions(baseItem, PART_B_OPTIONS, ebsrItemContent.getPartBOptions()));

        return contents;
    }

    private Collection<KeywordContent> convertOptions(final BaseItem baseItem, final String section, final List<ItemOption> options) {
        return options.stream()
                .filter(itemOption -> isNotBlank(itemOption.getText()))
                .map(itemOption -> new KeywordContent(baseItem, section, convertContentToKeywordString(itemOption.getText())))
                .collect(Collectors.toSet());
    }

    private Collection<KeywordContent> getSpanishContent(final BaseItem baseItem, final EbsrItem ebsrItem) {
        final Set<KeywordContent> contents = new HashSet<>();

        if (ebsrItem.getTranslations() == null
                || ebsrItem.getTranslations().getEsp() == null) {
            return contents;
        }

        EbsrItemContent spanishContent = ebsrItem.getTranslations().getEsp();
        if (isNotBlank(spanishContent.getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(spanishContent.getPrompt())));
        }

        if (isNotBlank(spanishContent.getPartAPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PART_A_STEM, convertContentToKeywordString(spanishContent.getPartAPrompt())));
        }

        if (isNotBlank(spanishContent.getPartBPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PART_B_STEM, convertContentToKeywordString(spanishContent.getPartBPrompt())));
        }

        contents.addAll(convertOptions(baseItem, SPANISH_PART_A_OPTIONS, spanishContent.getPartAOptions()));
        contents.addAll(convertOptions(baseItem, SPANISH_PART_B_OPTIONS, spanishContent.getPartBOptions()));

        return contents;
    }
}
