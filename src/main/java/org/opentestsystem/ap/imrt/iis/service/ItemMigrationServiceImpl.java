package org.opentestsystem.ap.imrt.iis.service;

import org.apache.commons.collections4.IterableUtils;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;

public class ItemMigrationServiceImpl implements ItemMigrationService {
    private static final Logger logger = LoggerFactory.getLogger(ItemMigrationServiceImpl.class);
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemUpdateNotificationHandler itemUpdateNotificationHandler;
    private final ItemIngestServiceProperties itemIngestServiceProperties;
    private final OperationalEventService operationalEventService;

    public ItemMigrationServiceImpl(final ItemGitInformationRepository itemGitInformationRepository,
                                    final ItemUpdateNotificationHandler itemUpdateNotificationHandler,
                                    final ItemIngestServiceProperties itemIngestServiceProperties,
                                    final OperationalEventService operationalEventService) {
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemUpdateNotificationHandler = itemUpdateNotificationHandler;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
        this.operationalEventService = operationalEventService;
    }

    @Override
    public void migrate() {
        Pageable pageRequest = new PageRequest(0, itemIngestServiceProperties.getPageSize());
        Page<ItemGitInformation> itemGitInformationPage;

        do {
            itemGitInformationPage = itemGitInformationRepository.findAll(pageRequest);

            final List<ItemGitInformation> itemGitInformationList =
                    IterableUtils.toList(itemGitInformationPage.getContent());
            for (final ItemGitInformation itemGitInformation : itemGitInformationList) {
                try {
                    itemUpdateNotificationHandler.migrateItem(itemGitInformation);
                } catch (final Exception e) {
                    // In this case, we want to continue processing items even if an exception is encountered.
                    // Instead of throwing, the exception will be logged and the migration process will continue.
                    operationalEventService.serviceError(logger,
                            e,
                            "Unexpected error attempting to migrate itemBankId {}, commit hash {}",
                            itemGitInformation.getProjectId(),
                            itemGitInformation.getCurrentCommitHash());
                }
            }

            pageRequest = itemGitInformationPage.nextPageable();
        } while (itemGitInformationPage.hasNext());
    }
}
