package org.opentestsystem.ap.imrt.iis.core.keyword;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.KeywordContent;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.content.HtqoItemContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqoSection.INTERACTIVE_TEXTS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqoSection.PROMPT;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqoSection.SPANISH_INTERACTIVE_TEXTS;
import static org.opentestsystem.ap.common.imrt.model.KeywordContentSection.HtqoSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.imrt.iis.core.keyword.KeywordContentUtil.convertContentToKeywordString;

@Component
public class HtqoKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_HTQO, iatItem.getType()));
        }

        HtqoItem htqoItem = (HtqoItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>(getEnglishKeywordContent(baseItem, htqoItem));
        contents.addAll(getSpanishKeywordContent(baseItem, htqoItem));

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof HtqoItem;
    }

    private Collection<KeywordContent> getEnglishKeywordContent(BaseItem baseItem, HtqoItem htqoItem) {
        List<KeywordContent> contents = new ArrayList<>();
        HtqoItemContent content = htqoItem.getCore().getEn();

        if (StringUtils.isNotBlank(content.getPrompt())) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(content.getPrompt())));
        }

        List<KeywordContent> orderables = content.getHtqOrderable().getOrderableStrings()
                .stream()
                .map(s1 -> new KeywordContent(baseItem, INTERACTIVE_TEXTS, convertContentToKeywordString(s1)))
                .collect(Collectors.toList());

        contents.addAll(orderables);

        return contents;
    }

    private Collection<KeywordContent> getSpanishKeywordContent(BaseItem baseItem, HtqoItem htqoItem) {
        List<KeywordContent> contents = new ArrayList<>();

        if (htqoItem.getTranslations() == null || htqoItem.getTranslations().getEsp() == null) {
            return contents;
        }

        HtqoItemContent content = htqoItem.getTranslations().getEsp();

        if (StringUtils.isNotBlank(content.getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(content.getPrompt())));
        }

        List<KeywordContent> orderables = content.getHtqOrderable().getOrderableStrings()
                .stream()
                .map(s1 -> new KeywordContent(baseItem, SPANISH_INTERACTIVE_TEXTS, convertContentToKeywordString(s1)))
                .collect(Collectors.toList());

        contents.addAll(orderables);

        return contents;
    }
}
