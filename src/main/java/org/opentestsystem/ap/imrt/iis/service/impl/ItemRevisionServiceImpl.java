package org.opentestsystem.ap.imrt.iis.service.impl;

import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.model.Stimulus;
import org.opentestsystem.ap.common.imrt.repository.AttachmentRepository;
import org.opentestsystem.ap.common.imrt.repository.ContentUpdateNeedRepository;
import org.opentestsystem.ap.common.imrt.repository.ImrtItemRepository;
import org.opentestsystem.ap.common.imrt.repository.ItemAssignmentRepository;
import org.opentestsystem.ap.common.imrt.repository.StimulusRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemLogRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemRevisionService;
import org.opentestsystem.ap.imrt.iis.service.KeywordContentService;
import org.opentestsystem.ap.imrt.iis.service.TestAdministrationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Implementation of ItemRevisionWriter interface that stores the various parts of an item revision
 * to the appropriate respositories in a single transaction, to ensure foreign key consistency.
 */
@Service
public class ItemRevisionServiceImpl implements ItemRevisionService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemRevisionServiceImpl.class);

    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ImrtItemRepository imrtItemRepository;
    private final ItemLogRepository itemLogRepository;
    private final OperationalEventService logger;
    private final StimulusRepository stimulusRepository;
    private final KeywordContentService keywordContentService;
    private final TestAdministrationService testAdministrationService;
    private final AttachmentRepository attachmentRepository;
    private final ContentUpdateNeedRepository contentUpdateNeedRepository;
    private final ItemAssignmentRepository itemAssignmentRepository;

    public ItemRevisionServiceImpl(final ItemGitInformationRepository itemGitInformationRepository,
                                   final ImrtItemRepository imrtItemRepository,
                                   final ItemLogRepository itemLogRepository,
                                   final OperationalEventService logger,
                                   final StimulusRepository stimulusRepository,
                                   final KeywordContentService keywordContentService,
                                   final TestAdministrationService testAdministrationService,
                                   final AttachmentRepository attachmentRepository,
                                   final ContentUpdateNeedRepository contentUpdateNeedRepository,
                                   final ItemAssignmentRepository itemAssignmentRepository) {
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.imrtItemRepository = imrtItemRepository;
        this.itemLogRepository = itemLogRepository;
        this.logger = logger;
        this.stimulusRepository = stimulusRepository;
        this.keywordContentService = keywordContentService;
        this.testAdministrationService = testAdministrationService;
        this.attachmentRepository = attachmentRepository;
        this.contentUpdateNeedRepository = contentUpdateNeedRepository;
        this.itemAssignmentRepository = itemAssignmentRepository;
    }

    @Override
    @Transactional
    public void save(ItemRevision itemRevision) {
        // We always write the item and it's git information
        BaseItem item = itemRevision.getItem();

        if (item instanceof Stimulus) {
            saveStimulus(itemRevision);
        } else {
            saveImrtItem(itemRevision);
        }

        keywordContentService.saveKeywords(itemRevision);
        testAdministrationService.saveForms(itemRevision);
        saveAttachments(itemRevision);
        saveContentNeeds(itemRevision);
        saveAssignments(itemRevision);

        logger.debug(LOG, "Item saved to database. item id: {} database key {}", item.getId(), item.getKey());
    }

    private void saveAttachments(ItemRevision itemRevision) {
        if(itemRevision.getItem().getKey() != null) {
            attachmentRepository.deleteByItemKey(itemRevision.getItem().getKey());
        }

        if(!itemRevision.getAttachments().isEmpty()) {
            attachmentRepository.save(itemRevision.getAttachments());
        }
    }

    private void saveContentNeeds(ItemRevision itemRevision) {
        if(itemRevision.getItem().getKey() != null) {
            contentUpdateNeedRepository.deleteByItemKey(itemRevision.getItem().getKey());
        }

        if(!itemRevision.getContentUpdateNeeds().isEmpty()) {
            contentUpdateNeedRepository.save(itemRevision.getContentUpdateNeeds());
        }
    }

    private void saveAssignments(ItemRevision itemRevision) {
        if(itemRevision.getItem().getKey() != null) {
            itemAssignmentRepository.deleteByItemKey(itemRevision.getItem().getKey());
        }

        if(!itemRevision.getItemAssignments().isEmpty()) {
            itemAssignmentRepository.save(itemRevision.getItemAssignments());
        }
    }

    private void saveImrtItem(final ItemRevision itemRevision) {
        ImrtItem imrtItem = (ImrtItem) itemRevision.getItem();
        Optional<Integer> linkedStimulusId = itemRevision.getLinkedStimulusId();

        if (linkedStimulusId.isPresent() && (imrtItem.getStimulus() == null || !imrtItem.getStimulus().getId().equals(imrtItem.getAssociatedStimulusId()))) {
            // Check for a linked stimulus
            Stimulus stimulus = stimulusRepository.findById(linkedStimulusId.get());
            if (null != stimulus) {
                imrtItem.setStimulus(stimulus);
            } else {
                logger.warn(LOG, null, "Unable to find linked stimulus in database for item id {} stimulus id {}",
                        imrtItem.getId(), linkedStimulusId);
            }
        } else {
            imrtItem.setStimulus(null);
        }

        imrtItemRepository.save(imrtItem);
    }

    private void saveStimulus(final ItemRevision itemRevision) {
        Stimulus stimulus = (Stimulus) itemRevision.getItem();

        if (stimulus.getKey() == null) {
            List<ImrtItem> associatedItems = imrtItemRepository.findAllByAssociatedStimulusId(stimulus.getId())
                    .stream()
                    .filter(imrtItem -> (imrtItem.getStimulus() == null || !imrtItem.getStimulus().getId().equals(stimulus.getId())))
                    .collect(Collectors.toList());

            stimulus.setAssociatedItems(associatedItems);
        }

        stimulusRepository.save(stimulus);
    }
}
