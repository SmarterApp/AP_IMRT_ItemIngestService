package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.imrt.iis.batch.ItemMigrationTasklet;
import org.opentestsystem.ap.imrt.iis.service.ItemMigrationService;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Configure Spring Batch to execute the item migration process as a {@link org.springframework.batch.core.Job}.
 * Typically, this job will be run to populate new fields in the IMRT database (e.g. after a deployment that has a
 * schema change).
 * <p>
 * Item Migration Job rules:
 * </p>
 * <p>
 * 1. Only one instance of the job should run at a time. If the job is currently running, other requests to start the
 * item migration job should be rejected
 * 2. The job should not run when Spring Boot starts up. Instead, the job should be started by a call to a web endpoint
 * (e.g. a RESTful call)
 * 3. The same job should be able to run multiple times (i.e. it should be repeatable).
 * </p>
 */
@Configuration
public class ItemMigrationBatchJobConfiguration {

    /**
     * Create a {@link org.springframework.batch.core.Job} that complies with the rules cited above.
     *
     * @param jobBuilderFactory    A {@link org.springframework.batch.core.configuration.annotation.JobBuilderFactory} for
     *                             building the {@link org.springframework.batch.core.Job}
     * @param itemMigrationStep    A {@link org.springframework.batch.core.Step} that executes the item
     *                             migration process
     * @param jobExecutionListener An {@link org.springframework.batch.core.JobExecutionListener}
     * @return A {@link org.springframework.batch.core.Job} with the step(s) necessary to execute the item migration
     * process.
     */
    @Bean
    public Job itemMigrationJob(final JobBuilderFactory jobBuilderFactory,
                                final Step itemMigrationStep,
                                final JobExecutionListener jobExecutionListener) {
        return jobBuilderFactory.get("itemMigrationJob")
                .incrementer(new RunIdIncrementer())
                .listener(jobExecutionListener)
                .start(itemMigrationStep)
                .build();
    }

    /**
     * A {@link org.springframework.batch.core.Step} to execute the item migration process within a
     * {@link org.springframework.batch.core.Job}.
     *
     * @param stepBuilderFactory   The {@link org.springframework.batch.core.configuration.annotation.StepBuilderFactory}
     *                             that will build an instance of a {@link org.springframework.batch.core.Step} for the
     *                             item migration job.
     * @param itemMigrationTasklet The {@link org.springframework.batch.core.step.tasklet.Tasklet} that rune the item
     *                             migration process.
     * @return A {@link org.springframework.batch.core.Step} for the item migration process
     * {@link org.springframework.batch.core.Job}
     */
    @Bean
    public Step itemMigrationStep(final StepBuilderFactory stepBuilderFactory,
                                  final Tasklet itemMigrationTasklet) {
        return stepBuilderFactory.get("itemMigrationStep")
                .tasklet(itemMigrationTasklet)
                .allowStartIfComplete(true)
                .build();
    }

    /**
     * A {@link org.springframework.batch.core.step.tasklet.Tasklet} representing the item migration process.
     * This is what the {@link org.springframework.batch.core.Step} will call to do the actual item migration
     * work.
     *
     * @param itemMigrationService An implementation of the
     *                             {@link org.opentestsystem.ap.imrt.iis.service.ItemMigrationService} to
     *                             perform the migration process.
     * @return A {@link org.springframework.batch.core.step.tasklet.Tasklet} implementation that can execute the item
     * migration process
     */
    @Bean
    public Tasklet itemMigrationTasklet(final ItemMigrationService itemMigrationService) {
        return new ItemMigrationTasklet(itemMigrationService);
    }
}
