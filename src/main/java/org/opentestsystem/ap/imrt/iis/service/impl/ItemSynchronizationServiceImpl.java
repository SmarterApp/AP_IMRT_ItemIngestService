package org.opentestsystem.ap.imrt.iis.service.impl;

import org.gitlab4j.api.Pager;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.imrt.model.ItemGitInformation;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.model.ItemSynchronizationResponse;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.PageableCollection;
import org.opentestsystem.ap.imrt.iis.repository.PageableDataFetcher;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.Instant;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;

@Service
public class ItemSynchronizationServiceImpl implements ItemSynchronizationService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSynchronizationServiceImpl.class);
    private final ItemBankClient itemBankClient;
    private final ItemEventListener itemEventListener;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemDeleteNotificationHandler itemDeleteNotificationHandler;
    private final OperationalEventService logger;

    @Autowired
    public ItemSynchronizationServiceImpl(final ItemBankClient itemBankClient,
                                          final ItemEventListener itemEventListener,
                                          final ItemGitInformationRepository itemGitInformationRepository,
                                          final ItemDeleteNotificationHandler itemDeleteNotificationHandler,
                                          final OperationalEventService logger) {
        this.itemBankClient = itemBankClient;
        this.itemEventListener = itemEventListener;
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemDeleteNotificationHandler = itemDeleteNotificationHandler;
        this.logger = logger;
    }

    @Override
    public ItemSynchronizationResponse synchronize() {
        final Instant syncJobStartTime = Instant.now();

        logger.info(LOG, "Removing IMRT projects no longer in item bank");
        final ItemSynchronizationResponse removeResponse = removeProjectsNoLongerInSourceControl();


        logger.info(LOG, "Syncing projects in item bank with IMRT");
        final Instant syncProjectStartTime = Instant.now();
        Optional<Pager<Project>> maybeProjectPager = itemBankClient.getProjectPage();

        if(!maybeProjectPager.isPresent()) {
            throw new RuntimeException("Unable to find configured project for ");
        }

        final Pager<Project> projectPager = maybeProjectPager.get();
        final int totalItemsSynced = projectPager.getTotalItems();
        logger.info(LOG, "retrieved {} item bank ids from source control in {} seconds",
                totalItemsSynced,
                Duration.between(syncJobStartTime, Instant.now()).getSeconds());

        int numberOfItemsWithoutWebhook = 0;

        while(projectPager.hasNext()) {
            for (final Project project : projectPager.next()) {
                Integer projectId = project.getId();
                // If the project does not any webhooks in place or if the project does not have any webhooks that match
                // IMRT's webhook URL configuration, create one.
                if (!itemBankClient.isProjectMonitored(projectId)) {
                    numberOfItemsWithoutWebhook++;
                    itemEventListener.onCreateItem(projectId);
                }

                itemEventListener.onUpdateItem(projectId);
            }
        }

        logger.info(LOG, "Synced {} projects. Process time: {} seconds", totalItemsSynced, Duration.between(syncProjectStartTime, Instant.now()).getSeconds());

        logger.info(LOG, "Sync Job Complete. Job time: {} seconds", Duration.between(syncJobStartTime, Instant.now()).getSeconds());

        return new ItemSynchronizationResponse(numberOfItemsWithoutWebhook,
                totalItemsSynced,
                removeResponse.getNumberOfItemsDeletedFromImrt());
    }

    private ItemSynchronizationResponse removeProjectsNoLongerInSourceControl() {
        final Instant removeProjectStartTime = Instant.now();

        Collection<Integer> idsToRemove = new HashSet<>();
        PageableDataFetcher<ItemGitInformationRepository, ItemGitInformation> fetcher = new PageableDataFetcher<ItemGitInformationRepository, ItemGitInformation>(itemGitInformationRepository) {
            @Override
            public List<ItemGitInformation> fetch(Pageable pageRequest)
            {
                return itemGitInformationRepository.findAll(pageRequest).getContent();
            }
        };

        PageableCollection<ItemGitInformation> pageableCollection = new PageableCollection<>(fetcher, 50);

        for(ItemGitInformation gitInformation : pageableCollection) {
            if(!itemBankClient.findProject(gitInformation.getProjectId()).isPresent()) {
                idsToRemove.add(gitInformation.getProjectId());
            }
        }

        if (!idsToRemove.isEmpty()) {
            for (final Integer itemBankId : idsToRemove) {
                itemDeleteNotificationHandler.processItemMessage(itemBankId);
            }
        }

        logger.info(LOG, "Removed {} projects that are no longer in the itembank. Process time: {} seconds", idsToRemove.size(), Duration.between(removeProjectStartTime, Instant.now()).getSeconds());

        return new ItemSynchronizationResponse(0, idsToRemove.size(), 0);
    }

    @Override
    public void synchronizeItem(final int projectId, final boolean addWebhook) {
        if (addWebhook && !itemBankClient.isProjectMonitored(projectId)) {
            itemEventListener.onCreateItem(projectId);
        }

        itemEventListener.onUpdateItem(projectId);
    }
}
