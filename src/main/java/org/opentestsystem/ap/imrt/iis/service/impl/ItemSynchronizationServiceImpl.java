package org.opentestsystem.ap.imrt.iis.service.impl;

import org.opentestsystem.ap.common.client.GitlabApi;
import org.opentestsystem.ap.common.imrt.model.ItemGitInformation;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.model.ItemName;
import org.opentestsystem.ap.imrt.iis.client.ItemBankClient;
import org.opentestsystem.ap.imrt.iis.client.ItemEventListener;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.model.ItemSynchronizationResponse;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemDeleteNotificationHandler;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.Instant;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

@Service
public class ItemSynchronizationServiceImpl implements ItemSynchronizationService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemSynchronizationServiceImpl.class);
    private final ItemBankClient itemBankClient;
    private final ItemEventListener itemEventListener;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemDeleteNotificationHandler itemDeleteNotificationHandler;
    private final OperationalEventService logger;
    private final ItemBankProperties itemBankProperties;
    private final GitlabApi gitlabApi;

    @Autowired
    public ItemSynchronizationServiceImpl(final ItemBankClient itemBankClient,
                                          final ItemEventListener itemEventListener,
                                          final ItemGitInformationRepository itemGitInformationRepository,
                                          final ItemDeleteNotificationHandler itemDeleteNotificationHandler,
                                          final OperationalEventService logger,
                                          final ItemBankProperties itemBankProperties,
                                          final GitlabApi gitlabApi) {
        this.itemBankClient = itemBankClient;
        this.itemEventListener = itemEventListener;
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemDeleteNotificationHandler = itemDeleteNotificationHandler;
        this.logger = logger;
        this.itemBankProperties = itemBankProperties;
        this.gitlabApi = gitlabApi;
    }

    @Override
    public ItemSynchronizationResponse synchronize() {
        final Instant syncJobStartTime = Instant.now();

        logger.info(LOG, "Sync-Item-Job: Syncing IMRT with itembank. \ngitlab group: {} \nproject page size: {}\nexisting projects page size: {}\n,Item Deleted Sync Disabled: {}",
                itemBankProperties.getGroup(), itemBankProperties.getProjectsPerPage(), itemBankProperties.getDeleteItemGitPageSize(), itemBankProperties.isDeleteSyncDisabled());

        int itemsRemovedFromImrt = 0;
        if(!itemBankProperties.isDeleteSyncDisabled()) {
            logger.info(LOG, "Sync-Item-Job: Removing IMRT projects no longer in item bank");
            itemsRemovedFromImrt = removeProjectsNoLongerInSourceControl();
        } else {
            logger.info(LOG, "Sync-Item-Job: Process to check for deleted items in the itembank is disabled");
        }

        logger.info(LOG, "Sync-Item-Job: Syncing projects in item bank with IMRT");
        final Instant syncProjectStartTime = Instant.now();

        final int groupId = itemBankClient.getItembankGroupId();

        int totalItemsSynced = 0;
        int page = 1;
        int numberOfItemsWithoutWebhook = 0;

        List<ItemName> projects = gitlabApi.getAllItems(groupId, page, itemBankProperties.getProjectsPerPage());
        while (!projects.isEmpty()) {
            for (final ItemName project : projects) {
                Integer projectId = project.getId();
                // If the project does not any webhooks in place or if the project does not have any webhooks that match
                // IMRT's webhook URL configuration, create one.
                if (!itemBankClient.isProjectMonitored(projectId)) {
                    itemEventListener.onCreateItem(projectId);
                    numberOfItemsWithoutWebhook++;
                }

                itemEventListener.onUpdateItem(projectId);
                totalItemsSynced++;
            }

            page++;
            Instant beginGetAllItems = Instant.now();
            projects = gitlabApi.getAllItems(groupId, page, itemBankProperties.getProjectsPerPage());
            //Gitlab time logging added due to Gitlab slowness in production
            logger.info(LOG, "Sync-Item-Job: Get page {} from gitlab in {} ms", page, Duration.between(beginGetAllItems, Instant.now()).toMillis());
        }

        logger.info(LOG, "Sync-Item-Job: Synced {} projects. Process time: {} seconds", totalItemsSynced, Duration.between(syncProjectStartTime, Instant.now()).getSeconds());
        logger.info(LOG, "Sync-Item-Job: Sync Job Complete. Total Job time: {} seconds", Duration.between(syncJobStartTime, Instant.now()).getSeconds());

        return new ItemSynchronizationResponse(numberOfItemsWithoutWebhook,
                totalItemsSynced,
                itemsRemovedFromImrt);
    }

    private int removeProjectsNoLongerInSourceControl() {
        final Instant removeProjectStartTime = Instant.now();

        PageRequest pageRequest = new PageRequest(0, itemBankProperties.getDeleteItemGitPageSize());
        Page<ItemGitInformation> page = itemGitInformationRepository.findAll(pageRequest);
        final int totalPages = page.getTotalPages();

        Collection<Integer> idsToRemove = new HashSet<>(findProjectsToRemove(page));
        logger.info(LOG, "Sync-Item-Job: Items not in Itembank Process: Processed {} page out of total pages {}", 0, totalPages);

        for (int i = 1; i < totalPages; i++) {
            PageRequest request = new PageRequest(i, itemBankProperties.getDeleteItemGitPageSize());
            page = itemGitInformationRepository.findAll(request);
            idsToRemove.addAll(findProjectsToRemove(page));

            logger.info(LOG, "Sync-Item-Job: Items not in Itembank Process: Processed {} page out of total pages {}", i, totalPages);
        }

        if (!idsToRemove.isEmpty()) {
            for (final Integer itemBankId : idsToRemove) {
                itemDeleteNotificationHandler.processItemMessage(itemBankId);
            }
        }

        logger.info(LOG, "Sync-Item-Job: Removed {} projects that are no longer in the itembank. Process time: {} seconds", idsToRemove.size(), Duration.between(removeProjectStartTime, Instant.now()).getSeconds());

        return idsToRemove.size();
    }

    private Collection<Integer> findProjectsToRemove(Page<ItemGitInformation> page) {
        Collection<Integer> idsToRemove = new HashSet<>();
        for (ItemGitInformation gitInformation : page) {
            Instant findProjectStart = Instant.now();
            if (!itemBankClient.findProject(gitInformation.getProjectId()).isPresent()) {
                idsToRemove.add(gitInformation.getProjectId());
            }
            //Added gitlab communication logging due to slowness in Gitlab.
            logger.info(LOG, "Sync-Item-Job: Find project gitlab call took {} ms", Duration.between(findProjectStart, Instant.now()).toMillis());
        }

        return idsToRemove;
    }

    @Override
    public void synchronizeItem(final int projectId, final boolean addWebhook) {
        if (addWebhook && !itemBankClient.isProjectMonitored(projectId)) {
            itemEventListener.onCreateItem(projectId);
        }

        itemEventListener.onUpdateItem(projectId);
    }
}
