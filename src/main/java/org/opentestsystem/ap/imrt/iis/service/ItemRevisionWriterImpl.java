package org.opentestsystem.ap.imrt.iis.service;

import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.StimLink;
import org.opentestsystem.ap.imrt.common.model.StimLinkBuilder;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemLogRepository;
import org.opentestsystem.ap.imrt.iis.repository.StandardIdRepository;
import org.opentestsystem.ap.imrt.iis.repository.StimLinkRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

/**
 * Implementation of ItemRevisionWriter interface that stores the various parts of an item revision
 * to the appropriate respositories in a single transaction, to ensure foreign key consistency.
 */
@Service
public class ItemRevisionWriterImpl implements ItemRevisionWriter {
    private static final Logger logger = LoggerFactory.getLogger(ItemRevisionWriterImpl.class);

    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ImrtItemRepository imrtItemRepository;
    private final StimLinkRepository stimLinkRepository;
    private final StandardIdRepository standardIdRepository;
    private final ItemLogRepository itemLogRepository;
    private final OperationalEventService operationalEventService;

    public ItemRevisionWriterImpl(ItemGitInformationRepository itemGitInformationRepository,
                                  ImrtItemRepository imrtItemRepository, StimLinkRepository stimLinkRepository,
                                  StandardIdRepository standardIdRepository, ItemLogRepository itemLogRepository,
                                  OperationalEventService operationalEventService) {
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.imrtItemRepository = imrtItemRepository;
        this.stimLinkRepository = stimLinkRepository;
        this.standardIdRepository = standardIdRepository;
        this.itemLogRepository = itemLogRepository;
        this.operationalEventService = operationalEventService;
    }

    @Override
    @Transactional
    public void saveItemRevision(ItemRevision itemRevision) {

        // We always write the item and it's git information
        ImrtItem imrtItem = itemRevision.getImrtItem();
        ItemGitInformation itemGitInformation = itemRevision.getItemGitInformation();
        imrtItemRepository.save(imrtItem);
        itemGitInformationRepository.save(itemGitInformation);

        // Check for a linked stimulus
        Optional<String> linkedStimulusId = itemRevision.getLinkedStimulusId();
        if (linkedStimulusId.isPresent()) {
            ImrtItem stimItem = imrtItemRepository.findById(linkedStimulusId.get());
            if (null != stimItem) {
                StimLink stimLink = new StimLinkBuilder()
                        .withImrtItem(imrtItem)
                        .withStimImrtItem(stimItem)
                        .withUpdatedBy(imrtItem.getUpdatedBy())
                        .build();
                stimLinkRepository.save(stimLink);
            } else {
                operationalEventService.serviceWarning(logger, null, "Unable to find linked stimulus in database for item id {} stimulus id {}",
                        imrtItem.getId(), linkedStimulusId);
            }
        }

        // Save standardIds
        standardIdRepository.save(itemRevision.getStandardIdList());

        // Save the item log
        itemLogRepository.save(itemRevision.getItemLog());

        logger.debug("Item saved to database. gitlab projectId: {} item id: {} database key {}",
                itemGitInformation.getProjectId(), imrtItem.getId(), imrtItem.getKey());
    }

}
