package org.opentestsystem.ap.imrt.iis.service;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ImrtItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.Stimulus;
import org.opentestsystem.ap.imrt.common.model.StimulusLink;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.common.repository.StimulusRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.model.ItemRevision;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemLogRepository;
import org.opentestsystem.ap.imrt.iis.repository.StandardIdRepository;
import org.opentestsystem.ap.imrt.iis.repository.StimulusLinkRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

/**
 * Implementation of ItemRevisionWriter interface that stores the various parts of an item revision
 * to the appropriate respositories in a single transaction, to ensure foreign key consistency.
 */
@Service
public class ItemRevisionWriterImpl implements ItemRevisionWriter {
    private static final Logger logger = LoggerFactory.getLogger(ItemRevisionWriterImpl.class);

    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ImrtItemRepository imrtItemRepository;
    private final StimulusLinkRepository stimulusLinkRepository;
    private final StandardIdRepository standardIdRepository;
    private final ItemLogRepository itemLogRepository;
    private final OperationalEventService operationalEventService;
    private final StimulusRepository stimulusRepository;

    public ItemRevisionWriterImpl(ItemGitInformationRepository itemGitInformationRepository,
                                  ImrtItemRepository imrtItemRepository,
                                  StimulusLinkRepository stimulusLinkRepository,
                                  StandardIdRepository standardIdRepository,
                                  ItemLogRepository itemLogRepository,
                                  OperationalEventService operationalEventService,
                                  StimulusRepository stimulusRepository) {
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.imrtItemRepository = imrtItemRepository;
        this.stimulusLinkRepository = stimulusLinkRepository;
        this.standardIdRepository = standardIdRepository;
        this.itemLogRepository = itemLogRepository;
        this.operationalEventService = operationalEventService;
        this.stimulusRepository = stimulusRepository;
    }

    @Override
    @Transactional
    public void saveItemRevision(ItemRevision itemRevision) {
        // We always write the item and it's git information
        BaseItem item = itemRevision.getImrtItem();
        ItemGitInformation itemGitInformation = itemRevision.getItemGitInformation();

        if(item instanceof Stimulus) {
            saveStimulus(itemRevision);
        } else {
            saveImrtItem(itemRevision);
        }

        itemGitInformationRepository.save(itemGitInformation);

        // Save standardIds
        standardIdRepository.save(itemRevision.getStandardIdList());

        // Save the item log
        itemLogRepository.save(itemRevision.getItemLog());

        logger.debug("Item saved to database. gitlab projectId: {} item id: {} database key {}",
                itemGitInformation.getProjectId(), item.getId(), item.getKey());
    }

    private void saveImrtItem(final ItemRevision itemRevision) {
        ImrtItem imrtItem = (ImrtItem) itemRevision.getImrtItem();
        imrtItemRepository.save(imrtItem);
        // Check for a linked stimulus
        Optional<String> linkedStimulusId = itemRevision.getLinkedStimulusId();
        if (linkedStimulusId.isPresent()) {
            Stimulus stimulus = stimulusRepository.findById(linkedStimulusId.get());
            if (null != stimulus) {
                StimulusLink stimLink = new StimulusLink(imrtItem, stimulus);
                stimLink.setUpdatedBy(imrtItem.getUpdatedBy());
                stimulusLinkRepository.save(stimLink);
            } else {
                operationalEventService.serviceWarning(logger, null, "Unable to find linked stimulus in database for item id {} stimulus id {}",
                        imrtItem.getId(), linkedStimulusId);
            }
        }
    }

    private void saveStimulus(final ItemRevision itemRevision) {
        stimulusRepository.save((Stimulus) itemRevision.getImrtItem());
    }
}
