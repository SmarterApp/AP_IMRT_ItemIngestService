package org.opentestsystem.ap.imrt.iis.core.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.KeywordContent;
import org.opentestsystem.ap.imrt.iis.core.ItemKeywordContentMapper;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_WER;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.WerSection.PROMPT;
import static org.opentestsystem.ap.imrt.common.model.KeywordContentSection.WerSection.SPANISH_PROMPT;
import static org.opentestsystem.ap.imrt.iis.core.mapper.KeywordContentUtil.convertContentToKeywordString;

@Component
public class WerKeywordContentMapper implements ItemKeywordContentMapper {
    @Override
    public Collection<KeywordContent> findKeywordForItem(final BaseItem baseItem, final Item iatItem) {
        if (!isSupportedItem(iatItem)) {
            throw new IllegalArgumentException(String.format("Unsupported item type for mapper. expected %s; actual %s", TYPE_WER, iatItem.getType()));
        }

        WerItem saItem = (WerItem) iatItem;
        Set<KeywordContent> contents = new HashSet<>();

        String englishPrompt = saItem.getCore().getEn().getPrompt();
        if (StringUtils.isNotBlank(englishPrompt)) {
            contents.add(new KeywordContent(baseItem, PROMPT, convertContentToKeywordString(englishPrompt)));
        }

        if (saItem.getTranslations() != null
                && saItem.getTranslations().getEsp() != null
                && StringUtils.isNotBlank(saItem.getTranslations().getEsp().getPrompt())) {
            contents.add(new KeywordContent(baseItem, SPANISH_PROMPT, convertContentToKeywordString(saItem.getTranslations().getEsp().getPrompt())));
        }

        return contents;
    }

    @Override
    public boolean isSupportedItem(Item item) {
        return item instanceof WerItem;
    }
}
