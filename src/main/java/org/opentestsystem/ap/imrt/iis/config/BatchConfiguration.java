package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.imrt.iis.batch.ItemSynchronizationJobExecutionListener;
import org.opentestsystem.ap.imrt.iis.batch.ItemSynchronizationTasklet;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;

/**
 * Configure Spring Batch to execute the item synchronization process as a {@link org.springframework.batch.core.Job}.
 * <p>
 * Item Synchronization Job rules:
 * <p>
 * 1. Only one instance of the job should run at a time. If the job is currently running, other requests to start the
 * item synchronization job should be rejected
 * 2. The job should not run when Spring Boot starts up. Instead, the job should be started by a call to a web endpoint
 * (e.g. a RESTful call)
 * 3. The same job should be able to run multiple times (i.e. it should be repeatable).  That is, the Item
 * Synchronization Process should be able to run once a day (or at some other regular interval)
 * </p>
 */
@Configuration
@EnableBatchProcessing
public class BatchConfiguration {
    @Autowired
    public JobBuilderFactory jobBuilderFactory;

    @Autowired
    public StepBuilderFactory stepBuilderFactory;

    /**
     * Autowire Spring Batch's "out-of-the-box" {@link org.springframework.batch.core.repository.JobRepository}
     * implementation.  This gets used when creating the {@link org.springframework.batch.core.launch.JobLauncher} to
     * run asynchronously.
     */
    @Autowired
    public JobRepository jobRepository;

    /**
     * Create a {@link org.springframework.batch.core.Job} that complies with the rules cited above.
     *
     * @param itemSynchronizationStep A {@link org.springframework.batch.core.Step} that executes the item
     *                                synchronization process
     * @return A {@link org.springframework.batch.core.Job} with the step(s) necessary to execute the item
     * synchronization process.
     */
    @Bean
    public Job itemSynchronizationJob(final Step itemSynchronizationStep) {
        return jobBuilderFactory.get("itemSynchronizationJob")
            .incrementer(new RunIdIncrementer())
            .listener(itemSynchronizationJobExecutionListener())
            .start(itemSynchronizationStep)
            .build();
    }

    /**
     * A {@link org.springframework.batch.core.Step} to execute the item synchronization process within a
     * {@link org.springframework.batch.core.Job}.
     *
     * @param itemSynchronizationTasklet The {@link org.springframework.batch.core.step.tasklet.Tasklet} that rune the
     *                                   item synchronization process.
     * @return A {@link org.springframework.batch.core.Step} for the item synchronization process
     * {@link org.springframework.batch.core.Job}
     */
    @Bean
    public Step itemSynchronizationStep(final Tasklet itemSynchronizationTasklet) {
        return stepBuilderFactory.get("itemSynchronizationStep")
            .tasklet(itemSynchronizationTasklet)
            .allowStartIfComplete(true)
            .build();
    }

    /**
     * A {@link org.springframework.batch.core.step.tasklet.Tasklet} representing the item synchronization process.
     * This is what the {@link org.springframework.batch.core.Step} will call to do the actual item synchronization
     * work.
     *
     * @param itemSynchronizationService An implementation of the
     *                                   {@link org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService} to perform the synchronization process.
     * @return A {@link org.springframework.batch.core.step.tasklet.Tasklet} implementation that can execute the item
     * synchronization process
     */
    @Bean
    public ItemSynchronizationTasklet itemSynchronizationTasklet(final ItemSynchronizationService itemSynchronizationService) {
        return new ItemSynchronizationTasklet(itemSynchronizationService);
    }

    /**
     * A {@link org.springframework.batch.core.JobExecutionListener} implementation that will ensure only one instance
     * of the item synchronization process {@link org.springframework.batch.core.Job} is running.
     *
     * @return A {@link org.springframework.batch.core.JobExecutionListener} implementation that prevents running
     * multiple instances of the item synchronization process {@link org.springframework.batch.core.Job}s.
     */
    @Bean
    public JobExecutionListener itemSynchronizationJobExecutionListener() {
        return new ItemSynchronizationJobExecutionListener();
    }

    /**
     * A {@link org.springframework.batch.core.launch.JobLauncher} implementation that will kick off the item
     * synchronization process job asynchronously, returning control to the caller.
     *
     * @param jobRepository A {@link org.springframework.batch.core.repository.JobRepository} implementation for
     *                      interacting with the Spring Batch database.
     * @param taskExecutor  A {@link org.springframework.core.task.TaskExecutor} implementation for determining how the
     *                      {@link org.springframework.batch.core.Job} should execute.
     * @return A {@link org.springframework.batch.core.launch.JobLauncher} implementation
     */
    @Bean
    public JobLauncher jobLauncher(final JobRepository jobRepository, final TaskExecutor taskExecutor) {
        final SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
        jobLauncher.setJobRepository(jobRepository);
        jobLauncher.setTaskExecutor(taskExecutor);
        return jobLauncher;
    }

    /**
     * A {@link org.springframework.core.task.TaskExecutor} implementation that provides extra functionality for
     * starting the item synchronization {@link org.springframework.batch.core.Job}.
     *
     * @return A {@link org.springframework.core.task.TaskExecutor}
     */
    @Bean
    public TaskExecutor taskExecutor() {
        return new SimpleAsyncTaskExecutor();
    }
}
