package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.imrt.iis.batch.ItemSynchronizationJobExecutionListener;
import org.opentestsystem.ap.imrt.iis.batch.ItemSynchronizationTasklet;
import org.opentestsystem.ap.imrt.iis.service.ItemSynchronizationService;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {
    @Autowired
    public JobBuilderFactory jobBuilderFactory;

    @Autowired
    public StepBuilderFactory stepBuilderFactory;

    @Autowired
    public JobRepository jobRepository;

    @Bean
    public Job itemSynchronizationJob(final Step itemSynchronizationStep) {
        return jobBuilderFactory.get("itemSynchronizationJob")
            .incrementer(new RunIdIncrementer())
            .listener(itemSynchronizationJobExecutionListener())
            .start(itemSynchronizationStep)
            .build();
    }

    @Bean
    public Step itemSynchronizationStep(final Tasklet itemSynchronizationTasklet) {
        return stepBuilderFactory.get("itemSynchronizationStep")
            .tasklet(itemSynchronizationTasklet)
            .allowStartIfComplete(true)
            .build();
    }

    @Bean
    public ItemSynchronizationTasklet itemSynchronizationTasklet(final ItemSynchronizationService itemSynchronizationService) {
        return new ItemSynchronizationTasklet(itemSynchronizationService);
    }

    @Bean
    public JobExecutionListener itemSynchronizationJobExecutionListener() {
        return new ItemSynchronizationJobExecutionListener();
    }

    @Bean
    public JobLauncher jobLauncher(final JobRepository jobRepository, final TaskExecutor taskExecutor) {
        final SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
        jobLauncher.setJobRepository(jobRepository);
        jobLauncher.setTaskExecutor(taskExecutor);
        return jobLauncher;
    }

    @Bean
    public TaskExecutor taskExecutor() {
        return new SimpleAsyncTaskExecutor();
    }
}
