package org.opentestsystem.ap.imrt.iis.service.impl;

import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.repository.AttachmentRepository;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.repository.ContentUpdateNeedRepository;
import org.opentestsystem.ap.common.imrt.repository.FormRepository;
import org.opentestsystem.ap.common.imrt.repository.ItemAssignmentRepository;
import org.opentestsystem.ap.common.imrt.repository.KeywordContentRepository;
import org.opentestsystem.ap.imrt.iis.repository.ValidationResultRepository;
import org.opentestsystem.ap.imrt.iis.service.BaseItemService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;
import java.util.UUID;

@Service
public class BaseItemServiceImpl implements BaseItemService {
    private final BaseItemRepository baseItemRepository;
    private final ValidationResultRepository validationResultRepository;
    private final KeywordContentRepository keywordContentRepository;
    private final ContentUpdateNeedRepository contentUpdateNeedRepository;
    private final AttachmentRepository attachmentRepository;
    private final FormRepository formRepository;
    private final ItemAssignmentRepository itemAssignmentRepository;

    public BaseItemServiceImpl(final BaseItemRepository baseItemRepository,
                               final ValidationResultRepository validationResultRepository,
                               final KeywordContentRepository keywordContentRepository,
                               final ContentUpdateNeedRepository contentUpdateNeedRepository,
                               final AttachmentRepository attachmentRepository,
                               final FormRepository formRepository,
                               final ItemAssignmentRepository itemAssignmentRepository) {
        this.baseItemRepository = baseItemRepository;
        this.validationResultRepository = validationResultRepository;
        this.keywordContentRepository = keywordContentRepository;
        this.contentUpdateNeedRepository = contentUpdateNeedRepository;
        this.attachmentRepository = attachmentRepository;
        this.formRepository = formRepository;
        this.itemAssignmentRepository = itemAssignmentRepository;
    }

    @Override
    public Optional<BaseItem> findBaseItemByItemId(final int itemId) {
        return Optional.ofNullable(baseItemRepository.findById(itemId));
    }

    @Override
    public Optional<BaseItem> findBaseItemByItemId(final String itemId) {
        return findBaseItemByItemId(Integer.parseInt(itemId));
    }

    @Transactional
    @Override
    public void deleteItem(final BaseItem item) {
        validationResultRepository.deleteAllByItemKey(item.getKey());
        keywordContentRepository.deleteAllByItem(item);
        contentUpdateNeedRepository.deleteAllByItem(item);
        attachmentRepository.deleteByAttachmentKeyItem(item);
        itemAssignmentRepository.deleteAllByItem(item);
        formRepository.deleteAllByItem(item);
        baseItemRepository.delete(item);
    }

    @Override
    public Optional<UUID> findItemCommitId(final Integer itemId) {
        return Optional.ofNullable(baseItemRepository.findCommitIdForItemId(itemId));
    }
}
