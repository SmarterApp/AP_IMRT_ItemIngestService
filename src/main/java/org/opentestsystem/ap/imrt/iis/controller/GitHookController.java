package org.opentestsystem.ap.imrt.iis.controller;

import org.opentestsystem.ap.imrt.iis.client.ProjectEventListener;
import org.opentestsystem.ap.imrt.iis.client.GitlabClient;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;

@RestController
public class GitHookController implements ProjectEventListener {
    private static final Logger logger = LoggerFactory.getLogger(GitHookController.class);
    private final GitlabClient gitlabClient;
    // If we want to have any asynchronous processing, we need to cross a Bean boundary.
    // GitHookHelper exists to provide this opportunity.
    private final GitHookHelper helper;

    @Autowired
    public GitHookController(GitlabClient gitlabClient, GitHookHelper helper) {
        this.gitlabClient = gitlabClient;
        this.helper = helper;
    }

    @PostConstruct
    public void init() {
        // Tell the client to notify us for project create and merge events
        gitlabClient.setProjectEventListener(this);
    }

    /**
     * This API will be invoked from Gitlab
     * @param request
     * @return
     */
    @RequestMapping("/systemHook")
    public String systemHook(HttpServletRequest request) {
        logger.debug("SystemHook with: {}", request);
        // Pass this into the client for parsing and processing. If the event is one
        // we are looking for, we will be notified via the onCreateProject method
        gitlabClient.handleSystemHook(request);
        logger.debug("SystemHook Done");
        return "OK";
    }

    /**
     * This API will be invoked from Gitlab
     * @param request
     * @return
     */
    @RequestMapping("/webHook")
    public String webHook(HttpServletRequest request) {
        logger.debug("webHook: {}", request);
        // Pass this into the client for parsing and processing. If the event is one
        // we are looking for, we will be notified via the onCreateProject method
        gitlabClient.handleWebHook(request);
        logger.debug("WebHook Done");
        return "OK";
    }

    @Override
    public void onCreateProject(Integer projectId) {
        logger.debug("onCreateProject {}", projectId);
        helper.createProjectHook(projectId);
        logger.debug("onCreateProject complete");
    }

    @Override
    public void onMergeToMaster(Integer projectId) {
        logger.debug("onMergeToMaster {}", projectId);
        helper.handleMergeToMaster(projectId);
        logger.debug("onMergeToMaster complete");
    }
}
