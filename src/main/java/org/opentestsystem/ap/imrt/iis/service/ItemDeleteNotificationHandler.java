package org.opentestsystem.ap.imrt.iis.service;

import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.Stimulus;
import org.opentestsystem.ap.common.imrt.repository.ImrtItemRepository;
import org.opentestsystem.ap.common.imrt.repository.KeywordContentRepository;
import org.opentestsystem.ap.common.imrt.repository.StimulusRepository;
import org.opentestsystem.ap.common.imrt.repository.ValidationResultsRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Component
public class ItemDeleteNotificationHandler {
    private static final Logger LOG = LoggerFactory.getLogger(ItemDeleteNotificationHandler.class);
    private final OperationalEventService logger;
    private final ProjectLockService projectLockService;
    private final ImrtItemRepository imrtItemRepository;
    private final StimulusRepository stimulusRepository;
    private final ValidationResultsRepository validationResultsRepository;
    private final KeywordContentRepository keywordContentRepository;
    private final BaseItemService baseItemService;

    public ItemDeleteNotificationHandler(final OperationalEventService logger,
                                         final ProjectLockService projectLockService,
                                         final ImrtItemRepository imrtItemRepository,
                                         final StimulusRepository stimulusRepository,
                                         final ValidationResultsRepository validationResultsRepository,
                                         final KeywordContentRepository keywordContentRepository, final BaseItemService baseItemService) {
        this.logger = logger;
        this.projectLockService = projectLockService;
        this.imrtItemRepository = imrtItemRepository;
        this.stimulusRepository = stimulusRepository;
        this.validationResultsRepository = validationResultsRepository;
        this.keywordContentRepository = keywordContentRepository;
        this.baseItemService = baseItemService;
    }

    @Transactional
    public void processItemMessage(final Integer itemId) {
        logger.info(LOG, "Received item delete message for itembank id {}", itemId);

        // get a lock on the project - a project should not be deleted if someone is actively working on it
        final long projectLockId = projectLockService.lockProject(itemId);
        LOG.debug("Acquired lock for item id {}", itemId);
        try {
            final Optional<BaseItem> maybeBaseItem = baseItemService.findBaseItemByItemId(itemId);
            if (!maybeBaseItem.isPresent()) {
                LOG.debug(String.format("could not find git information for item bank id %d", itemId));
                return;
            }

            BaseItem item = maybeBaseItem.get();

            validationResultsRepository.deleteAllByItem(item);
            keywordContentRepository.deleteAllByItem(item);

            if (item instanceof Stimulus) {
                // Since the stimulus is being deleted, we need to break the association of this stimulus to all items
                // it was associated to.
                stimulusRepository.delete(item.getKey());
            } else {
                // Since a single item is being deleted, we only need to remove this particular item's association to a
                // stimulus.  If the item is not associated to a stimulus, then the stimulusLinkRepository delete will
                // affect zero rows.
                imrtItemRepository.delete(item.getKey());
            }

            logger.itemDeletedEvent(LOG,
                    item.getKey(),
                    item.getId());
        } finally {
            // release the lock
            projectLockService.unlockProject(itemId, projectLockId);
        }
        logger.info(LOG, "Deleted IMRT's record of itembank {}", itemId);
    }
}
