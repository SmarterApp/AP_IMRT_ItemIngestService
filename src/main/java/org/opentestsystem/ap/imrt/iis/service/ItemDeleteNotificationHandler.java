package org.opentestsystem.ap.imrt.iis.service;

import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.repository.BaseItemRepository;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemLogRepository;
import org.opentestsystem.ap.imrt.iis.repository.ProjectLockRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Component
public class ItemDeleteNotificationHandler {
    private static final Logger logger = LoggerFactory.getLogger(ItemDeleteNotificationHandler.class);
    private final ProjectLockRepository projectLockRepository;
    private final BaseItemRepository baseItemRepository;
    private final ImrtItemRepository imrtItemRepository;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemLogRepository itemLogRepository;

    public ItemDeleteNotificationHandler(final ProjectLockRepository projectLockRepository,
                                         final BaseItemRepository baseItemRepository,
                                         final ImrtItemRepository imrtItemRepository,
                                         final ItemGitInformationRepository itemGitInformationRepository,
                                         final ItemLogRepository itemLogRepository) {
        this.projectLockRepository = projectLockRepository;
        this.baseItemRepository = baseItemRepository;
        this.imrtItemRepository = imrtItemRepository;
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemLogRepository = itemLogRepository;
    }

    @Transactional
    public void processItemMessage(final Integer itemBankId) {
        logger.info("Received item delete message for {}", itemBankId);

        // get a lock on the project
        final long projectLockId = projectLockRepository.acquireLock(itemBankId);
        logger.info("Acquired lock for item id {}", itemBankId);
        try {
            final Optional<ItemGitInformation> itemGitInformation = itemGitInformationRepository.findOneByProjectId(itemBankId);
            if (!itemGitInformation.isPresent()) {
                throw new IllegalStateException(String.format("could not find git information for item bank id %d", itemBankId));
            }

            itemGitInformationRepository.delete(itemGitInformation.get());
            itemLogRepository.delete();


            final BaseItem item = baseItemRepository.findOne(itemGitInformation.get().getItem().getKey());
            imrtItemRepository.delete(item.getKey());
            logger.info("Item delete complete for item bank id {}", itemBankId);
        } finally {
            // release the lock
            projectLockRepository.releaseLock(itemBankId, projectLockId);
        }
    }
}
