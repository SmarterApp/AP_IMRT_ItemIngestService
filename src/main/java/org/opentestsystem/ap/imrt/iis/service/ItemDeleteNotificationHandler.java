package org.opentestsystem.ap.imrt.iis.service;

import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.Stimulus;
import org.opentestsystem.ap.imrt.common.repository.ImrtItemRepository;
import org.opentestsystem.ap.imrt.common.repository.StimulusLinkRepository;
import org.opentestsystem.ap.imrt.common.repository.StimulusRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemLogRepository;
import org.opentestsystem.ap.imrt.iis.repository.ProjectLockRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

@Component
public class ItemDeleteNotificationHandler {
    private static final Logger logger = LoggerFactory.getLogger(ItemDeleteNotificationHandler.class);
    private final ProjectLockRepository projectLockRepository;
    private final ImrtItemRepository imrtItemRepository;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemLogRepository itemLogRepository;
    private final StimulusLinkRepository stimulusLinkRepository;
    private final StimulusRepository stimulusRepository;

    public ItemDeleteNotificationHandler(final ProjectLockRepository projectLockRepository,
                                         final ImrtItemRepository imrtItemRepository,
                                         final ItemGitInformationRepository itemGitInformationRepository,
                                         final ItemLogRepository itemLogRepository,
                                         final StimulusLinkRepository stimulusLinkRepository,
                                         final StimulusRepository stimulusRepository) {
        this.projectLockRepository = projectLockRepository;
        this.imrtItemRepository = imrtItemRepository;
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemLogRepository = itemLogRepository;
        this.stimulusLinkRepository = stimulusLinkRepository;
        this.stimulusRepository = stimulusRepository;
    }

    @Transactional
    public void processItemMessage(final Integer itemBankId) {
        logger.info("Received item delete message for {}", itemBankId);

        // get a lock on the project - a project should not be deleted if someone is actively working on it
        final long projectLockId = projectLockRepository.acquireLock(itemBankId);
        logger.info("Acquired lock for item id {}", itemBankId);
        try {
            final ItemGitInformation itemGitInformation = itemGitInformationRepository.findOneByProjectId(itemBankId)
                    .orElseThrow(() -> new IllegalStateException(String.format("could not find git information for item bank id %d", itemBankId)));

            itemGitInformationRepository.delete(itemGitInformation);
            itemLogRepository.deleteAllByItemLogKeyItem(itemGitInformation.getItem());

            if (itemGitInformation.getItem() instanceof Stimulus) {
                // Since the stimulus is being deleted, we need to break the association of this stimulus to all items
                // it was associated to.
                stimulusLinkRepository.deleteAllByStimulusKey(itemGitInformation.getItem().getKey());
                stimulusRepository.delete(itemGitInformation.getItem().getKey());
            } else {
                // Since a single item is being deleted, we only need to remove this particular item's association to a
                // stimulus.  If the item is not associated to a stimulus, then the stimulusLinkRepository delete will
                // affect zero rows.
                stimulusLinkRepository.deleteByItemKey(itemGitInformation.getItem().getKey());
                imrtItemRepository.delete(itemGitInformation.getItem().getKey());
            }

            logger.info("Item delete complete for item bank id {}", itemBankId);
        } finally {
            // release the lock
            projectLockRepository.releaseLock(itemBankId, projectLockId);
        }
    }
}
