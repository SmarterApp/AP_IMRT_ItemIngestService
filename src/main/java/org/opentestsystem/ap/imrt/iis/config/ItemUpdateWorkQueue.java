package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.message.ItemUpdateMessageListener;
import org.opentestsystem.ap.imrt.iis.message.ItemUpdateMessageRecoverer;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.config.RetryInterceptorBuilder;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Configuration for AMQP item update work queue
 */
// TODO figure out how to configure the retry strategy when exceptions are thrown.
@Configuration
public class ItemUpdateWorkQueue {
    private static final String queueName = "item-update";

    @Bean
    Queue queue() {
        return new Queue(queueName, true);
    }

    @Bean
    TopicExchange exchange() {
        return new TopicExchange("spring-boot-exchange");
    }

    @Bean
    Binding binding(Queue queue, TopicExchange exchange) {
        return BindingBuilder.bind(queue).to(exchange).with(queueName);
    }

    @Bean
    SimpleMessageListenerContainer itemUpdateListenerContainer(final ConnectionFactory connectionFactory,
                                                                   final OperationalEventService operationalEventService,
                                                                   final ItemUpdateMessageListener itemUpdateMessageListener,
                                                                   final ItemIngestServiceProperties properties) {
        final SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
        container.setConnectionFactory(connectionFactory);
        container.setQueueNames(queueName);
        container.setMessageListener(new MessageListenerAdapter(itemUpdateMessageListener, "handleMessage"));
        container.setAdviceChain(RetryInterceptorBuilder.stateless()
                .maxAttempts(properties.getRetryAmount())
                .recoverer(new ItemUpdateMessageRecoverer(operationalEventService))
                .backOffOptions(properties.getRetryInitialInterval(), properties.getRetryIntervalMultiplier(), properties.getRetryMaxInterval())
                .build());
        return container;
    }
}
