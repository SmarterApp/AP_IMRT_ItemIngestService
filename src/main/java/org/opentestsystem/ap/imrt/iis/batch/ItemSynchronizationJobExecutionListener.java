package org.opentestsystem.ap.imrt.iis.batch;

import org.opentestsystem.ap.imrt.iis.model.ItemSynchronizationResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.stereotype.Component;

/**
 * A {@link org.springframework.batch.core.JobExecutionListener} that prevents the item synchronization job from running
 * more than one instance at a time.
 */
@Component
public class ItemSynchronizationJobExecutionListener implements JobExecutionListener {
    // The active job execution, which will act as a lock.
    private JobExecution activeJob;
    private static final Logger logger = LoggerFactory.getLogger(ItemSynchronizationJobExecutionListener.class);

    @Override
    public void beforeJob(final JobExecution jobExecution) {
        // Create a lock to examine the active job.  If the active job is already running, prevent the execution of
        // the new job request.
        synchronized (jobExecution) {
            if (activeJob != null && activeJob.isRunning()) {
                logger.warn("An Item Synchronization Process with Job id: {} is already running.  Wait for this job to complete before starting another one.", activeJob.getJobId());
                jobExecution.stop();
            } else {
                activeJob = jobExecution;
                logger.info("Item Synchronization Process starting.  Job id: {}", activeJob.getJobId());
            }
        }
    }

    @Override
    public void afterJob(final JobExecution jobExecution) {
        // Release the lock and log completion
        synchronized (jobExecution) {
            if (jobExecution.equals(activeJob)) {
                logger.info("Item Synchronization Process complete.  Job id: {}, batch status: {}, exit status code: {}",
                        activeJob.getJobId(),
                        activeJob.getStatus().getBatchStatus(),
                        activeJob.getExitStatus().getExitCode());

                final ItemSynchronizationResponse response =
                        (ItemSynchronizationResponse) jobExecution.getExecutionContext().get(ItemSynchronizationResponse.EXECUTION_CONTEXT_DATA_KEY);
                final String exitStatusMessage =
                        String.format("Total item bank ids: %d, number of items requiring project webhook: %d",
                                response.getNumberOfItembankIds(),
                                response.getNumberOfItemsWithoutWebhook());

                jobExecution.getExitStatus().addExitDescription(exitStatusMessage);

                activeJob = null;
            }
        }
    }
}
