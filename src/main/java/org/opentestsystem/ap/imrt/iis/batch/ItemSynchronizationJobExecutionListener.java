package org.opentestsystem.ap.imrt.iis.batch;

import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.stereotype.Component;

/**
 * A {@link org.springframework.batch.core.JobExecutionListener} that prevents the item synchronization job from running
 * more than one instance at a time.
 */
@Component
public class ItemSynchronizationJobExecutionListener implements JobExecutionListener {
    // The active job execution, which will act as a lock.
    private JobExecution activeJob;

    @Override
    public void beforeJob(final JobExecution jobExecution) {
        // Create a lock to examine the active job.  If the active job is already running, prevent the execution of
        // the new job request.
        synchronized (jobExecution) {
            if (activeJob != null && activeJob.isRunning()) {
                jobExecution.stop();
            } else {
                activeJob = jobExecution;
            }
        }
    }

    @Override
    public void afterJob(final JobExecution jobExecution) {
        // Release the lock
        synchronized (jobExecution) {
            if (jobExecution.equals(activeJob)) {
                activeJob = null;
            }
        }
    }
}
