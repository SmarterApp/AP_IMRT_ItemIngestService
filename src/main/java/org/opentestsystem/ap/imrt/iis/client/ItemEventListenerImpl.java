package org.opentestsystem.ap.imrt.iis.client;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;
import org.opentestsystem.ap.imrt.iis.service.ItemWorkQueueService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

/**
 * Service to manage creations and updates of Assessment Items.
 */
@Component
public class ItemEventListenerImpl implements ItemEventListener {
    private static final Logger LOG = LoggerFactory.getLogger(ItemEventListenerImpl.class);
    private final ItemBankClient itemBankClient;
    private final ItemWorkQueueService itemWorkQueueService;
    private final OperationalEventService logger;
    private final ItemIngestServiceProperties itemIngestServiceProperties;

    @Autowired
    public ItemEventListenerImpl(final OperationalEventService logger,
                                 final ItemBankClient client,
                                 final ItemWorkQueueService itemWorkQueueService,
                                 final ItemIngestServiceProperties itemIngestServiceProperties) {
        this.logger = logger;
        itemBankClient = client;
        this.itemWorkQueueService = itemWorkQueueService;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
    }

    @PostConstruct
    public void init() {
        // Tell the client to notify us for project create and merge events
        itemBankClient.setItemEventListener(this);
    }

    @Override
    public void onCreateItem(int itemBankId) {
        if(itemIngestServiceProperties.isIgnoreWebhookCreation()) {
            logger.info(LOG, "Configured to ignore on create item events.  Ignoring create event for item bank {} ", itemBankId);
            return;
        }

        try {
            itemBankClient.monitorItem(itemBankId);
            logger.itemMonitoredEvent(LOG, itemBankId);
        } catch (GitLabApiRuntimeException e) {
            logger.error(LOG,
                    e,
                    "error attempting to create item with itemBankId {}", itemBankId);
        }
    }

    @Override
    public void onUpdateItem(int itemBankId) {
        itemWorkQueueService.sendItemUpdateMessage(itemBankId);
    }

    @Override
    public void onDeleteItem(final int itemBankId) {
        itemWorkQueueService.sendItemDeleteMessage(itemBankId);
    }
}
