package org.opentestsystem.ap.imrt.iis.client;

import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;
import org.opentestsystem.ap.imrt.iis.service.ItemWorkQueueService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

/**
 * Service to manage creations and updates of Assessment Items.
 */
@Component
public class ItemEventListenerImpl implements ItemEventListener {
    private static final Logger logger = LoggerFactory.getLogger(ItemEventListenerImpl.class);
    private final ItemBankClient itemBankClient;
    private final ItemWorkQueueService itemWorkQueueService;
    private final OperationalEventService operationalEventService;

    @PostConstruct
    public void init() {
        // Tell the client to notify us for project create and merge events
        itemBankClient.setItemEventListener(this);
    }

    @Autowired
    public ItemEventListenerImpl(OperationalEventService eventService, ItemBankClient client, ItemWorkQueueService itemWorkQueueService) {
        this.operationalEventService = eventService;
        itemBankClient = client;
        this.itemWorkQueueService = itemWorkQueueService;
    }

    @Override
    public void onCreateItem(int itemBankId) {
        logger.debug("onCreateItem {}", itemBankId);
        try {
            itemBankClient.monitorItem(itemBankId);
            operationalEventService.itemMonitoredEvent(logger, itemBankId);
        } catch (GitLabApiRuntimeException e) {
            operationalEventService.serviceError(logger,
                    e,
                    "error attempting to create item with itemBankId {}", itemBankId);
        }
    }

    @Override
    public void onUpdateItem(int itemBankId) {
        logger.debug("onUpdateItem {}", itemBankId);
        itemWorkQueueService.sendItemUpdateMessage(itemBankId);
    }

    @Override
    public void onDeleteItem(final int itemBankId) {
        logger.debug("onDeleteItem {}", itemBankId);
        itemWorkQueueService.sendItemDeleteMessage(itemBankId);
    }
}
