package org.opentestsystem.ap.imrt.iis.repository;


import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.Pager;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Commit;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.Project;
import org.gitlab4j.api.models.ProjectHook;
import org.gitlab4j.api.models.RepositoryFile;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Repository;

import java.util.Date;
import java.util.List;
import java.util.Optional;

@Repository
public class GitLabRepositoryImpl implements GitLabRepository {
    private static final Logger logger = LoggerFactory.getLogger(GitLabRepositoryImpl.class);
    private final GitLabApi gitLabApi;
    private final ItemBankProperties itemBankProperties;

    @Autowired
    public GitLabRepositoryImpl(final GitLabApi gitLabApi,
                                final ItemBankProperties itemBankProperties) {
        this.gitLabApi = gitLabApi;
        this.itemBankProperties = itemBankProperties;
    }

    @Override
    public Optional<ProjectHook> addProjectHook(final int itemBankId) {
        try {
            return Optional.of(gitLabApi.getProjectApi().addHook(itemBankId,
                    itemBankProperties.getWebhookUrl(),
                    true,
                    false,
                    false));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to create project hook on itemBankId %d", itemBankId));
        }
    }

    @Override
    public List<Namespace> findAllNamespaces(final String projectGroupName) {
        try {
            return gitLabApi.getNamespaceApi().findNamespaces(itemBankProperties.getGroup());
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to get all namespaces for %s from %s",
                            projectGroupName,
                            itemBankProperties.getHost()));
        }
    }

    @Override
    public Optional<RepositoryFile> findFile(final int itemBankId, final String fileName, final String branchName) {
        try {
            return Optional.of(gitLabApi.getRepositoryFileApi().getFile(fileName, itemBankId, branchName));
        } catch (final GitLabApiException e) {
            if (e.getHttpStatus() == HttpStatus.NOT_FOUND.value()) {
                logger.debug("Unable to find item.json on master branch for itemBankId {} message {} reason {} http status {}",
                        itemBankId, e.getMessage(), e.getReason(), e.getHttpStatus());
                return Optional.empty();
            } else {
                throw new GitLabApiRuntimeException(e,
                        String.format("Error attempting to find file %s for itemBankId %d in branch %s",
                                fileName,
                                itemBankId,
                                branchName));
            }
        }
    }

    @Override
    public List<Branch> getAllBranches(final int itemBankId) {
        try {
            return gitLabApi.getRepositoryApi().getBranches(itemBankId);
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to find all branches for itemBankId %d", itemBankId));
        }
    }

    @Override
    public List<ProjectHook> getAllProjectHooks(final int itemBankId) {
        try {
            return gitLabApi.getProjectApi().getHooks(itemBankId);
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to find all project hooks for itemBankId %d", itemBankId));
        }
    }

    @Override
    public Optional<Pager<Commit>> findAllCommitsForFile(final int itemBankId,
                                                         final String fileName,
                                                         final String branchName,
                                                         final Date from,
                                                         final Date to,
                                                         final int pageSize) {
        try {
            return Optional.of(gitLabApi.getCommitsApi().getCommits(itemBankId,
                    branchName,
                    from,
                    to,
                    fileName,
                    pageSize));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to get a page of commits for itemBankId %d, fileName %s, branchName %s, from %s, to %s, pageSize %d",
                            itemBankId,
                            fileName,
                            branchName,
                            from,
                            to,
                            pageSize));
        }
    }

    @Override
    public Optional<Pager<Project>> findAllProjects(final int pageSize) {
        try {
            return Optional.of(gitLabApi.getProjectApi().getProjects(pageSize));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e, "Error attempting to get a page of projects");
        }
    }
}
