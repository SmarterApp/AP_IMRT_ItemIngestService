package org.opentestsystem.ap.imrt.iis.repository;


import org.gitlab4j.api.GitLabApi;
import org.gitlab4j.api.GitLabApiException;
import org.gitlab4j.api.models.Branch;
import org.gitlab4j.api.models.Namespace;
import org.gitlab4j.api.models.ProjectHook;
import org.gitlab4j.api.models.RepositoryFile;
import org.opentestsystem.ap.imrt.iis.config.ItemBankProperties;
import org.opentestsystem.ap.imrt.iis.exception.GitLabApiRuntimeException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public class GitLabRepositoryImpl implements GitLabRepository {
    private final GitLabApi gitLabApi;
    private final ItemBankProperties itemBankProperties;

    @Autowired
    public GitLabRepositoryImpl(final GitLabApi gitLabApi,
                                final ItemBankProperties itemBankProperties) {
        this.gitLabApi = gitLabApi;
        this.itemBankProperties = itemBankProperties;
    }

    @Override
    public void addProjectHook(final int itemBankId) {
        try {
            gitLabApi.getProjectApi().addHook(itemBankId,
                    itemBankProperties.getWebhookUrl(),
                    true,
                    false,
                    false);
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to create project hook on itemBankId %d", itemBankId));
        }
    }

    @Override
    public Optional<List<Namespace>> findAllNamespaces(final String projectGroupName) {
        try {
            return Optional.of(gitLabApi.getNamespaceApi().findNamespaces(itemBankProperties.getGroup()));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to get all namespaces for %s from %s",
                            projectGroupName,
                            itemBankProperties.getHost()));
        }
    }

    @Override
    public Optional<RepositoryFile> findFile(final int itemBankId, final String fileName, final String branchName) {
        try {
            return Optional.of(gitLabApi.getRepositoryFileApi().getFile(fileName, itemBankId, branchName));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to find file %s for itemBankId %d in branch %s",
                            fileName,
                            itemBankId,
                            branchName));
        }
    }

    @Override
    public Optional<List<Branch>> findAllBranches(final int itemBankId) {
        try {
            return Optional.of(gitLabApi.getRepositoryApi().getBranches(itemBankId));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to find all branches for itemBankId %d", itemBankId));
        }
    }

    @Override
    public Optional<List<ProjectHook>> findAllProjectHooks(final int itemBankId) {
        try {
            return Optional.of(gitLabApi.getProjectApi().getHooks(itemBankId));
        } catch (final GitLabApiException e) {
            throw new GitLabApiRuntimeException(e,
                    String.format("Error attempting to find all project hooks for itemBankId %d", itemBankId));
        }
    }
}
