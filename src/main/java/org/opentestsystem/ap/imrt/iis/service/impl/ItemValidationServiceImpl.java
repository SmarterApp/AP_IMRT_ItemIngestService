package org.opentestsystem.ap.imrt.iis.service.impl;

import org.opentestsystem.ap.common.model.ValidationResults;
import org.opentestsystem.ap.imrt.common.exception.NotFoundException;
import org.opentestsystem.ap.imrt.common.model.BaseItem;
import org.opentestsystem.ap.imrt.common.model.ItemGitInformation;
import org.opentestsystem.ap.imrt.common.model.ValidationResult;
import org.opentestsystem.ap.imrt.common.repository.ValidationResultsRepository;
import org.opentestsystem.ap.imrt.common.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemValidationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.Collection;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ItemValidationServiceImpl implements ItemValidationService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemValidationServiceImpl.class);
    private final ValidationResultsRepository validationResultsRepository;
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemTabulatorRepository itemTabulatorRepository;

    public ItemValidationServiceImpl(final ValidationResultsRepository validationResultsRepository, final ItemGitInformationRepository itemGitInformationRepository, final OperationalEventService operationalEventService, final ItemTabulatorRepository itemTabulatorRepository) {
        this.validationResultsRepository = validationResultsRepository;
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemTabulatorRepository = itemTabulatorRepository;
    }

    @Override
    @Transactional
    public void validateItem(final int itemBankId) {
        Optional<ItemGitInformation> maybeItemGitInformation = itemGitInformationRepository.findOneByProjectId(itemBankId);

        if (!maybeItemGitInformation.isPresent()) {
            throw new NotFoundException("Could not find git information for item bank ", itemBankId);
        }

        final ItemGitInformation itemGitInformation = maybeItemGitInformation.get();
        Collection<ValidationResult> results = getValidationResults(itemGitInformation.getItem());

        validationResultsRepository.deleteAllByItem(itemGitInformation.getItem());

        if (!results.isEmpty()) {
            validationResultsRepository.save(results);
        }
    }

    private Collection<ValidationResult> getValidationResults(final BaseItem item) {
        Optional<ValidationResults> maybeValidationResults = itemTabulatorRepository.getValidationResults(item.getId());

        if (!maybeValidationResults.isPresent()) {
            throw new NotFoundException("Did not find any validation results for item %s", item.getId());
        }

        return maybeValidationResults.get().getValidationResults().stream().map(validationResult -> {
            ValidationResult result = new ValidationResult();
            result.setUpdatedBy(item.getUpdatedBy());
            result.setValidationItemType(validationResult.getItemType());
            result.setItem(item);
            result.setValidationItemId(validationResult.getItemId());
            result.setSeverity(validationResult.getSeverity());
            result.setCategory(validationResult.getCategory());
            result.setDetail(validationResult.getDetail());
            result.setMessage(validationResult.getMessage());
            return result;
        }).collect(Collectors.toList());
    }
}
