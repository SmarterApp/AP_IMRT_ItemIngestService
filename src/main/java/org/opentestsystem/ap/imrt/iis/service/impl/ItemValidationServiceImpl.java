package org.opentestsystem.ap.imrt.iis.service.impl;

import org.opentestsystem.ap.common.model.ValidationResults;
import org.opentestsystem.ap.common.imrt.exception.NotFoundException;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.model.ImrtItem;
import org.opentestsystem.ap.common.imrt.model.ItemGitInformation;
import org.opentestsystem.ap.common.imrt.model.Stimulus;
import org.opentestsystem.ap.common.imrt.model.ValidationResult;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.repository.ImrtItemRepository;
import org.opentestsystem.ap.common.imrt.repository.StimulusRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.repository.ItemGitInformationRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemValidationService;
import org.opentestsystem.ap.imrt.iis.service.ProjectLockService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.groupingBy;

@Service
public class ItemValidationServiceImpl implements ItemValidationService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemValidationServiceImpl.class);
    private final ItemGitInformationRepository itemGitInformationRepository;
    private final ItemTabulatorRepository itemTabulatorRepository;
    private final ItemIngestServiceProperties itemIngestServiceProperties;
    private final OperationalEventService logger;
    private final ProjectLockService projectLockService;
    private final BaseItemRepository baseItemRepository;
    private final ImrtItemRepository imrtItemRepository;
    private final StimulusRepository stimulusRepository;


    public ItemValidationServiceImpl(final ItemGitInformationRepository itemGitInformationRepository,
                                     final OperationalEventService logger,
                                     final ItemTabulatorRepository itemTabulatorRepository,
                                     final ItemIngestServiceProperties itemIngestServiceProperties,
                                     final ProjectLockService projectLockService,
                                     final BaseItemRepository baseItemRepository,
                                     final ImrtItemRepository imrtItemRepository,
                                     final StimulusRepository stimulusRepository) {
        this.itemGitInformationRepository = itemGitInformationRepository;
        this.itemTabulatorRepository = itemTabulatorRepository;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
        this.logger = logger;
        this.projectLockService = projectLockService;
        this.baseItemRepository = baseItemRepository;
        this.imrtItemRepository = imrtItemRepository;
        this.stimulusRepository = stimulusRepository;
    }

    @Override
    @Transactional
    public void validateItem(final int itemBankId) {

        Optional<ItemGitInformation> maybeItemGitInformation = itemGitInformationRepository.findOneByProjectId(itemBankId);

        if (!maybeItemGitInformation.isPresent()) {
            throw new NotFoundException("Could not find git information for item bank ", itemBankId);
        }

        final ItemGitInformation itemGitInformation = maybeItemGitInformation.get();

        if (itemIngestServiceProperties.isIgnoreValidate()) {
            logger.debug(LOG, "Ignoring Validation for item {} within item bank id {} and branch {}", itemGitInformation.getItem().getId(), itemGitInformation.getProjectId(), itemGitInformation.getIngestSource());
            return;
        }

        logger.debug(LOG, "Validating item {} within item bank id {} and branch {}", itemGitInformation.getItem().getId(), itemGitInformation.getProjectId(), itemGitInformation.getIngestSource());
        Collection<ValidationResult> results = getValidationResults(itemGitInformation);

        final long lockId = projectLockService.lockProject(itemGitInformation.getProjectId());
        try {
            final BaseItem baseItem = baseItemRepository.findById(itemGitInformation.getItem().getId());

            baseItem.getValidationResults().clear();
            baseItem.getValidationResults().addAll(results);

            final Map<String, List<ValidationResult>> validationResultsGroupedBySeverity = results.stream()
                    .collect(groupingBy(result -> result.getSeverity().toLowerCase()));

            baseItem.setSevereValidationResultCount(validationResultsGroupedBySeverity.getOrDefault("severe", Collections.emptyList()).size());
            baseItem.setDegradedValidationResultCount(validationResultsGroupedBySeverity.getOrDefault("degraded", Collections.emptyList()).size());
            baseItem.setTolerableValidationResultCount(validationResultsGroupedBySeverity.getOrDefault("tolerable", Collections.emptyList()).size());
            baseItem.setBenignValidationResultCount(validationResultsGroupedBySeverity.getOrDefault("benign", Collections.emptyList()).size());

            if (baseItem instanceof ImrtItem) {
                imrtItemRepository.save((ImrtItem) baseItem);
            } else {
                stimulusRepository.save((Stimulus) baseItem);
            }
        } finally {
            projectLockService.unlockProject(itemGitInformation.getProjectId(), lockId);
        }
    }

    private Collection<ValidationResult> getValidationResults(ItemGitInformation itemGitInformation) {
        BaseItem item = itemGitInformation.getItem();
        Optional<ValidationResults> maybeValidationResults = itemTabulatorRepository.getValidationResults(item.getId(), itemGitInformation.getIngestSource());

        if (!maybeValidationResults.isPresent()) {
            throw new NotFoundException("Did not find any validation results for item %s", item.getId());
        }

        return maybeValidationResults.get().getValidationResults().stream().map(validationResult -> {
            ValidationResult result = new ValidationResult();
            result.setUpdatedBy(item.getUpdatedBy());
            result.setValidationItemType(validationResult.getItemType());
            result.setItem(item);
            result.setValidationItemId(validationResult.getItemId());
            result.setSeverity(validationResult.getSeverity());
            result.setCategory(validationResult.getCategory());
            result.setDetail(validationResult.getDetail());
            result.setMessage(validationResult.getMessage());
            return result;
        }).collect(Collectors.toList());
    }
}
