package org.opentestsystem.ap.imrt.iis.service.impl;

import org.opentestsystem.ap.common.imrt.exception.NotFoundException;
import org.opentestsystem.ap.common.imrt.model.BaseItem;
import org.opentestsystem.ap.common.imrt.repository.BaseItemRepository;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.model.validation.ValidationResults;
import org.opentestsystem.ap.imrt.iis.config.ItemIngestServiceProperties;
import org.opentestsystem.ap.imrt.iis.model.ValidationResultDto;
import org.opentestsystem.ap.imrt.iis.repository.ItemRepository;
import org.opentestsystem.ap.imrt.iis.repository.ItemTabulatorRepository;
import org.opentestsystem.ap.imrt.iis.repository.ValidationResultRepository;
import org.opentestsystem.ap.imrt.iis.service.ItemValidationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.time.Instant;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.groupingBy;

@Service
public class ItemValidationServiceImpl implements ItemValidationService {
    private static final Logger LOG = LoggerFactory.getLogger(ItemValidationServiceImpl.class);
    private final ItemTabulatorRepository itemTabulatorRepository;
    private final ItemIngestServiceProperties itemIngestServiceProperties;
    private final OperationalEventService logger;
    private final ItemRepository itemRepository;
    private final BaseItemRepository baseItemRepository;
    private final ValidationResultRepository validationResultRepository;

    public ItemValidationServiceImpl(final OperationalEventService logger,
                                     final ItemTabulatorRepository itemTabulatorRepository,
                                     final ItemIngestServiceProperties itemIngestServiceProperties,
                                     final ItemRepository itemRepository,
                                     final BaseItemRepository baseItemRepository,
                                     final ValidationResultRepository validationResultRepository) {
        this.itemTabulatorRepository = itemTabulatorRepository;
        this.itemIngestServiceProperties = itemIngestServiceProperties;
        this.logger = logger;
        this.itemRepository = itemRepository;
        this.baseItemRepository = baseItemRepository;
        this.validationResultRepository = validationResultRepository;
    }

    @Override
    @Transactional
    public void validateItem(final int itemId) {

        BaseItem baseItem = baseItemRepository.findById(itemId);

        if (baseItem == null) {
            throw new NotFoundException("Could not find git information for item bank ", itemId);
        }

        if (itemIngestServiceProperties.isIgnoreValidate()) {
            logger.info(LOG, "Ignoring Validation for item {}", baseItem.getId());
            return;
        }

        logger.debug(LOG, "Validating item {} within item bank", baseItem.getId());
        Collection<ValidationResultDto> results = getValidationResults(baseItem);

        final Map<String, List<ValidationResultDto>> validationResultsGroupedBySeverity = results.stream()
                .collect(groupingBy(result -> result.getSeverity().toLowerCase()));

        validationResultRepository.deleteAllByItemKey(baseItem.getKey());

        if (!results.isEmpty()) {
            validationResultRepository.createValidationResult(results);
        }

        int severeCount = validationResultsGroupedBySeverity.getOrDefault("severe", Collections.emptyList()).size();
        int degradedCount = validationResultsGroupedBySeverity.getOrDefault("degraded", Collections.emptyList()).size();
        int tolerableCount = validationResultsGroupedBySeverity.getOrDefault("tolerable", Collections.emptyList()).size();
        int benignCount = validationResultsGroupedBySeverity.getOrDefault("benign", Collections.emptyList()).size();

        itemRepository.updateValidationCounts(baseItem.getKey(), severeCount, degradedCount, tolerableCount, benignCount);

        logger.info(LOG, "Validated item {}", baseItem.getId());
    }

    private Collection<ValidationResultDto> getValidationResults(BaseItem item) {
        Optional<ValidationResults> maybeValidationResults = itemTabulatorRepository.getValidationResults(item.getId());

        if (!maybeValidationResults.isPresent()) {
            logger.info(LOG, "Did not find any validation results for item {}", item.getId());
            return Collections.emptyList();
        }
        final Instant now = Instant.now();
        return maybeValidationResults.get().getValidationResults().stream().map(validationResult -> {
            return ValidationResultDto.builder()
                    .updatedAt(now)
                    .createdAt(now)
                    .validationItemId(validationResult.getItemId())
                    .validationItemType(validationResult.getItemType())
                    .severity(validationResult.getSeverity())
                    .message(validationResult.getMessage())
                    .detail(validationResult.getDetail())
                    .category(validationResult.getCategory())
                    .updatedBy(item.getUpdatedBy())
                    .itemKey(item.getKey())
                    .build();
        }).collect(Collectors.toList());
    }
}
