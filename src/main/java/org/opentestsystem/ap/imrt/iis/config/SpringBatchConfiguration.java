package org.opentestsystem.ap.imrt.iis.config;

import org.opentestsystem.ap.imrt.iis.batch.ItemIngestSingleJobExecutionListener;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;

/**
 * Configure Spring Batch to execute Item Ingest Service {@link org.springframework.batch.core.Job}s asynchronously.
 * <p>
 * Item Ingest Job rules:
 * </p>
 * <p>
 * 1. Only one instance of the job should run at a time. If the job is currently running, other requests to start the
 * job should be rejected
 * 2. The job should not run when Spring Boot starts up. Instead, the job should be started by a call to a web endpoint
 * (e.g. a RESTful call)
 * 3. The same job should be able to run multiple times (i.e. it should be repeatable).  That is, the job should be able
 * to run once a day (or at some other regular interval).
 * </p>
 */
@Configuration
@EnableBatchProcessing
public class SpringBatchConfiguration {
    /**
     * A {@link org.springframework.batch.core.launch.JobLauncher} implementation that will kick off the job
     * asynchronously, returning control to the caller.
     *
     * @param jobRepository A {@link org.springframework.batch.core.repository.JobRepository} implementation for
     *                      interacting with the Spring Batch database.
     * @param taskExecutor  A {@link org.springframework.core.task.TaskExecutor} implementation for determining how the
     *                      {@link org.springframework.batch.core.Job} should execute.
     * @return A {@link org.springframework.batch.core.launch.JobLauncher} implementation
     */
    @Bean
    public JobLauncher jobLauncher(final JobRepository jobRepository, final TaskExecutor taskExecutor) {
        final SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
        jobLauncher.setJobRepository(jobRepository);
        jobLauncher.setTaskExecutor(taskExecutor);
        return jobLauncher;
    }

    /**
     * A {@link org.springframework.core.task.TaskExecutor} implementation that provides extra functionality for
     * starting the Item Ingest Service {@link org.springframework.batch.core.Job}.
     *
     * @return A {@link org.springframework.core.task.TaskExecutor}
     */
    @Bean
    public TaskExecutor taskExecutor() {
        return new SimpleAsyncTaskExecutor();
    }

    /**
     * A {@link org.springframework.batch.core.JobExecutionListener} implementation that will ensure only one instance
     * of an Item Ingest Service {@link org.springframework.batch.core.Job} is running.
     *
     * @return A {@link org.springframework.batch.core.JobExecutionListener} implementation that prevents running
     * multiple instances of the Item Ingest Service {@link org.springframework.batch.core.Job}s.
     */
    @Bean
    public JobExecutionListener itemIngestSingleJobExecutionListener() {
        return new ItemIngestSingleJobExecutionListener();
    }
}
