package org.opentestsystem.ap.imrt.iis.config;

import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.explore.JobExplorer;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.JobOperator;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.launch.support.SimpleJobOperator;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;

/**
 * Configure Spring Batch to execute the item synchronization process as a {@link org.springframework.batch.core.Job}.
 * <p>
 * Item Synchronization Job rules:
 * </p>
 * <p>
 * 1. Only one instance of the job should run at a time. If the job is currently running, other requests to start the
 * item synchronization job should be rejected
 * 2. The job should not run when Spring Boot starts up. Instead, the job should be started by a call to a web endpoint
 * (e.g. a RESTful call)
 * 3. The same job should be able to run multiple times (i.e. it should be repeatable).  That is, the Item
 * Synchronization Process should be able to run once a day (or at some other regular interval)
 * </p>
 */
@Configuration
@EnableBatchProcessing
public class SpringBatchConfiguration {

    /**
     * A {@link org.springframework.batch.core.launch.JobLauncher} implementation that will kick off the item
     * synchronization process job asynchronously, returning control to the caller.
     *
     * @param jobRepository A {@link org.springframework.batch.core.repository.JobRepository} implementation for
     *                      interacting with the Spring Batch database.
     * @param taskExecutor  A {@link org.springframework.core.task.TaskExecutor} implementation for determining how the
     *                      {@link org.springframework.batch.core.Job} should execute.
     * @return A {@link org.springframework.batch.core.launch.JobLauncher} implementation
     */
    @Bean
    public JobLauncher jobLauncher(final JobRepository jobRepository, final TaskExecutor taskExecutor) {
        final SimpleJobLauncher jobLauncher = new SimpleJobLauncher();
        jobLauncher.setJobRepository(jobRepository);
        jobLauncher.setTaskExecutor(taskExecutor);
        return jobLauncher;
    }

    /**
     * A {@link org.springframework.core.task.TaskExecutor} implementation that provides extra functionality for
     * starting the item synchronization {@link org.springframework.batch.core.Job}.
     *
     * @return A {@link org.springframework.core.task.TaskExecutor}
     */
    @Bean
    public TaskExecutor taskExecutor() {
        return new SimpleAsyncTaskExecutor();
    }

    /**
     * A {@link JobOperator} implementation that will allow us to control jobs after they are started.
     * @param jobExplorer A {@link JobExplorer} for reading from the Spring Batch database.
     * @param jobLauncher A {@link JobLauncher} for launching jobs.
     * @param jobRegistry A {@link JobRegistry} for managing jobs.
     * @param jobRepository A {@link JobRepository} for interacting with the Spring Batch database.
     * @return A {@link JobOperator} implementation.
     */
    @Bean
    public JobOperator jobOperator(JobExplorer jobExplorer, JobLauncher jobLauncher, JobRegistry jobRegistry, JobRepository jobRepository) {
        SimpleJobOperator jobOperator = new SimpleJobOperator();
        jobOperator.setJobExplorer(jobExplorer);
        jobOperator.setJobLauncher(jobLauncher);
        jobOperator.setJobRegistry(jobRegistry);
        jobOperator.setJobRepository(jobRepository);
        return jobOperator;
    }
}
