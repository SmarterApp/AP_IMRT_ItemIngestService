package org.opentestsystem.ap.imrt.iis.event;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.imrt.service.OperationalEventService;
import org.opentestsystem.ap.common.management.ItemEventHandler;
import org.opentestsystem.ap.common.model.events.ItemEvent;
import org.opentestsystem.ap.imrt.iis.model.ItemUpdateEvent;
import org.opentestsystem.ap.imrt.iis.service.ItemWorkQueueService;
import org.springframework.stereotype.Component;

import java.util.UUID;

import static com.amazonaws.util.StringUtils.trim;
import static java.lang.Integer.parseInt;

@Slf4j
@Component
public class TimsItemEventHandler implements ItemEventHandler {
    private final ItemWorkQueueService itemWorkQueueService;
    private final OperationalEventService logger;

    public TimsItemEventHandler(final ItemWorkQueueService itemWorkQueueService, final OperationalEventService operationalEventService) {
        this.itemWorkQueueService = itemWorkQueueService;
        this.logger = operationalEventService;
    }

    @Override
    public void onItemEvent(final ItemEvent itemEvent) {
        logger.info(log, "Got an item event {} with master commit id {} for item {}", itemEvent.getType(), itemEvent.getMasterCommitId(), itemEvent.getItemId());
        final String eventType = itemEvent.getType();
        switch (eventType) {
            case ItemEvent.TYPE_CREATE:
            case ItemEvent.TYPE_PATCH:
            case ItemEvent.TYPE_COMMIT:
                ItemUpdateEvent itemUpdateEvent = new ItemUpdateEvent(parseInt(trim(itemEvent.getItemId())), UUID.fromString(itemEvent.getMasterCommitId()), itemEvent.getUser().getFullName());
                itemWorkQueueService.sendItemUpdateMessage(itemUpdateEvent);
                break;
            case ItemEvent.TYPE_DELETE:
                itemWorkQueueService.sendItemDeleteMessage(parseInt(trim(itemEvent.getItemId())));
                break;
            default:
                logger.warn(log, null, "Received unknown item event type {} for item {} commit {}",  eventType, itemEvent.getItemId(), itemEvent.getMasterCommitId());
        }
    }
}
